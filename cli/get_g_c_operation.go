// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/gc"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationGcGetGCCmd returns a cmd to handle operation getGC
func makeOperationGcGetGCCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getGC",
		Short: `This endpoint let user get gc status filtered by specific ID.`,
		RunE:  runOperationGcGetGC,
	}

	if err := registerOperationGcGetGCParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationGcGetGC uses cmd flags to call endpoint api
func runOperationGcGetGC(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := gc.NewGetGCParams()
	if err, _ := retrieveOperationGcGetGCXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationGcGetGCGcIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationGcGetGCResult(appCli.Gc.GetGC(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationGcGetGCParamFlags registers all flags needed to fill params
func registerOperationGcGetGCParamFlags(cmd *cobra.Command) error {
	if err := registerOperationGcGetGCXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationGcGetGCGcIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationGcGetGCXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationGcGetGCGcIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	gcIdDescription := `Required. The ID of the gc log`

	var gcIdFlagName string
	if cmdPrefix == "" {
		gcIdFlagName = "gc_id"
	} else {
		gcIdFlagName = fmt.Sprintf("%v.gc_id", cmdPrefix)
	}

	var gcIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(gcIdFlagName, gcIdFlagDefault, gcIdDescription)

	return nil
}

func retrieveOperationGcGetGCXRequestIDFlag(m *gc.GetGCParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationGcGetGCGcIDFlag(m *gc.GetGCParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("gc_id") {

		var gcIdFlagName string
		if cmdPrefix == "" {
			gcIdFlagName = "gc_id"
		} else {
			gcIdFlagName = fmt.Sprintf("%v.gc_id", cmdPrefix)
		}

		gcIdFlagValue, err := cmd.Flags().GetInt64(gcIdFlagName)
		if err != nil {
			return err, false
		}
		m.GcID = gcIdFlagValue

	}
	return nil, retAdded
}

// parseOperationGcGetGCResult parses request result and return the string content
func parseOperationGcGetGCResult(resp0 *gc.GetGCOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*gc.GetGCOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*gc.GetGCUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*gc.GetGCForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*gc.GetGCNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*gc.GetGCInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
