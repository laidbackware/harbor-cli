// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionSelectorMetadata

// register flags to command
func registerModelRetentionSelectorMetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionSelectorMetadataDecorations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionSelectorMetadataDisplayText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionSelectorMetadataKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionSelectorMetadataDecorations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: decorations []string array type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionSelectorMetadataDisplayText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayTextDescription := ``

	var displayTextFlagName string
	if cmdPrefix == "" {
		displayTextFlagName = "display_text"
	} else {
		displayTextFlagName = fmt.Sprintf("%v.display_text", cmdPrefix)
	}

	var displayTextFlagDefault string

	_ = cmd.PersistentFlags().String(displayTextFlagName, displayTextFlagDefault, displayTextDescription)

	return nil
}

func registerRetentionSelectorMetadataKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := ``

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionSelectorMetadataFlags(depth int, m *models.RetentionSelectorMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, decorationsAdded := retrieveRetentionSelectorMetadataDecorationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decorationsAdded

	err, displayTextAdded := retrieveRetentionSelectorMetadataDisplayTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayTextAdded

	err, kindAdded := retrieveRetentionSelectorMetadataKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	return nil, retAdded
}

func retrieveRetentionSelectorMetadataDecorationsFlags(depth int, m *models.RetentionSelectorMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	decorationsFlagName := fmt.Sprintf("%v.decorations", cmdPrefix)
	if cmd.Flags().Changed(decorationsFlagName) {
		// warning: decorations array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionSelectorMetadataDisplayTextFlags(depth int, m *models.RetentionSelectorMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayTextFlagName := fmt.Sprintf("%v.display_text", cmdPrefix)
	if cmd.Flags().Changed(displayTextFlagName) {

		var displayTextFlagName string
		if cmdPrefix == "" {
			displayTextFlagName = "display_text"
		} else {
			displayTextFlagName = fmt.Sprintf("%v.display_text", cmdPrefix)
		}

		displayTextFlagValue, err := cmd.Flags().GetString(displayTextFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayText = displayTextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionSelectorMetadataKindFlags(depth int, m *models.RetentionSelectorMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}
