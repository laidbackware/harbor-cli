// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RegistryCredential

// register flags to command
func registerModelRegistryCredentialFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistryCredentialAccessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryCredentialAccessSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryCredentialType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryCredentialAccessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessKeyDescription := `Access key, e.g. user name when credential type is basic.`

	var accessKeyFlagName string
	if cmdPrefix == "" {
		accessKeyFlagName = "access_key"
	} else {
		accessKeyFlagName = fmt.Sprintf("%v.access_key", cmdPrefix)
	}

	var accessKeyFlagDefault string

	_ = cmd.PersistentFlags().String(accessKeyFlagName, accessKeyFlagDefault, accessKeyDescription)

	return nil
}

func registerRegistryCredentialAccessSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessSecretDescription := `Access secret, e.g. password when credential type is basic.`

	var accessSecretFlagName string
	if cmdPrefix == "" {
		accessSecretFlagName = "access_secret"
	} else {
		accessSecretFlagName = fmt.Sprintf("%v.access_secret", cmdPrefix)
	}

	var accessSecretFlagDefault string

	_ = cmd.PersistentFlags().String(accessSecretFlagName, accessSecretFlagDefault, accessSecretDescription)

	return nil
}

func registerRegistryCredentialType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Credential type, such as basic, oauth.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistryCredentialFlags(depth int, m *models.RegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessKeyAdded := retrieveRegistryCredentialAccessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessKeyAdded

	err, accessSecretAdded := retrieveRegistryCredentialAccessSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessSecretAdded

	err, typeAdded := retrieveRegistryCredentialTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveRegistryCredentialAccessKeyFlags(depth int, m *models.RegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessKeyFlagName := fmt.Sprintf("%v.access_key", cmdPrefix)
	if cmd.Flags().Changed(accessKeyFlagName) {

		var accessKeyFlagName string
		if cmdPrefix == "" {
			accessKeyFlagName = "access_key"
		} else {
			accessKeyFlagName = fmt.Sprintf("%v.access_key", cmdPrefix)
		}

		accessKeyFlagValue, err := cmd.Flags().GetString(accessKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AccessKey = accessKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryCredentialAccessSecretFlags(depth int, m *models.RegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessSecretFlagName := fmt.Sprintf("%v.access_secret", cmdPrefix)
	if cmd.Flags().Changed(accessSecretFlagName) {

		var accessSecretFlagName string
		if cmdPrefix == "" {
			accessSecretFlagName = "access_secret"
		} else {
			accessSecretFlagName = fmt.Sprintf("%v.access_secret", cmdPrefix)
		}

		accessSecretFlagValue, err := cmd.Flags().GetString(accessSecretFlagName)
		if err != nil {
			return err, false
		}
		m.AccessSecret = accessSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryCredentialTypeFlags(depth int, m *models.RegistryCredential, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
