// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Configurations

// register flags to command
func registerModelConfigurationsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigurationsAuthMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailIdentity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailInsecure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsEmailUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyAdminGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyAdminUsernames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyServerCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxySkipSearch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyTokenreviewEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsHTTPAuthproxyVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapBaseDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupAdminDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupAttributeName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupBaseDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupMembershipAttribute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupSearchFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapGroupSearchScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapSearchDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapSearchPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsLdapVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsNotificationEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcAdminGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcAutoOnboard(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcClientSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcExtraRedirectParms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcGroupsClaim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcUserClaim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsOidcVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsProjectCreationRestriction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsQuotaPerProjectEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsRobotNamePrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsRobotTokenDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsSelfRegistration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsStoragePerProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsTokenExpiration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsUaaClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsUaaClientSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsUaaEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsUaaVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsAuthMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authModeDescription := `The auth mode of current system, such as 'db_auth', 'ldap_auth', 'oidc_auth'`

	var authModeFlagName string
	if cmdPrefix == "" {
		authModeFlagName = "auth_mode"
	} else {
		authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
	}

	var authModeFlagDefault string

	_ = cmd.PersistentFlags().String(authModeFlagName, authModeFlagDefault, authModeDescription)

	return nil
}

func registerConfigurationsEmailFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailFromDescription := `The sender name for Email notification.`

	var emailFromFlagName string
	if cmdPrefix == "" {
		emailFromFlagName = "email_from"
	} else {
		emailFromFlagName = fmt.Sprintf("%v.email_from", cmdPrefix)
	}

	var emailFromFlagDefault string

	_ = cmd.PersistentFlags().String(emailFromFlagName, emailFromFlagDefault, emailFromDescription)

	return nil
}

func registerConfigurationsEmailHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailHostDescription := `The hostname of SMTP server that sends Email notification.`

	var emailHostFlagName string
	if cmdPrefix == "" {
		emailHostFlagName = "email_host"
	} else {
		emailHostFlagName = fmt.Sprintf("%v.email_host", cmdPrefix)
	}

	var emailHostFlagDefault string

	_ = cmd.PersistentFlags().String(emailHostFlagName, emailHostFlagDefault, emailHostDescription)

	return nil
}

func registerConfigurationsEmailIdentity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailIdentityDescription := `By default its empty so the email_username is picked`

	var emailIdentityFlagName string
	if cmdPrefix == "" {
		emailIdentityFlagName = "email_identity"
	} else {
		emailIdentityFlagName = fmt.Sprintf("%v.email_identity", cmdPrefix)
	}

	var emailIdentityFlagDefault string

	_ = cmd.PersistentFlags().String(emailIdentityFlagName, emailIdentityFlagDefault, emailIdentityDescription)

	return nil
}

func registerConfigurationsEmailInsecure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailInsecureDescription := `Whether or not the certificate will be verified when Harbor tries to access the email server.`

	var emailInsecureFlagName string
	if cmdPrefix == "" {
		emailInsecureFlagName = "email_insecure"
	} else {
		emailInsecureFlagName = fmt.Sprintf("%v.email_insecure", cmdPrefix)
	}

	var emailInsecureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(emailInsecureFlagName, emailInsecureFlagDefault, emailInsecureDescription)

	return nil
}

func registerConfigurationsEmailPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailPasswordDescription := `Email password`

	var emailPasswordFlagName string
	if cmdPrefix == "" {
		emailPasswordFlagName = "email_password"
	} else {
		emailPasswordFlagName = fmt.Sprintf("%v.email_password", cmdPrefix)
	}

	var emailPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(emailPasswordFlagName, emailPasswordFlagDefault, emailPasswordDescription)

	return nil
}

func registerConfigurationsEmailPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailPortDescription := `The port of SMTP server`

	var emailPortFlagName string
	if cmdPrefix == "" {
		emailPortFlagName = "email_port"
	} else {
		emailPortFlagName = fmt.Sprintf("%v.email_port", cmdPrefix)
	}

	var emailPortFlagDefault int64

	_ = cmd.PersistentFlags().Int64(emailPortFlagName, emailPortFlagDefault, emailPortDescription)

	return nil
}

func registerConfigurationsEmailSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailSslDescription := `When its set to true the system will access Email server via TLS by default.  If its set to false, it still will handle 'STARTTLS' from server side.`

	var emailSslFlagName string
	if cmdPrefix == "" {
		emailSslFlagName = "email_ssl"
	} else {
		emailSslFlagName = fmt.Sprintf("%v.email_ssl", cmdPrefix)
	}

	var emailSslFlagDefault bool

	_ = cmd.PersistentFlags().Bool(emailSslFlagName, emailSslFlagDefault, emailSslDescription)

	return nil
}

func registerConfigurationsEmailUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailUsernameDescription := `The username for authenticate against SMTP server`

	var emailUsernameFlagName string
	if cmdPrefix == "" {
		emailUsernameFlagName = "email_username"
	} else {
		emailUsernameFlagName = fmt.Sprintf("%v.email_username", cmdPrefix)
	}

	var emailUsernameFlagDefault string

	_ = cmd.PersistentFlags().String(emailUsernameFlagName, emailUsernameFlagDefault, emailUsernameDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyAdminGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyAdminGroupsDescription := `The group which has the harbor admin privileges`

	var httpAuthproxyAdminGroupsFlagName string
	if cmdPrefix == "" {
		httpAuthproxyAdminGroupsFlagName = "http_authproxy_admin_groups"
	} else {
		httpAuthproxyAdminGroupsFlagName = fmt.Sprintf("%v.http_authproxy_admin_groups", cmdPrefix)
	}

	var httpAuthproxyAdminGroupsFlagDefault string

	_ = cmd.PersistentFlags().String(httpAuthproxyAdminGroupsFlagName, httpAuthproxyAdminGroupsFlagDefault, httpAuthproxyAdminGroupsDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyAdminUsernames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyAdminUsernamesDescription := `The username which has the harbor admin privileges`

	var httpAuthproxyAdminUsernamesFlagName string
	if cmdPrefix == "" {
		httpAuthproxyAdminUsernamesFlagName = "http_authproxy_admin_usernames"
	} else {
		httpAuthproxyAdminUsernamesFlagName = fmt.Sprintf("%v.http_authproxy_admin_usernames", cmdPrefix)
	}

	var httpAuthproxyAdminUsernamesFlagDefault string

	_ = cmd.PersistentFlags().String(httpAuthproxyAdminUsernamesFlagName, httpAuthproxyAdminUsernamesFlagDefault, httpAuthproxyAdminUsernamesDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyEndpointDescription := `The endpoint of the HTTP auth`

	var httpAuthproxyEndpointFlagName string
	if cmdPrefix == "" {
		httpAuthproxyEndpointFlagName = "http_authproxy_endpoint"
	} else {
		httpAuthproxyEndpointFlagName = fmt.Sprintf("%v.http_authproxy_endpoint", cmdPrefix)
	}

	var httpAuthproxyEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(httpAuthproxyEndpointFlagName, httpAuthproxyEndpointFlagDefault, httpAuthproxyEndpointDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyServerCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyServerCertificateDescription := `The certificate of the HTTP auth provider`

	var httpAuthproxyServerCertificateFlagName string
	if cmdPrefix == "" {
		httpAuthproxyServerCertificateFlagName = "http_authproxy_server_certificate"
	} else {
		httpAuthproxyServerCertificateFlagName = fmt.Sprintf("%v.http_authproxy_server_certificate", cmdPrefix)
	}

	var httpAuthproxyServerCertificateFlagDefault string

	_ = cmd.PersistentFlags().String(httpAuthproxyServerCertificateFlagName, httpAuthproxyServerCertificateFlagDefault, httpAuthproxyServerCertificateDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxySkipSearch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxySkipSearchDescription := `Search user before onboard`

	var httpAuthproxySkipSearchFlagName string
	if cmdPrefix == "" {
		httpAuthproxySkipSearchFlagName = "http_authproxy_skip_search"
	} else {
		httpAuthproxySkipSearchFlagName = fmt.Sprintf("%v.http_authproxy_skip_search", cmdPrefix)
	}

	var httpAuthproxySkipSearchFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httpAuthproxySkipSearchFlagName, httpAuthproxySkipSearchFlagDefault, httpAuthproxySkipSearchDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyTokenreviewEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyTokenreviewEndpointDescription := `The token review endpoint`

	var httpAuthproxyTokenreviewEndpointFlagName string
	if cmdPrefix == "" {
		httpAuthproxyTokenreviewEndpointFlagName = "http_authproxy_tokenreview_endpoint"
	} else {
		httpAuthproxyTokenreviewEndpointFlagName = fmt.Sprintf("%v.http_authproxy_tokenreview_endpoint", cmdPrefix)
	}

	var httpAuthproxyTokenreviewEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(httpAuthproxyTokenreviewEndpointFlagName, httpAuthproxyTokenreviewEndpointFlagDefault, httpAuthproxyTokenreviewEndpointDescription)

	return nil
}

func registerConfigurationsHTTPAuthproxyVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpAuthproxyVerifyCertDescription := `Verify the HTTP auth providers certificate`

	var httpAuthproxyVerifyCertFlagName string
	if cmdPrefix == "" {
		httpAuthproxyVerifyCertFlagName = "http_authproxy_verify_cert"
	} else {
		httpAuthproxyVerifyCertFlagName = fmt.Sprintf("%v.http_authproxy_verify_cert", cmdPrefix)
	}

	var httpAuthproxyVerifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(httpAuthproxyVerifyCertFlagName, httpAuthproxyVerifyCertFlagDefault, httpAuthproxyVerifyCertDescription)

	return nil
}

func registerConfigurationsLdapBaseDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapBaseDnDescription := `The Base DN for LDAP binding.`

	var ldapBaseDnFlagName string
	if cmdPrefix == "" {
		ldapBaseDnFlagName = "ldap_base_dn"
	} else {
		ldapBaseDnFlagName = fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	}

	var ldapBaseDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapBaseDnFlagName, ldapBaseDnFlagDefault, ldapBaseDnDescription)

	return nil
}

func registerConfigurationsLdapFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapFilterDescription := `The filter for LDAP search`

	var ldapFilterFlagName string
	if cmdPrefix == "" {
		ldapFilterFlagName = "ldap_filter"
	} else {
		ldapFilterFlagName = fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	}

	var ldapFilterFlagDefault string

	_ = cmd.PersistentFlags().String(ldapFilterFlagName, ldapFilterFlagDefault, ldapFilterDescription)

	return nil
}

func registerConfigurationsLdapGroupAdminDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupAdminDnDescription := `Specify the ldap group which have the same privilege with Harbor admin`

	var ldapGroupAdminDnFlagName string
	if cmdPrefix == "" {
		ldapGroupAdminDnFlagName = "ldap_group_admin_dn"
	} else {
		ldapGroupAdminDnFlagName = fmt.Sprintf("%v.ldap_group_admin_dn", cmdPrefix)
	}

	var ldapGroupAdminDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapGroupAdminDnFlagName, ldapGroupAdminDnFlagDefault, ldapGroupAdminDnDescription)

	return nil
}

func registerConfigurationsLdapGroupAttributeName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupAttributeNameDescription := `The attribute which is used as identity of the LDAP group, default is cn.`

	var ldapGroupAttributeNameFlagName string
	if cmdPrefix == "" {
		ldapGroupAttributeNameFlagName = "ldap_group_attribute_name"
	} else {
		ldapGroupAttributeNameFlagName = fmt.Sprintf("%v.ldap_group_attribute_name", cmdPrefix)
	}

	var ldapGroupAttributeNameFlagDefault string

	_ = cmd.PersistentFlags().String(ldapGroupAttributeNameFlagName, ldapGroupAttributeNameFlagDefault, ldapGroupAttributeNameDescription)

	return nil
}

func registerConfigurationsLdapGroupBaseDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupBaseDnDescription := `The base DN to search LDAP group.`

	var ldapGroupBaseDnFlagName string
	if cmdPrefix == "" {
		ldapGroupBaseDnFlagName = "ldap_group_base_dn"
	} else {
		ldapGroupBaseDnFlagName = fmt.Sprintf("%v.ldap_group_base_dn", cmdPrefix)
	}

	var ldapGroupBaseDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapGroupBaseDnFlagName, ldapGroupBaseDnFlagDefault, ldapGroupBaseDnDescription)

	return nil
}

func registerConfigurationsLdapGroupMembershipAttribute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupMembershipAttributeDescription := `The user attribute to identify the group membership`

	var ldapGroupMembershipAttributeFlagName string
	if cmdPrefix == "" {
		ldapGroupMembershipAttributeFlagName = "ldap_group_membership_attribute"
	} else {
		ldapGroupMembershipAttributeFlagName = fmt.Sprintf("%v.ldap_group_membership_attribute", cmdPrefix)
	}

	var ldapGroupMembershipAttributeFlagDefault string

	_ = cmd.PersistentFlags().String(ldapGroupMembershipAttributeFlagName, ldapGroupMembershipAttributeFlagDefault, ldapGroupMembershipAttributeDescription)

	return nil
}

func registerConfigurationsLdapGroupSearchFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupSearchFilterDescription := `The filter to search the ldap group`

	var ldapGroupSearchFilterFlagName string
	if cmdPrefix == "" {
		ldapGroupSearchFilterFlagName = "ldap_group_search_filter"
	} else {
		ldapGroupSearchFilterFlagName = fmt.Sprintf("%v.ldap_group_search_filter", cmdPrefix)
	}

	var ldapGroupSearchFilterFlagDefault string

	_ = cmd.PersistentFlags().String(ldapGroupSearchFilterFlagName, ldapGroupSearchFilterFlagDefault, ldapGroupSearchFilterDescription)

	return nil
}

func registerConfigurationsLdapGroupSearchScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapGroupSearchScopeDescription := `The scope to search ldap group. 0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE`

	var ldapGroupSearchScopeFlagName string
	if cmdPrefix == "" {
		ldapGroupSearchScopeFlagName = "ldap_group_search_scope"
	} else {
		ldapGroupSearchScopeFlagName = fmt.Sprintf("%v.ldap_group_search_scope", cmdPrefix)
	}

	var ldapGroupSearchScopeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ldapGroupSearchScopeFlagName, ldapGroupSearchScopeFlagDefault, ldapGroupSearchScopeDescription)

	return nil
}

func registerConfigurationsLdapScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapScopeDescription := `The scope to search ldap users,0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE`

	var ldapScopeFlagName string
	if cmdPrefix == "" {
		ldapScopeFlagName = "ldap_scope"
	} else {
		ldapScopeFlagName = fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	}

	var ldapScopeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ldapScopeFlagName, ldapScopeFlagDefault, ldapScopeDescription)

	return nil
}

func registerConfigurationsLdapSearchDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapSearchDnDescription := `The DN of the user to do the search.`

	var ldapSearchDnFlagName string
	if cmdPrefix == "" {
		ldapSearchDnFlagName = "ldap_search_dn"
	} else {
		ldapSearchDnFlagName = fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	}

	var ldapSearchDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapSearchDnFlagName, ldapSearchDnFlagDefault, ldapSearchDnDescription)

	return nil
}

func registerConfigurationsLdapSearchPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapSearchPasswordDescription := `The password of the ldap search dn`

	var ldapSearchPasswordFlagName string
	if cmdPrefix == "" {
		ldapSearchPasswordFlagName = "ldap_search_password"
	} else {
		ldapSearchPasswordFlagName = fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
	}

	var ldapSearchPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(ldapSearchPasswordFlagName, ldapSearchPasswordFlagDefault, ldapSearchPasswordDescription)

	return nil
}

func registerConfigurationsLdapTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapTimeoutDescription := `Timeout in seconds for connection to LDAP server`

	var ldapTimeoutFlagName string
	if cmdPrefix == "" {
		ldapTimeoutFlagName = "ldap_timeout"
	} else {
		ldapTimeoutFlagName = fmt.Sprintf("%v.ldap_timeout", cmdPrefix)
	}

	var ldapTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ldapTimeoutFlagName, ldapTimeoutFlagDefault, ldapTimeoutDescription)

	return nil
}

func registerConfigurationsLdapUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapUidDescription := `The attribute which is used as identity for the LDAP binding, such as 'CN' or 'SAMAccountname'`

	var ldapUidFlagName string
	if cmdPrefix == "" {
		ldapUidFlagName = "ldap_uid"
	} else {
		ldapUidFlagName = fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	}

	var ldapUidFlagDefault string

	_ = cmd.PersistentFlags().String(ldapUidFlagName, ldapUidFlagDefault, ldapUidDescription)

	return nil
}

func registerConfigurationsLdapURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapUrlDescription := `The URL of LDAP server`

	var ldapUrlFlagName string
	if cmdPrefix == "" {
		ldapUrlFlagName = "ldap_url"
	} else {
		ldapUrlFlagName = fmt.Sprintf("%v.ldap_url", cmdPrefix)
	}

	var ldapUrlFlagDefault string

	_ = cmd.PersistentFlags().String(ldapUrlFlagName, ldapUrlFlagDefault, ldapUrlDescription)

	return nil
}

func registerConfigurationsLdapVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapVerifyCertDescription := `Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.`

	var ldapVerifyCertFlagName string
	if cmdPrefix == "" {
		ldapVerifyCertFlagName = "ldap_verify_cert"
	} else {
		ldapVerifyCertFlagName = fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	}

	var ldapVerifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ldapVerifyCertFlagName, ldapVerifyCertFlagDefault, ldapVerifyCertDescription)

	return nil
}

func registerConfigurationsNotificationEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	notificationEnableDescription := `Enable notification`

	var notificationEnableFlagName string
	if cmdPrefix == "" {
		notificationEnableFlagName = "notification_enable"
	} else {
		notificationEnableFlagName = fmt.Sprintf("%v.notification_enable", cmdPrefix)
	}

	var notificationEnableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(notificationEnableFlagName, notificationEnableFlagDefault, notificationEnableDescription)

	return nil
}

func registerConfigurationsOidcAdminGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcAdminGroupDescription := `The OIDC group which has the harbor admin privileges`

	var oidcAdminGroupFlagName string
	if cmdPrefix == "" {
		oidcAdminGroupFlagName = "oidc_admin_group"
	} else {
		oidcAdminGroupFlagName = fmt.Sprintf("%v.oidc_admin_group", cmdPrefix)
	}

	var oidcAdminGroupFlagDefault string

	_ = cmd.PersistentFlags().String(oidcAdminGroupFlagName, oidcAdminGroupFlagDefault, oidcAdminGroupDescription)

	return nil
}

func registerConfigurationsOidcAutoOnboard(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcAutoOnboardDescription := `Auto onboard the OIDC user`

	var oidcAutoOnboardFlagName string
	if cmdPrefix == "" {
		oidcAutoOnboardFlagName = "oidc_auto_onboard"
	} else {
		oidcAutoOnboardFlagName = fmt.Sprintf("%v.oidc_auto_onboard", cmdPrefix)
	}

	var oidcAutoOnboardFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oidcAutoOnboardFlagName, oidcAutoOnboardFlagDefault, oidcAutoOnboardDescription)

	return nil
}

func registerConfigurationsOidcClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcClientIdDescription := `The client ID of the OIDC provider`

	var oidcClientIdFlagName string
	if cmdPrefix == "" {
		oidcClientIdFlagName = "oidc_client_id"
	} else {
		oidcClientIdFlagName = fmt.Sprintf("%v.oidc_client_id", cmdPrefix)
	}

	var oidcClientIdFlagDefault string

	_ = cmd.PersistentFlags().String(oidcClientIdFlagName, oidcClientIdFlagDefault, oidcClientIdDescription)

	return nil
}

func registerConfigurationsOidcClientSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcClientSecretDescription := `The OIDC provider secret`

	var oidcClientSecretFlagName string
	if cmdPrefix == "" {
		oidcClientSecretFlagName = "oidc_client_secret"
	} else {
		oidcClientSecretFlagName = fmt.Sprintf("%v.oidc_client_secret", cmdPrefix)
	}

	var oidcClientSecretFlagDefault string

	_ = cmd.PersistentFlags().String(oidcClientSecretFlagName, oidcClientSecretFlagDefault, oidcClientSecretDescription)

	return nil
}

func registerConfigurationsOidcEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcEndpointDescription := `The endpoint of the OIDC provider`

	var oidcEndpointFlagName string
	if cmdPrefix == "" {
		oidcEndpointFlagName = "oidc_endpoint"
	} else {
		oidcEndpointFlagName = fmt.Sprintf("%v.oidc_endpoint", cmdPrefix)
	}

	var oidcEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(oidcEndpointFlagName, oidcEndpointFlagDefault, oidcEndpointDescription)

	return nil
}

func registerConfigurationsOidcExtraRedirectParms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcExtraRedirectParmsDescription := `Extra parameters to add when redirect request to OIDC provider`

	var oidcExtraRedirectParmsFlagName string
	if cmdPrefix == "" {
		oidcExtraRedirectParmsFlagName = "oidc_extra_redirect_parms"
	} else {
		oidcExtraRedirectParmsFlagName = fmt.Sprintf("%v.oidc_extra_redirect_parms", cmdPrefix)
	}

	var oidcExtraRedirectParmsFlagDefault string

	_ = cmd.PersistentFlags().String(oidcExtraRedirectParmsFlagName, oidcExtraRedirectParmsFlagDefault, oidcExtraRedirectParmsDescription)

	return nil
}

func registerConfigurationsOidcGroupsClaim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcGroupsClaimDescription := `The attribute claims the group name`

	var oidcGroupsClaimFlagName string
	if cmdPrefix == "" {
		oidcGroupsClaimFlagName = "oidc_groups_claim"
	} else {
		oidcGroupsClaimFlagName = fmt.Sprintf("%v.oidc_groups_claim", cmdPrefix)
	}

	var oidcGroupsClaimFlagDefault string

	_ = cmd.PersistentFlags().String(oidcGroupsClaimFlagName, oidcGroupsClaimFlagDefault, oidcGroupsClaimDescription)

	return nil
}

func registerConfigurationsOidcName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcNameDescription := `The OIDC provider name`

	var oidcNameFlagName string
	if cmdPrefix == "" {
		oidcNameFlagName = "oidc_name"
	} else {
		oidcNameFlagName = fmt.Sprintf("%v.oidc_name", cmdPrefix)
	}

	var oidcNameFlagDefault string

	_ = cmd.PersistentFlags().String(oidcNameFlagName, oidcNameFlagDefault, oidcNameDescription)

	return nil
}

func registerConfigurationsOidcScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcScopeDescription := `The scope of the OIDC provider`

	var oidcScopeFlagName string
	if cmdPrefix == "" {
		oidcScopeFlagName = "oidc_scope"
	} else {
		oidcScopeFlagName = fmt.Sprintf("%v.oidc_scope", cmdPrefix)
	}

	var oidcScopeFlagDefault string

	_ = cmd.PersistentFlags().String(oidcScopeFlagName, oidcScopeFlagDefault, oidcScopeDescription)

	return nil
}

func registerConfigurationsOidcUserClaim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcUserClaimDescription := `The attribute claims the username`

	var oidcUserClaimFlagName string
	if cmdPrefix == "" {
		oidcUserClaimFlagName = "oidc_user_claim"
	} else {
		oidcUserClaimFlagName = fmt.Sprintf("%v.oidc_user_claim", cmdPrefix)
	}

	var oidcUserClaimFlagDefault string

	_ = cmd.PersistentFlags().String(oidcUserClaimFlagName, oidcUserClaimFlagDefault, oidcUserClaimDescription)

	return nil
}

func registerConfigurationsOidcVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oidcVerifyCertDescription := `Verify the OIDC providers certificate`

	var oidcVerifyCertFlagName string
	if cmdPrefix == "" {
		oidcVerifyCertFlagName = "oidc_verify_cert"
	} else {
		oidcVerifyCertFlagName = fmt.Sprintf("%v.oidc_verify_cert", cmdPrefix)
	}

	var oidcVerifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(oidcVerifyCertFlagName, oidcVerifyCertFlagDefault, oidcVerifyCertDescription)

	return nil
}

func registerConfigurationsProjectCreationRestriction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectCreationRestrictionDescription := `Indicate who can create projects, it could be adminonly or everyone.`

	var projectCreationRestrictionFlagName string
	if cmdPrefix == "" {
		projectCreationRestrictionFlagName = "project_creation_restriction"
	} else {
		projectCreationRestrictionFlagName = fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	}

	var projectCreationRestrictionFlagDefault string

	_ = cmd.PersistentFlags().String(projectCreationRestrictionFlagName, projectCreationRestrictionFlagDefault, projectCreationRestrictionDescription)

	return nil
}

func registerConfigurationsQuotaPerProjectEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	quotaPerProjectEnableDescription := `Enable quota per project`

	var quotaPerProjectEnableFlagName string
	if cmdPrefix == "" {
		quotaPerProjectEnableFlagName = "quota_per_project_enable"
	} else {
		quotaPerProjectEnableFlagName = fmt.Sprintf("%v.quota_per_project_enable", cmdPrefix)
	}

	var quotaPerProjectEnableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(quotaPerProjectEnableFlagName, quotaPerProjectEnableFlagDefault, quotaPerProjectEnableDescription)

	return nil
}

func registerConfigurationsReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := `The flag to indicate whether Harbor is in readonly mode.`

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "read_only"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.read_only", cmdPrefix)
	}

	var readOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerConfigurationsRobotNamePrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	robotNamePrefixDescription := `The rebot account name prefix`

	var robotNamePrefixFlagName string
	if cmdPrefix == "" {
		robotNamePrefixFlagName = "robot_name_prefix"
	} else {
		robotNamePrefixFlagName = fmt.Sprintf("%v.robot_name_prefix", cmdPrefix)
	}

	var robotNamePrefixFlagDefault string

	_ = cmd.PersistentFlags().String(robotNamePrefixFlagName, robotNamePrefixFlagDefault, robotNamePrefixDescription)

	return nil
}

func registerConfigurationsRobotTokenDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	robotTokenDurationDescription := `The robot account token duration in days`

	var robotTokenDurationFlagName string
	if cmdPrefix == "" {
		robotTokenDurationFlagName = "robot_token_duration"
	} else {
		robotTokenDurationFlagName = fmt.Sprintf("%v.robot_token_duration", cmdPrefix)
	}

	var robotTokenDurationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(robotTokenDurationFlagName, robotTokenDurationFlagDefault, robotTokenDurationDescription)

	return nil
}

func registerConfigurationsSelfRegistration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	selfRegistrationDescription := `Whether the Harbor instance supports self-registration.  If its set to false, admin need to add user to the instance.`

	var selfRegistrationFlagName string
	if cmdPrefix == "" {
		selfRegistrationFlagName = "self_registration"
	} else {
		selfRegistrationFlagName = fmt.Sprintf("%v.self_registration", cmdPrefix)
	}

	var selfRegistrationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(selfRegistrationFlagName, selfRegistrationFlagDefault, selfRegistrationDescription)

	return nil
}

func registerConfigurationsStoragePerProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storagePerProjectDescription := `The storage quota per project`

	var storagePerProjectFlagName string
	if cmdPrefix == "" {
		storagePerProjectFlagName = "storage_per_project"
	} else {
		storagePerProjectFlagName = fmt.Sprintf("%v.storage_per_project", cmdPrefix)
	}

	var storagePerProjectFlagDefault int64

	_ = cmd.PersistentFlags().Int64(storagePerProjectFlagName, storagePerProjectFlagDefault, storagePerProjectDescription)

	return nil
}

func registerConfigurationsTokenExpiration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenExpirationDescription := `The expiration time of the token for internal Registry, in minutes.`

	var tokenExpirationFlagName string
	if cmdPrefix == "" {
		tokenExpirationFlagName = "token_expiration"
	} else {
		tokenExpirationFlagName = fmt.Sprintf("%v.token_expiration", cmdPrefix)
	}

	var tokenExpirationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(tokenExpirationFlagName, tokenExpirationFlagDefault, tokenExpirationDescription)

	return nil
}

func registerConfigurationsUaaClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uaaClientIdDescription := `The client id of UAA`

	var uaaClientIdFlagName string
	if cmdPrefix == "" {
		uaaClientIdFlagName = "uaa_client_id"
	} else {
		uaaClientIdFlagName = fmt.Sprintf("%v.uaa_client_id", cmdPrefix)
	}

	var uaaClientIdFlagDefault string

	_ = cmd.PersistentFlags().String(uaaClientIdFlagName, uaaClientIdFlagDefault, uaaClientIdDescription)

	return nil
}

func registerConfigurationsUaaClientSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uaaClientSecretDescription := `The client secret of the UAA`

	var uaaClientSecretFlagName string
	if cmdPrefix == "" {
		uaaClientSecretFlagName = "uaa_client_secret"
	} else {
		uaaClientSecretFlagName = fmt.Sprintf("%v.uaa_client_secret", cmdPrefix)
	}

	var uaaClientSecretFlagDefault string

	_ = cmd.PersistentFlags().String(uaaClientSecretFlagName, uaaClientSecretFlagDefault, uaaClientSecretDescription)

	return nil
}

func registerConfigurationsUaaEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uaaEndpointDescription := `The endpoint of the UAA`

	var uaaEndpointFlagName string
	if cmdPrefix == "" {
		uaaEndpointFlagName = "uaa_endpoint"
	} else {
		uaaEndpointFlagName = fmt.Sprintf("%v.uaa_endpoint", cmdPrefix)
	}

	var uaaEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(uaaEndpointFlagName, uaaEndpointFlagDefault, uaaEndpointDescription)

	return nil
}

func registerConfigurationsUaaVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	uaaVerifyCertDescription := `Verify the certificate in UAA server`

	var uaaVerifyCertFlagName string
	if cmdPrefix == "" {
		uaaVerifyCertFlagName = "uaa_verify_cert"
	} else {
		uaaVerifyCertFlagName = fmt.Sprintf("%v.uaa_verify_cert", cmdPrefix)
	}

	var uaaVerifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(uaaVerifyCertFlagName, uaaVerifyCertFlagDefault, uaaVerifyCertDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigurationsFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authModeAdded := retrieveConfigurationsAuthModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authModeAdded

	err, emailFromAdded := retrieveConfigurationsEmailFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailFromAdded

	err, emailHostAdded := retrieveConfigurationsEmailHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailHostAdded

	err, emailIdentityAdded := retrieveConfigurationsEmailIdentityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailIdentityAdded

	err, emailInsecureAdded := retrieveConfigurationsEmailInsecureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailInsecureAdded

	err, emailPasswordAdded := retrieveConfigurationsEmailPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailPasswordAdded

	err, emailPortAdded := retrieveConfigurationsEmailPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailPortAdded

	err, emailSslAdded := retrieveConfigurationsEmailSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailSslAdded

	err, emailUsernameAdded := retrieveConfigurationsEmailUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailUsernameAdded

	err, httpAuthproxyAdminGroupsAdded := retrieveConfigurationsHTTPAuthproxyAdminGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminGroupsAdded

	err, httpAuthproxyAdminUsernamesAdded := retrieveConfigurationsHTTPAuthproxyAdminUsernamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminUsernamesAdded

	err, httpAuthproxyEndpointAdded := retrieveConfigurationsHTTPAuthproxyEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyEndpointAdded

	err, httpAuthproxyServerCertificateAdded := retrieveConfigurationsHTTPAuthproxyServerCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyServerCertificateAdded

	err, httpAuthproxySkipSearchAdded := retrieveConfigurationsHTTPAuthproxySkipSearchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxySkipSearchAdded

	err, httpAuthproxyTokenreviewEndpointAdded := retrieveConfigurationsHTTPAuthproxyTokenreviewEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyTokenreviewEndpointAdded

	err, httpAuthproxyVerifyCertAdded := retrieveConfigurationsHTTPAuthproxyVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyVerifyCertAdded

	err, ldapBaseDnAdded := retrieveConfigurationsLdapBaseDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapBaseDnAdded

	err, ldapFilterAdded := retrieveConfigurationsLdapFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapFilterAdded

	err, ldapGroupAdminDnAdded := retrieveConfigurationsLdapGroupAdminDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAdminDnAdded

	err, ldapGroupAttributeNameAdded := retrieveConfigurationsLdapGroupAttributeNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAttributeNameAdded

	err, ldapGroupBaseDnAdded := retrieveConfigurationsLdapGroupBaseDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupBaseDnAdded

	err, ldapGroupMembershipAttributeAdded := retrieveConfigurationsLdapGroupMembershipAttributeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupMembershipAttributeAdded

	err, ldapGroupSearchFilterAdded := retrieveConfigurationsLdapGroupSearchFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchFilterAdded

	err, ldapGroupSearchScopeAdded := retrieveConfigurationsLdapGroupSearchScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchScopeAdded

	err, ldapScopeAdded := retrieveConfigurationsLdapScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapScopeAdded

	err, ldapSearchDnAdded := retrieveConfigurationsLdapSearchDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchDnAdded

	err, ldapSearchPasswordAdded := retrieveConfigurationsLdapSearchPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchPasswordAdded

	err, ldapTimeoutAdded := retrieveConfigurationsLdapTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapTimeoutAdded

	err, ldapUidAdded := retrieveConfigurationsLdapUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUidAdded

	err, ldapUrlAdded := retrieveConfigurationsLdapURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUrlAdded

	err, ldapVerifyCertAdded := retrieveConfigurationsLdapVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapVerifyCertAdded

	err, notificationEnableAdded := retrieveConfigurationsNotificationEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notificationEnableAdded

	err, oidcAdminGroupAdded := retrieveConfigurationsOidcAdminGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAdminGroupAdded

	err, oidcAutoOnboardAdded := retrieveConfigurationsOidcAutoOnboardFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAutoOnboardAdded

	err, oidcClientIdAdded := retrieveConfigurationsOidcClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcClientIdAdded

	err, oidcClientSecretAdded := retrieveConfigurationsOidcClientSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcClientSecretAdded

	err, oidcEndpointAdded := retrieveConfigurationsOidcEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcEndpointAdded

	err, oidcExtraRedirectParmsAdded := retrieveConfigurationsOidcExtraRedirectParmsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcExtraRedirectParmsAdded

	err, oidcGroupsClaimAdded := retrieveConfigurationsOidcGroupsClaimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcGroupsClaimAdded

	err, oidcNameAdded := retrieveConfigurationsOidcNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcNameAdded

	err, oidcScopeAdded := retrieveConfigurationsOidcScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcScopeAdded

	err, oidcUserClaimAdded := retrieveConfigurationsOidcUserClaimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcUserClaimAdded

	err, oidcVerifyCertAdded := retrieveConfigurationsOidcVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcVerifyCertAdded

	err, projectCreationRestrictionAdded := retrieveConfigurationsProjectCreationRestrictionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectCreationRestrictionAdded

	err, quotaPerProjectEnableAdded := retrieveConfigurationsQuotaPerProjectEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaPerProjectEnableAdded

	err, readOnlyAdded := retrieveConfigurationsReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, robotNamePrefixAdded := retrieveConfigurationsRobotNamePrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotNamePrefixAdded

	err, robotTokenDurationAdded := retrieveConfigurationsRobotTokenDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotTokenDurationAdded

	err, selfRegistrationAdded := retrieveConfigurationsSelfRegistrationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selfRegistrationAdded

	err, storagePerProjectAdded := retrieveConfigurationsStoragePerProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storagePerProjectAdded

	err, tokenExpirationAdded := retrieveConfigurationsTokenExpirationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenExpirationAdded

	err, uaaClientIdAdded := retrieveConfigurationsUaaClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientIdAdded

	err, uaaClientSecretAdded := retrieveConfigurationsUaaClientSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientSecretAdded

	err, uaaEndpointAdded := retrieveConfigurationsUaaEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaEndpointAdded

	err, uaaVerifyCertAdded := retrieveConfigurationsUaaVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaVerifyCertAdded

	return nil, retAdded
}

func retrieveConfigurationsAuthModeFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authModeFlagName := fmt.Sprintf("%v.auth_mode", cmdPrefix)
	if cmd.Flags().Changed(authModeFlagName) {

		var authModeFlagName string
		if cmdPrefix == "" {
			authModeFlagName = "auth_mode"
		} else {
			authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
		}

		authModeFlagValue, err := cmd.Flags().GetString(authModeFlagName)
		if err != nil {
			return err, false
		}
		m.AuthMode = &authModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailFromFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFromFlagName := fmt.Sprintf("%v.email_from", cmdPrefix)
	if cmd.Flags().Changed(emailFromFlagName) {

		var emailFromFlagName string
		if cmdPrefix == "" {
			emailFromFlagName = "email_from"
		} else {
			emailFromFlagName = fmt.Sprintf("%v.email_from", cmdPrefix)
		}

		emailFromFlagValue, err := cmd.Flags().GetString(emailFromFlagName)
		if err != nil {
			return err, false
		}
		m.EmailFrom = &emailFromFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailHostFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailHostFlagName := fmt.Sprintf("%v.email_host", cmdPrefix)
	if cmd.Flags().Changed(emailHostFlagName) {

		var emailHostFlagName string
		if cmdPrefix == "" {
			emailHostFlagName = "email_host"
		} else {
			emailHostFlagName = fmt.Sprintf("%v.email_host", cmdPrefix)
		}

		emailHostFlagValue, err := cmd.Flags().GetString(emailHostFlagName)
		if err != nil {
			return err, false
		}
		m.EmailHost = &emailHostFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailIdentityFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailIdentityFlagName := fmt.Sprintf("%v.email_identity", cmdPrefix)
	if cmd.Flags().Changed(emailIdentityFlagName) {

		var emailIdentityFlagName string
		if cmdPrefix == "" {
			emailIdentityFlagName = "email_identity"
		} else {
			emailIdentityFlagName = fmt.Sprintf("%v.email_identity", cmdPrefix)
		}

		emailIdentityFlagValue, err := cmd.Flags().GetString(emailIdentityFlagName)
		if err != nil {
			return err, false
		}
		m.EmailIdentity = &emailIdentityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailInsecureFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailInsecureFlagName := fmt.Sprintf("%v.email_insecure", cmdPrefix)
	if cmd.Flags().Changed(emailInsecureFlagName) {

		var emailInsecureFlagName string
		if cmdPrefix == "" {
			emailInsecureFlagName = "email_insecure"
		} else {
			emailInsecureFlagName = fmt.Sprintf("%v.email_insecure", cmdPrefix)
		}

		emailInsecureFlagValue, err := cmd.Flags().GetBool(emailInsecureFlagName)
		if err != nil {
			return err, false
		}
		m.EmailInsecure = &emailInsecureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailPasswordFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailPasswordFlagName := fmt.Sprintf("%v.email_password", cmdPrefix)
	if cmd.Flags().Changed(emailPasswordFlagName) {

		var emailPasswordFlagName string
		if cmdPrefix == "" {
			emailPasswordFlagName = "email_password"
		} else {
			emailPasswordFlagName = fmt.Sprintf("%v.email_password", cmdPrefix)
		}

		emailPasswordFlagValue, err := cmd.Flags().GetString(emailPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.EmailPassword = &emailPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailPortFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailPortFlagName := fmt.Sprintf("%v.email_port", cmdPrefix)
	if cmd.Flags().Changed(emailPortFlagName) {

		var emailPortFlagName string
		if cmdPrefix == "" {
			emailPortFlagName = "email_port"
		} else {
			emailPortFlagName = fmt.Sprintf("%v.email_port", cmdPrefix)
		}

		emailPortFlagValue, err := cmd.Flags().GetInt64(emailPortFlagName)
		if err != nil {
			return err, false
		}
		m.EmailPort = &emailPortFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailSslFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailSslFlagName := fmt.Sprintf("%v.email_ssl", cmdPrefix)
	if cmd.Flags().Changed(emailSslFlagName) {

		var emailSslFlagName string
		if cmdPrefix == "" {
			emailSslFlagName = "email_ssl"
		} else {
			emailSslFlagName = fmt.Sprintf("%v.email_ssl", cmdPrefix)
		}

		emailSslFlagValue, err := cmd.Flags().GetBool(emailSslFlagName)
		if err != nil {
			return err, false
		}
		m.EmailSsl = &emailSslFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsEmailUsernameFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailUsernameFlagName := fmt.Sprintf("%v.email_username", cmdPrefix)
	if cmd.Flags().Changed(emailUsernameFlagName) {

		var emailUsernameFlagName string
		if cmdPrefix == "" {
			emailUsernameFlagName = "email_username"
		} else {
			emailUsernameFlagName = fmt.Sprintf("%v.email_username", cmdPrefix)
		}

		emailUsernameFlagValue, err := cmd.Flags().GetString(emailUsernameFlagName)
		if err != nil {
			return err, false
		}
		m.EmailUsername = &emailUsernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyAdminGroupsFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyAdminGroupsFlagName := fmt.Sprintf("%v.http_authproxy_admin_groups", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyAdminGroupsFlagName) {

		var httpAuthproxyAdminGroupsFlagName string
		if cmdPrefix == "" {
			httpAuthproxyAdminGroupsFlagName = "http_authproxy_admin_groups"
		} else {
			httpAuthproxyAdminGroupsFlagName = fmt.Sprintf("%v.http_authproxy_admin_groups", cmdPrefix)
		}

		httpAuthproxyAdminGroupsFlagValue, err := cmd.Flags().GetString(httpAuthproxyAdminGroupsFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyAdminGroups = &httpAuthproxyAdminGroupsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyAdminUsernamesFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyAdminUsernamesFlagName := fmt.Sprintf("%v.http_authproxy_admin_usernames", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyAdminUsernamesFlagName) {

		var httpAuthproxyAdminUsernamesFlagName string
		if cmdPrefix == "" {
			httpAuthproxyAdminUsernamesFlagName = "http_authproxy_admin_usernames"
		} else {
			httpAuthproxyAdminUsernamesFlagName = fmt.Sprintf("%v.http_authproxy_admin_usernames", cmdPrefix)
		}

		httpAuthproxyAdminUsernamesFlagValue, err := cmd.Flags().GetString(httpAuthproxyAdminUsernamesFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyAdminUsernames = &httpAuthproxyAdminUsernamesFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyEndpointFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyEndpointFlagName := fmt.Sprintf("%v.http_authproxy_endpoint", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyEndpointFlagName) {

		var httpAuthproxyEndpointFlagName string
		if cmdPrefix == "" {
			httpAuthproxyEndpointFlagName = "http_authproxy_endpoint"
		} else {
			httpAuthproxyEndpointFlagName = fmt.Sprintf("%v.http_authproxy_endpoint", cmdPrefix)
		}

		httpAuthproxyEndpointFlagValue, err := cmd.Flags().GetString(httpAuthproxyEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyEndpoint = &httpAuthproxyEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyServerCertificateFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyServerCertificateFlagName := fmt.Sprintf("%v.http_authproxy_server_certificate", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyServerCertificateFlagName) {

		var httpAuthproxyServerCertificateFlagName string
		if cmdPrefix == "" {
			httpAuthproxyServerCertificateFlagName = "http_authproxy_server_certificate"
		} else {
			httpAuthproxyServerCertificateFlagName = fmt.Sprintf("%v.http_authproxy_server_certificate", cmdPrefix)
		}

		httpAuthproxyServerCertificateFlagValue, err := cmd.Flags().GetString(httpAuthproxyServerCertificateFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyServerCertificate = &httpAuthproxyServerCertificateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxySkipSearchFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxySkipSearchFlagName := fmt.Sprintf("%v.http_authproxy_skip_search", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxySkipSearchFlagName) {

		var httpAuthproxySkipSearchFlagName string
		if cmdPrefix == "" {
			httpAuthproxySkipSearchFlagName = "http_authproxy_skip_search"
		} else {
			httpAuthproxySkipSearchFlagName = fmt.Sprintf("%v.http_authproxy_skip_search", cmdPrefix)
		}

		httpAuthproxySkipSearchFlagValue, err := cmd.Flags().GetBool(httpAuthproxySkipSearchFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxySkipSearch = &httpAuthproxySkipSearchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyTokenreviewEndpointFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyTokenreviewEndpointFlagName := fmt.Sprintf("%v.http_authproxy_tokenreview_endpoint", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyTokenreviewEndpointFlagName) {

		var httpAuthproxyTokenreviewEndpointFlagName string
		if cmdPrefix == "" {
			httpAuthproxyTokenreviewEndpointFlagName = "http_authproxy_tokenreview_endpoint"
		} else {
			httpAuthproxyTokenreviewEndpointFlagName = fmt.Sprintf("%v.http_authproxy_tokenreview_endpoint", cmdPrefix)
		}

		httpAuthproxyTokenreviewEndpointFlagValue, err := cmd.Flags().GetString(httpAuthproxyTokenreviewEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyTokenreviewEndpoint = &httpAuthproxyTokenreviewEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsHTTPAuthproxyVerifyCertFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyVerifyCertFlagName := fmt.Sprintf("%v.http_authproxy_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyVerifyCertFlagName) {

		var httpAuthproxyVerifyCertFlagName string
		if cmdPrefix == "" {
			httpAuthproxyVerifyCertFlagName = "http_authproxy_verify_cert"
		} else {
			httpAuthproxyVerifyCertFlagName = fmt.Sprintf("%v.http_authproxy_verify_cert", cmdPrefix)
		}

		httpAuthproxyVerifyCertFlagValue, err := cmd.Flags().GetBool(httpAuthproxyVerifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.HTTPAuthproxyVerifyCert = &httpAuthproxyVerifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapBaseDnFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapBaseDnFlagName := fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapBaseDnFlagName) {

		var ldapBaseDnFlagName string
		if cmdPrefix == "" {
			ldapBaseDnFlagName = "ldap_base_dn"
		} else {
			ldapBaseDnFlagName = fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
		}

		ldapBaseDnFlagValue, err := cmd.Flags().GetString(ldapBaseDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapBaseDn = &ldapBaseDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapFilterFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapFilterFlagName := fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	if cmd.Flags().Changed(ldapFilterFlagName) {

		var ldapFilterFlagName string
		if cmdPrefix == "" {
			ldapFilterFlagName = "ldap_filter"
		} else {
			ldapFilterFlagName = fmt.Sprintf("%v.ldap_filter", cmdPrefix)
		}

		ldapFilterFlagValue, err := cmd.Flags().GetString(ldapFilterFlagName)
		if err != nil {
			return err, false
		}
		m.LdapFilter = &ldapFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupAdminDnFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupAdminDnFlagName := fmt.Sprintf("%v.ldap_group_admin_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupAdminDnFlagName) {

		var ldapGroupAdminDnFlagName string
		if cmdPrefix == "" {
			ldapGroupAdminDnFlagName = "ldap_group_admin_dn"
		} else {
			ldapGroupAdminDnFlagName = fmt.Sprintf("%v.ldap_group_admin_dn", cmdPrefix)
		}

		ldapGroupAdminDnFlagValue, err := cmd.Flags().GetString(ldapGroupAdminDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupAdminDn = &ldapGroupAdminDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupAttributeNameFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupAttributeNameFlagName := fmt.Sprintf("%v.ldap_group_attribute_name", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupAttributeNameFlagName) {

		var ldapGroupAttributeNameFlagName string
		if cmdPrefix == "" {
			ldapGroupAttributeNameFlagName = "ldap_group_attribute_name"
		} else {
			ldapGroupAttributeNameFlagName = fmt.Sprintf("%v.ldap_group_attribute_name", cmdPrefix)
		}

		ldapGroupAttributeNameFlagValue, err := cmd.Flags().GetString(ldapGroupAttributeNameFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupAttributeName = &ldapGroupAttributeNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupBaseDnFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupBaseDnFlagName := fmt.Sprintf("%v.ldap_group_base_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupBaseDnFlagName) {

		var ldapGroupBaseDnFlagName string
		if cmdPrefix == "" {
			ldapGroupBaseDnFlagName = "ldap_group_base_dn"
		} else {
			ldapGroupBaseDnFlagName = fmt.Sprintf("%v.ldap_group_base_dn", cmdPrefix)
		}

		ldapGroupBaseDnFlagValue, err := cmd.Flags().GetString(ldapGroupBaseDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupBaseDn = &ldapGroupBaseDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupMembershipAttributeFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupMembershipAttributeFlagName := fmt.Sprintf("%v.ldap_group_membership_attribute", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupMembershipAttributeFlagName) {

		var ldapGroupMembershipAttributeFlagName string
		if cmdPrefix == "" {
			ldapGroupMembershipAttributeFlagName = "ldap_group_membership_attribute"
		} else {
			ldapGroupMembershipAttributeFlagName = fmt.Sprintf("%v.ldap_group_membership_attribute", cmdPrefix)
		}

		ldapGroupMembershipAttributeFlagValue, err := cmd.Flags().GetString(ldapGroupMembershipAttributeFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupMembershipAttribute = &ldapGroupMembershipAttributeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupSearchFilterFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupSearchFilterFlagName := fmt.Sprintf("%v.ldap_group_search_filter", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupSearchFilterFlagName) {

		var ldapGroupSearchFilterFlagName string
		if cmdPrefix == "" {
			ldapGroupSearchFilterFlagName = "ldap_group_search_filter"
		} else {
			ldapGroupSearchFilterFlagName = fmt.Sprintf("%v.ldap_group_search_filter", cmdPrefix)
		}

		ldapGroupSearchFilterFlagValue, err := cmd.Flags().GetString(ldapGroupSearchFilterFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupSearchFilter = &ldapGroupSearchFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapGroupSearchScopeFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupSearchScopeFlagName := fmt.Sprintf("%v.ldap_group_search_scope", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupSearchScopeFlagName) {

		var ldapGroupSearchScopeFlagName string
		if cmdPrefix == "" {
			ldapGroupSearchScopeFlagName = "ldap_group_search_scope"
		} else {
			ldapGroupSearchScopeFlagName = fmt.Sprintf("%v.ldap_group_search_scope", cmdPrefix)
		}

		ldapGroupSearchScopeFlagValue, err := cmd.Flags().GetInt64(ldapGroupSearchScopeFlagName)
		if err != nil {
			return err, false
		}
		m.LdapGroupSearchScope = &ldapGroupSearchScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapScopeFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapScopeFlagName := fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	if cmd.Flags().Changed(ldapScopeFlagName) {

		var ldapScopeFlagName string
		if cmdPrefix == "" {
			ldapScopeFlagName = "ldap_scope"
		} else {
			ldapScopeFlagName = fmt.Sprintf("%v.ldap_scope", cmdPrefix)
		}

		ldapScopeFlagValue, err := cmd.Flags().GetInt64(ldapScopeFlagName)
		if err != nil {
			return err, false
		}
		m.LdapScope = &ldapScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapSearchDnFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapSearchDnFlagName := fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapSearchDnFlagName) {

		var ldapSearchDnFlagName string
		if cmdPrefix == "" {
			ldapSearchDnFlagName = "ldap_search_dn"
		} else {
			ldapSearchDnFlagName = fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
		}

		ldapSearchDnFlagValue, err := cmd.Flags().GetString(ldapSearchDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapSearchDn = &ldapSearchDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapSearchPasswordFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapSearchPasswordFlagName := fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
	if cmd.Flags().Changed(ldapSearchPasswordFlagName) {

		var ldapSearchPasswordFlagName string
		if cmdPrefix == "" {
			ldapSearchPasswordFlagName = "ldap_search_password"
		} else {
			ldapSearchPasswordFlagName = fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
		}

		ldapSearchPasswordFlagValue, err := cmd.Flags().GetString(ldapSearchPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.LdapSearchPassword = &ldapSearchPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapTimeoutFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapTimeoutFlagName := fmt.Sprintf("%v.ldap_timeout", cmdPrefix)
	if cmd.Flags().Changed(ldapTimeoutFlagName) {

		var ldapTimeoutFlagName string
		if cmdPrefix == "" {
			ldapTimeoutFlagName = "ldap_timeout"
		} else {
			ldapTimeoutFlagName = fmt.Sprintf("%v.ldap_timeout", cmdPrefix)
		}

		ldapTimeoutFlagValue, err := cmd.Flags().GetInt64(ldapTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.LdapTimeout = &ldapTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapUIDFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUidFlagName := fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	if cmd.Flags().Changed(ldapUidFlagName) {

		var ldapUidFlagName string
		if cmdPrefix == "" {
			ldapUidFlagName = "ldap_uid"
		} else {
			ldapUidFlagName = fmt.Sprintf("%v.ldap_uid", cmdPrefix)
		}

		ldapUidFlagValue, err := cmd.Flags().GetString(ldapUidFlagName)
		if err != nil {
			return err, false
		}
		m.LdapUID = &ldapUidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapURLFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUrlFlagName := fmt.Sprintf("%v.ldap_url", cmdPrefix)
	if cmd.Flags().Changed(ldapUrlFlagName) {

		var ldapUrlFlagName string
		if cmdPrefix == "" {
			ldapUrlFlagName = "ldap_url"
		} else {
			ldapUrlFlagName = fmt.Sprintf("%v.ldap_url", cmdPrefix)
		}

		ldapUrlFlagValue, err := cmd.Flags().GetString(ldapUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LdapURL = &ldapUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsLdapVerifyCertFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapVerifyCertFlagName := fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(ldapVerifyCertFlagName) {

		var ldapVerifyCertFlagName string
		if cmdPrefix == "" {
			ldapVerifyCertFlagName = "ldap_verify_cert"
		} else {
			ldapVerifyCertFlagName = fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
		}

		ldapVerifyCertFlagValue, err := cmd.Flags().GetBool(ldapVerifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.LdapVerifyCert = &ldapVerifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsNotificationEnableFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notificationEnableFlagName := fmt.Sprintf("%v.notification_enable", cmdPrefix)
	if cmd.Flags().Changed(notificationEnableFlagName) {

		var notificationEnableFlagName string
		if cmdPrefix == "" {
			notificationEnableFlagName = "notification_enable"
		} else {
			notificationEnableFlagName = fmt.Sprintf("%v.notification_enable", cmdPrefix)
		}

		notificationEnableFlagValue, err := cmd.Flags().GetBool(notificationEnableFlagName)
		if err != nil {
			return err, false
		}
		m.NotificationEnable = &notificationEnableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcAdminGroupFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcAdminGroupFlagName := fmt.Sprintf("%v.oidc_admin_group", cmdPrefix)
	if cmd.Flags().Changed(oidcAdminGroupFlagName) {

		var oidcAdminGroupFlagName string
		if cmdPrefix == "" {
			oidcAdminGroupFlagName = "oidc_admin_group"
		} else {
			oidcAdminGroupFlagName = fmt.Sprintf("%v.oidc_admin_group", cmdPrefix)
		}

		oidcAdminGroupFlagValue, err := cmd.Flags().GetString(oidcAdminGroupFlagName)
		if err != nil {
			return err, false
		}
		m.OidcAdminGroup = &oidcAdminGroupFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcAutoOnboardFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcAutoOnboardFlagName := fmt.Sprintf("%v.oidc_auto_onboard", cmdPrefix)
	if cmd.Flags().Changed(oidcAutoOnboardFlagName) {

		var oidcAutoOnboardFlagName string
		if cmdPrefix == "" {
			oidcAutoOnboardFlagName = "oidc_auto_onboard"
		} else {
			oidcAutoOnboardFlagName = fmt.Sprintf("%v.oidc_auto_onboard", cmdPrefix)
		}

		oidcAutoOnboardFlagValue, err := cmd.Flags().GetBool(oidcAutoOnboardFlagName)
		if err != nil {
			return err, false
		}
		m.OidcAutoOnboard = &oidcAutoOnboardFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcClientIDFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcClientIdFlagName := fmt.Sprintf("%v.oidc_client_id", cmdPrefix)
	if cmd.Flags().Changed(oidcClientIdFlagName) {

		var oidcClientIdFlagName string
		if cmdPrefix == "" {
			oidcClientIdFlagName = "oidc_client_id"
		} else {
			oidcClientIdFlagName = fmt.Sprintf("%v.oidc_client_id", cmdPrefix)
		}

		oidcClientIdFlagValue, err := cmd.Flags().GetString(oidcClientIdFlagName)
		if err != nil {
			return err, false
		}
		m.OidcClientID = &oidcClientIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcClientSecretFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcClientSecretFlagName := fmt.Sprintf("%v.oidc_client_secret", cmdPrefix)
	if cmd.Flags().Changed(oidcClientSecretFlagName) {

		var oidcClientSecretFlagName string
		if cmdPrefix == "" {
			oidcClientSecretFlagName = "oidc_client_secret"
		} else {
			oidcClientSecretFlagName = fmt.Sprintf("%v.oidc_client_secret", cmdPrefix)
		}

		oidcClientSecretFlagValue, err := cmd.Flags().GetString(oidcClientSecretFlagName)
		if err != nil {
			return err, false
		}
		m.OidcClientSecret = &oidcClientSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcEndpointFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcEndpointFlagName := fmt.Sprintf("%v.oidc_endpoint", cmdPrefix)
	if cmd.Flags().Changed(oidcEndpointFlagName) {

		var oidcEndpointFlagName string
		if cmdPrefix == "" {
			oidcEndpointFlagName = "oidc_endpoint"
		} else {
			oidcEndpointFlagName = fmt.Sprintf("%v.oidc_endpoint", cmdPrefix)
		}

		oidcEndpointFlagValue, err := cmd.Flags().GetString(oidcEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.OidcEndpoint = &oidcEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcExtraRedirectParmsFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcExtraRedirectParmsFlagName := fmt.Sprintf("%v.oidc_extra_redirect_parms", cmdPrefix)
	if cmd.Flags().Changed(oidcExtraRedirectParmsFlagName) {

		var oidcExtraRedirectParmsFlagName string
		if cmdPrefix == "" {
			oidcExtraRedirectParmsFlagName = "oidc_extra_redirect_parms"
		} else {
			oidcExtraRedirectParmsFlagName = fmt.Sprintf("%v.oidc_extra_redirect_parms", cmdPrefix)
		}

		oidcExtraRedirectParmsFlagValue, err := cmd.Flags().GetString(oidcExtraRedirectParmsFlagName)
		if err != nil {
			return err, false
		}
		m.OidcExtraRedirectParms = &oidcExtraRedirectParmsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcGroupsClaimFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcGroupsClaimFlagName := fmt.Sprintf("%v.oidc_groups_claim", cmdPrefix)
	if cmd.Flags().Changed(oidcGroupsClaimFlagName) {

		var oidcGroupsClaimFlagName string
		if cmdPrefix == "" {
			oidcGroupsClaimFlagName = "oidc_groups_claim"
		} else {
			oidcGroupsClaimFlagName = fmt.Sprintf("%v.oidc_groups_claim", cmdPrefix)
		}

		oidcGroupsClaimFlagValue, err := cmd.Flags().GetString(oidcGroupsClaimFlagName)
		if err != nil {
			return err, false
		}
		m.OidcGroupsClaim = &oidcGroupsClaimFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcNameFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcNameFlagName := fmt.Sprintf("%v.oidc_name", cmdPrefix)
	if cmd.Flags().Changed(oidcNameFlagName) {

		var oidcNameFlagName string
		if cmdPrefix == "" {
			oidcNameFlagName = "oidc_name"
		} else {
			oidcNameFlagName = fmt.Sprintf("%v.oidc_name", cmdPrefix)
		}

		oidcNameFlagValue, err := cmd.Flags().GetString(oidcNameFlagName)
		if err != nil {
			return err, false
		}
		m.OidcName = &oidcNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcScopeFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcScopeFlagName := fmt.Sprintf("%v.oidc_scope", cmdPrefix)
	if cmd.Flags().Changed(oidcScopeFlagName) {

		var oidcScopeFlagName string
		if cmdPrefix == "" {
			oidcScopeFlagName = "oidc_scope"
		} else {
			oidcScopeFlagName = fmt.Sprintf("%v.oidc_scope", cmdPrefix)
		}

		oidcScopeFlagValue, err := cmd.Flags().GetString(oidcScopeFlagName)
		if err != nil {
			return err, false
		}
		m.OidcScope = &oidcScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcUserClaimFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcUserClaimFlagName := fmt.Sprintf("%v.oidc_user_claim", cmdPrefix)
	if cmd.Flags().Changed(oidcUserClaimFlagName) {

		var oidcUserClaimFlagName string
		if cmdPrefix == "" {
			oidcUserClaimFlagName = "oidc_user_claim"
		} else {
			oidcUserClaimFlagName = fmt.Sprintf("%v.oidc_user_claim", cmdPrefix)
		}

		oidcUserClaimFlagValue, err := cmd.Flags().GetString(oidcUserClaimFlagName)
		if err != nil {
			return err, false
		}
		m.OidcUserClaim = &oidcUserClaimFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsOidcVerifyCertFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcVerifyCertFlagName := fmt.Sprintf("%v.oidc_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(oidcVerifyCertFlagName) {

		var oidcVerifyCertFlagName string
		if cmdPrefix == "" {
			oidcVerifyCertFlagName = "oidc_verify_cert"
		} else {
			oidcVerifyCertFlagName = fmt.Sprintf("%v.oidc_verify_cert", cmdPrefix)
		}

		oidcVerifyCertFlagValue, err := cmd.Flags().GetBool(oidcVerifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.OidcVerifyCert = &oidcVerifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsProjectCreationRestrictionFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectCreationRestrictionFlagName := fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	if cmd.Flags().Changed(projectCreationRestrictionFlagName) {

		var projectCreationRestrictionFlagName string
		if cmdPrefix == "" {
			projectCreationRestrictionFlagName = "project_creation_restriction"
		} else {
			projectCreationRestrictionFlagName = fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
		}

		projectCreationRestrictionFlagValue, err := cmd.Flags().GetString(projectCreationRestrictionFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectCreationRestriction = &projectCreationRestrictionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsQuotaPerProjectEnableFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quotaPerProjectEnableFlagName := fmt.Sprintf("%v.quota_per_project_enable", cmdPrefix)
	if cmd.Flags().Changed(quotaPerProjectEnableFlagName) {

		var quotaPerProjectEnableFlagName string
		if cmdPrefix == "" {
			quotaPerProjectEnableFlagName = "quota_per_project_enable"
		} else {
			quotaPerProjectEnableFlagName = fmt.Sprintf("%v.quota_per_project_enable", cmdPrefix)
		}

		quotaPerProjectEnableFlagValue, err := cmd.Flags().GetBool(quotaPerProjectEnableFlagName)
		if err != nil {
			return err, false
		}
		m.QuotaPerProjectEnable = &quotaPerProjectEnableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsReadOnlyFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.read_only", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "read_only"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.read_only", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetBool(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = &readOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsRobotNamePrefixFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	robotNamePrefixFlagName := fmt.Sprintf("%v.robot_name_prefix", cmdPrefix)
	if cmd.Flags().Changed(robotNamePrefixFlagName) {

		var robotNamePrefixFlagName string
		if cmdPrefix == "" {
			robotNamePrefixFlagName = "robot_name_prefix"
		} else {
			robotNamePrefixFlagName = fmt.Sprintf("%v.robot_name_prefix", cmdPrefix)
		}

		robotNamePrefixFlagValue, err := cmd.Flags().GetString(robotNamePrefixFlagName)
		if err != nil {
			return err, false
		}
		m.RobotNamePrefix = &robotNamePrefixFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsRobotTokenDurationFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	robotTokenDurationFlagName := fmt.Sprintf("%v.robot_token_duration", cmdPrefix)
	if cmd.Flags().Changed(robotTokenDurationFlagName) {

		var robotTokenDurationFlagName string
		if cmdPrefix == "" {
			robotTokenDurationFlagName = "robot_token_duration"
		} else {
			robotTokenDurationFlagName = fmt.Sprintf("%v.robot_token_duration", cmdPrefix)
		}

		robotTokenDurationFlagValue, err := cmd.Flags().GetInt64(robotTokenDurationFlagName)
		if err != nil {
			return err, false
		}
		m.RobotTokenDuration = &robotTokenDurationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsSelfRegistrationFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	selfRegistrationFlagName := fmt.Sprintf("%v.self_registration", cmdPrefix)
	if cmd.Flags().Changed(selfRegistrationFlagName) {

		var selfRegistrationFlagName string
		if cmdPrefix == "" {
			selfRegistrationFlagName = "self_registration"
		} else {
			selfRegistrationFlagName = fmt.Sprintf("%v.self_registration", cmdPrefix)
		}

		selfRegistrationFlagValue, err := cmd.Flags().GetBool(selfRegistrationFlagName)
		if err != nil {
			return err, false
		}
		m.SelfRegistration = &selfRegistrationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsStoragePerProjectFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storagePerProjectFlagName := fmt.Sprintf("%v.storage_per_project", cmdPrefix)
	if cmd.Flags().Changed(storagePerProjectFlagName) {

		var storagePerProjectFlagName string
		if cmdPrefix == "" {
			storagePerProjectFlagName = "storage_per_project"
		} else {
			storagePerProjectFlagName = fmt.Sprintf("%v.storage_per_project", cmdPrefix)
		}

		storagePerProjectFlagValue, err := cmd.Flags().GetInt64(storagePerProjectFlagName)
		if err != nil {
			return err, false
		}
		m.StoragePerProject = &storagePerProjectFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsTokenExpirationFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenExpirationFlagName := fmt.Sprintf("%v.token_expiration", cmdPrefix)
	if cmd.Flags().Changed(tokenExpirationFlagName) {

		var tokenExpirationFlagName string
		if cmdPrefix == "" {
			tokenExpirationFlagName = "token_expiration"
		} else {
			tokenExpirationFlagName = fmt.Sprintf("%v.token_expiration", cmdPrefix)
		}

		tokenExpirationFlagValue, err := cmd.Flags().GetInt64(tokenExpirationFlagName)
		if err != nil {
			return err, false
		}
		m.TokenExpiration = &tokenExpirationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsUaaClientIDFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaClientIdFlagName := fmt.Sprintf("%v.uaa_client_id", cmdPrefix)
	if cmd.Flags().Changed(uaaClientIdFlagName) {

		var uaaClientIdFlagName string
		if cmdPrefix == "" {
			uaaClientIdFlagName = "uaa_client_id"
		} else {
			uaaClientIdFlagName = fmt.Sprintf("%v.uaa_client_id", cmdPrefix)
		}

		uaaClientIdFlagValue, err := cmd.Flags().GetString(uaaClientIdFlagName)
		if err != nil {
			return err, false
		}
		m.UaaClientID = &uaaClientIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsUaaClientSecretFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaClientSecretFlagName := fmt.Sprintf("%v.uaa_client_secret", cmdPrefix)
	if cmd.Flags().Changed(uaaClientSecretFlagName) {

		var uaaClientSecretFlagName string
		if cmdPrefix == "" {
			uaaClientSecretFlagName = "uaa_client_secret"
		} else {
			uaaClientSecretFlagName = fmt.Sprintf("%v.uaa_client_secret", cmdPrefix)
		}

		uaaClientSecretFlagValue, err := cmd.Flags().GetString(uaaClientSecretFlagName)
		if err != nil {
			return err, false
		}
		m.UaaClientSecret = &uaaClientSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsUaaEndpointFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaEndpointFlagName := fmt.Sprintf("%v.uaa_endpoint", cmdPrefix)
	if cmd.Flags().Changed(uaaEndpointFlagName) {

		var uaaEndpointFlagName string
		if cmdPrefix == "" {
			uaaEndpointFlagName = "uaa_endpoint"
		} else {
			uaaEndpointFlagName = fmt.Sprintf("%v.uaa_endpoint", cmdPrefix)
		}

		uaaEndpointFlagValue, err := cmd.Flags().GetString(uaaEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.UaaEndpoint = &uaaEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveConfigurationsUaaVerifyCertFlags(depth int, m *models.Configurations, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaVerifyCertFlagName := fmt.Sprintf("%v.uaa_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(uaaVerifyCertFlagName) {

		var uaaVerifyCertFlagName string
		if cmdPrefix == "" {
			uaaVerifyCertFlagName = "uaa_verify_cert"
		} else {
			uaaVerifyCertFlagName = fmt.Sprintf("%v.uaa_verify_cert", cmdPrefix)
		}

		uaaVerifyCertFlagValue, err := cmd.Flags().GetBool(uaaVerifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.UaaVerifyCert = &uaaVerifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}
