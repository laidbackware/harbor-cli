// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ProjectReq

// register flags to command
func registerModelProjectReqFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectReqCveAllowlist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectReqMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectReqProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectReqPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectReqRegistryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectReqStorageLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectReqCveAllowlist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cveAllowlistFlagName string
	if cmdPrefix == "" {
		cveAllowlistFlagName = "cve_allowlist"
	} else {
		cveAllowlistFlagName = fmt.Sprintf("%v.cve_allowlist", cmdPrefix)
	}

	if err := registerModelCVEAllowlistFlags(depth+1, cveAllowlistFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectReqMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelProjectMetadataFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectReqProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectNameDescription := `The name of the project.`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}

func registerProjectReqPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicDescription := `deprecated, reserved for project creation in replication`

	var publicFlagName string
	if cmdPrefix == "" {
		publicFlagName = "public"
	} else {
		publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
	}

	var publicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(publicFlagName, publicFlagDefault, publicDescription)

	return nil
}

func registerProjectReqRegistryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryIdDescription := `The ID of referenced registry when creating the proxy cache project`

	var registryIdFlagName string
	if cmdPrefix == "" {
		registryIdFlagName = "registry_id"
	} else {
		registryIdFlagName = fmt.Sprintf("%v.registry_id", cmdPrefix)
	}

	var registryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(registryIdFlagName, registryIdFlagDefault, registryIdDescription)

	return nil
}

func registerProjectReqStorageLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	storageLimitDescription := `The storage quota of the project.`

	var storageLimitFlagName string
	if cmdPrefix == "" {
		storageLimitFlagName = "storage_limit"
	} else {
		storageLimitFlagName = fmt.Sprintf("%v.storage_limit", cmdPrefix)
	}

	var storageLimitFlagDefault int64

	_ = cmd.PersistentFlags().Int64(storageLimitFlagName, storageLimitFlagDefault, storageLimitDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectReqFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cveAllowlistAdded := retrieveProjectReqCveAllowlistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cveAllowlistAdded

	err, metadataAdded := retrieveProjectReqMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, projectNameAdded := retrieveProjectReqProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectNameAdded

	err, publicAdded := retrieveProjectReqPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicAdded

	err, registryIdAdded := retrieveProjectReqRegistryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryIdAdded

	err, storageLimitAdded := retrieveProjectReqStorageLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storageLimitAdded

	return nil, retAdded
}

func retrieveProjectReqCveAllowlistFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cveAllowlistFlagName := fmt.Sprintf("%v.cve_allowlist", cmdPrefix)
	if cmd.Flags().Changed(cveAllowlistFlagName) {
		// info: complex object cve_allowlist CVEAllowlist is retrieved outside this Changed() block
	}
	cveAllowlistFlagValue := m.CveAllowlist
	if swag.IsZero(cveAllowlistFlagValue) {
		cveAllowlistFlagValue = &models.CVEAllowlist{}
	}

	err, cveAllowlistAdded := retrieveModelCVEAllowlistFlags(depth+1, cveAllowlistFlagValue, cveAllowlistFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cveAllowlistAdded
	if cveAllowlistAdded {
		m.CveAllowlist = cveAllowlistFlagValue
	}

	return nil, retAdded
}

func retrieveProjectReqMetadataFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata ProjectMetadata is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.ProjectMetadata{}
	}

	err, metadataAdded := retrieveModelProjectMetadataFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}

func retrieveProjectReqProjectNameFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectNameFlagName := fmt.Sprintf("%v.project_name", cmdPrefix)
	if cmd.Flags().Changed(projectNameFlagName) {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectReqPublicFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicFlagName := fmt.Sprintf("%v.public", cmdPrefix)
	if cmd.Flags().Changed(publicFlagName) {

		var publicFlagName string
		if cmdPrefix == "" {
			publicFlagName = "public"
		} else {
			publicFlagName = fmt.Sprintf("%v.public", cmdPrefix)
		}

		publicFlagValue, err := cmd.Flags().GetBool(publicFlagName)
		if err != nil {
			return err, false
		}
		m.Public = &publicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectReqRegistryIDFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryIdFlagName := fmt.Sprintf("%v.registry_id", cmdPrefix)
	if cmd.Flags().Changed(registryIdFlagName) {

		var registryIdFlagName string
		if cmdPrefix == "" {
			registryIdFlagName = "registry_id"
		} else {
			registryIdFlagName = fmt.Sprintf("%v.registry_id", cmdPrefix)
		}

		registryIdFlagValue, err := cmd.Flags().GetInt64(registryIdFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryID = &registryIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectReqStorageLimitFlags(depth int, m *models.ProjectReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storageLimitFlagName := fmt.Sprintf("%v.storage_limit", cmdPrefix)
	if cmd.Flags().Changed(storageLimitFlagName) {

		var storageLimitFlagName string
		if cmdPrefix == "" {
			storageLimitFlagName = "storage_limit"
		} else {
			storageLimitFlagName = fmt.Sprintf("%v.storage_limit", cmdPrefix)
		}

		storageLimitFlagValue, err := cmd.Flags().GetInt64(storageLimitFlagName)
		if err != nil {
			return err, false
		}
		m.StorageLimit = &storageLimitFlagValue

		retAdded = true
	}

	return nil, retAdded
}
