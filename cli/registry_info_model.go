// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RegistryInfo

// register flags to command
func registerModelRegistryInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistryInfoDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryInfoSupportedResourceFilters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryInfoSupportedTriggers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryInfoType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryInfoDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `The description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerRegistryInfoSupportedResourceFilters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: supported_resource_filters []*FilterStyle array type is not supported by go-swagger cli yet

	return nil
}

func registerRegistryInfoSupportedTriggers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: supported_triggers []string array type is not supported by go-swagger cli yet

	return nil
}

func registerRegistryInfoType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The registry type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistryInfoFlags(depth int, m *models.RegistryInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, descriptionAdded := retrieveRegistryInfoDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, supportedResourceFiltersAdded := retrieveRegistryInfoSupportedResourceFiltersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supportedResourceFiltersAdded

	err, supportedTriggersAdded := retrieveRegistryInfoSupportedTriggersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || supportedTriggersAdded

	err, typeAdded := retrieveRegistryInfoTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveRegistryInfoDescriptionFlags(depth int, m *models.RegistryInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryInfoSupportedResourceFiltersFlags(depth int, m *models.RegistryInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supportedResourceFiltersFlagName := fmt.Sprintf("%v.supported_resource_filters", cmdPrefix)
	if cmd.Flags().Changed(supportedResourceFiltersFlagName) {
		// warning: supported_resource_filters array type []*FilterStyle is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistryInfoSupportedTriggersFlags(depth int, m *models.RegistryInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	supportedTriggersFlagName := fmt.Sprintf("%v.supported_triggers", cmdPrefix)
	if cmd.Flags().Changed(supportedTriggersFlagName) {
		// warning: supported_triggers array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRegistryInfoTypeFlags(depth int, m *models.RegistryInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
