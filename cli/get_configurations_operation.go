// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/configure"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationConfigureGetConfigurationsCmd returns a cmd to handle operation getConfigurations
func makeOperationConfigureGetConfigurationsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "getConfigurations",
		Short: `This endpoint is for retrieving system configurations that only provides for admin user.
`,
		RunE: runOperationConfigureGetConfigurations,
	}

	if err := registerOperationConfigureGetConfigurationsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationConfigureGetConfigurations uses cmd flags to call endpoint api
func runOperationConfigureGetConfigurations(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := configure.NewGetConfigurationsParams()
	if err, _ := retrieveOperationConfigureGetConfigurationsXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationConfigureGetConfigurationsResult(appCli.Configure.GetConfigurations(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationConfigureGetConfigurationsParamFlags registers all flags needed to fill params
func registerOperationConfigureGetConfigurationsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationConfigureGetConfigurationsXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationConfigureGetConfigurationsXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}

func retrieveOperationConfigureGetConfigurationsXRequestIDFlag(m *configure.GetConfigurationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}

// parseOperationConfigureGetConfigurationsResult parses request result and return the string content
func parseOperationConfigureGetConfigurationsResult(resp0 *configure.GetConfigurationsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*configure.GetConfigurationsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getConfigurationsUnauthorized is not supported

		// Non schema case: warning getConfigurationsForbidden is not supported

		// Non schema case: warning getConfigurationsInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
