// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/usergroup"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUsergroupSearchUserGroupsCmd returns a cmd to handle operation searchUserGroups
func makeOperationUsergroupSearchUserGroupsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "searchUserGroups",
		Short: `This endpoint is to search groups by group name.  It's open for all authenticated requests.
`,
		RunE: runOperationUsergroupSearchUserGroups,
	}

	if err := registerOperationUsergroupSearchUserGroupsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUsergroupSearchUserGroups uses cmd flags to call endpoint api
func runOperationUsergroupSearchUserGroups(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := usergroup.NewSearchUserGroupsParams()
	if err, _ := retrieveOperationUsergroupSearchUserGroupsXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUsergroupSearchUserGroupsGroupnameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUsergroupSearchUserGroupsPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUsergroupSearchUserGroupsPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUsergroupSearchUserGroupsResult(appCli.Usergroup.SearchUserGroups(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUsergroupSearchUserGroupsParamFlags registers all flags needed to fill params
func registerOperationUsergroupSearchUserGroupsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUsergroupSearchUserGroupsXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUsergroupSearchUserGroupsGroupnameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUsergroupSearchUserGroupsPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUsergroupSearchUserGroupsPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUsergroupSearchUserGroupsXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationUsergroupSearchUserGroupsGroupnameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	groupnameDescription := `Required. Group name for filtering results.`

	var groupnameFlagName string
	if cmdPrefix == "" {
		groupnameFlagName = "groupname"
	} else {
		groupnameFlagName = fmt.Sprintf("%v.groupname", cmdPrefix)
	}

	var groupnameFlagDefault string

	_ = cmd.PersistentFlags().String(groupnameFlagName, groupnameFlagDefault, groupnameDescription)

	return nil
}
func registerOperationUsergroupSearchUserGroupsPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `The page number`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationUsergroupSearchUserGroupsPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `The size of per page`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "page_size"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
	}

	var pageSizeFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}

func retrieveOperationUsergroupSearchUserGroupsXRequestIDFlag(m *usergroup.SearchUserGroupsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUsergroupSearchUserGroupsGroupnameFlag(m *usergroup.SearchUserGroupsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("groupname") {

		var groupnameFlagName string
		if cmdPrefix == "" {
			groupnameFlagName = "groupname"
		} else {
			groupnameFlagName = fmt.Sprintf("%v.groupname", cmdPrefix)
		}

		groupnameFlagValue, err := cmd.Flags().GetString(groupnameFlagName)
		if err != nil {
			return err, false
		}
		m.Groupname = groupnameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUsergroupSearchUserGroupsPageFlag(m *usergroup.SearchUserGroupsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUsergroupSearchUserGroupsPageSizeFlag(m *usergroup.SearchUserGroupsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page_size") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "page_size"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}

// parseOperationUsergroupSearchUserGroupsResult parses request result and return the string content
func parseOperationUsergroupSearchUserGroupsResult(resp0 *usergroup.SearchUserGroupsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*usergroup.SearchUserGroupsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*usergroup.SearchUserGroupsUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*usergroup.SearchUserGroupsInternalServerError)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
