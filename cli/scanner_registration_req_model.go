// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ScannerRegistrationReq

// register flags to command
func registerModelScannerRegistrationReqFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScannerRegistrationReqAccessCredential(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqSkipCertVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationReqUseInternalAddr(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScannerRegistrationReqAccessCredential(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessCredentialDescription := `An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
`

	var accessCredentialFlagName string
	if cmdPrefix == "" {
		accessCredentialFlagName = "access_credential"
	} else {
		accessCredentialFlagName = fmt.Sprintf("%v.access_credential", cmdPrefix)
	}

	var accessCredentialFlagDefault string

	_ = cmd.PersistentFlags().String(accessCredentialFlagName, accessCredentialFlagDefault, accessCredentialDescription)

	return nil
}

func registerScannerRegistrationReqAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authDescription := `Specify what authentication approach is adopted for the HTTP communications.
Supported types Basic', 'Bearer' and api key header 'X-ScannerAdapter-API-Key'
`

	var authFlagName string
	if cmdPrefix == "" {
		authFlagName = "auth"
	} else {
		authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
	}

	var authFlagDefault string

	_ = cmd.PersistentFlags().String(authFlagName, authFlagDefault, authDescription)

	return nil
}

func registerScannerRegistrationReqDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `An optional description of this registration.`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerScannerRegistrationReqDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	disabledDescription := `Indicate whether the registration is enabled or not`

	var disabledFlagName string
	if cmdPrefix == "" {
		disabledFlagName = "disabled"
	} else {
		disabledFlagName = fmt.Sprintf("%v.disabled", cmdPrefix)
	}

	var disabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(disabledFlagName, disabledFlagDefault, disabledDescription)

	return nil
}

func registerScannerRegistrationReqName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. The name of this registration`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerScannerRegistrationReqSkipCertVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	skipCertVerifyDescription := `Indicate if skip the certificate verification when sending HTTP requests`

	var skipCertVerifyFlagName string
	if cmdPrefix == "" {
		skipCertVerifyFlagName = "skip_certVerify"
	} else {
		skipCertVerifyFlagName = fmt.Sprintf("%v.skip_certVerify", cmdPrefix)
	}

	var skipCertVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipCertVerifyFlagName, skipCertVerifyFlagDefault, skipCertVerifyDescription)

	return nil
}

func registerScannerRegistrationReqURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive url strfmt.URI is not supported by go-swagger cli yet

	return nil
}

func registerScannerRegistrationReqUseInternalAddr(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	useInternalAddrDescription := `Indicate whether use internal registry addr for the scanner to pull content or not`

	var useInternalAddrFlagName string
	if cmdPrefix == "" {
		useInternalAddrFlagName = "use_internal_addr"
	} else {
		useInternalAddrFlagName = fmt.Sprintf("%v.use_internal_addr", cmdPrefix)
	}

	var useInternalAddrFlagDefault bool

	_ = cmd.PersistentFlags().Bool(useInternalAddrFlagName, useInternalAddrFlagDefault, useInternalAddrDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScannerRegistrationReqFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessCredentialAdded := retrieveScannerRegistrationReqAccessCredentialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessCredentialAdded

	err, authAdded := retrieveScannerRegistrationReqAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authAdded

	err, descriptionAdded := retrieveScannerRegistrationReqDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, disabledAdded := retrieveScannerRegistrationReqDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || disabledAdded

	err, nameAdded := retrieveScannerRegistrationReqNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, skipCertVerifyAdded := retrieveScannerRegistrationReqSkipCertVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || skipCertVerifyAdded

	err, urlAdded := retrieveScannerRegistrationReqURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, useInternalAddrAdded := retrieveScannerRegistrationReqUseInternalAddrFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || useInternalAddrAdded

	return nil, retAdded
}

func retrieveScannerRegistrationReqAccessCredentialFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessCredentialFlagName := fmt.Sprintf("%v.access_credential", cmdPrefix)
	if cmd.Flags().Changed(accessCredentialFlagName) {

		var accessCredentialFlagName string
		if cmdPrefix == "" {
			accessCredentialFlagName = "access_credential"
		} else {
			accessCredentialFlagName = fmt.Sprintf("%v.access_credential", cmdPrefix)
		}

		accessCredentialFlagValue, err := cmd.Flags().GetString(accessCredentialFlagName)
		if err != nil {
			return err, false
		}
		m.AccessCredential = accessCredentialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqAuthFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authFlagName := fmt.Sprintf("%v.auth", cmdPrefix)
	if cmd.Flags().Changed(authFlagName) {

		var authFlagName string
		if cmdPrefix == "" {
			authFlagName = "auth"
		} else {
			authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
		}

		authFlagValue, err := cmd.Flags().GetString(authFlagName)
		if err != nil {
			return err, false
		}
		m.Auth = authFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqDescriptionFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqDisabledFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	disabledFlagName := fmt.Sprintf("%v.disabled", cmdPrefix)
	if cmd.Flags().Changed(disabledFlagName) {

		var disabledFlagName string
		if cmdPrefix == "" {
			disabledFlagName = "disabled"
		} else {
			disabledFlagName = fmt.Sprintf("%v.disabled", cmdPrefix)
		}

		disabledFlagValue, err := cmd.Flags().GetBool(disabledFlagName)
		if err != nil {
			return err, false
		}
		m.Disabled = &disabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqNameFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqSkipCertVerifyFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	skipCertVerifyFlagName := fmt.Sprintf("%v.skip_certVerify", cmdPrefix)
	if cmd.Flags().Changed(skipCertVerifyFlagName) {

		var skipCertVerifyFlagName string
		if cmdPrefix == "" {
			skipCertVerifyFlagName = "skip_certVerify"
		} else {
			skipCertVerifyFlagName = fmt.Sprintf("%v.skip_certVerify", cmdPrefix)
		}

		skipCertVerifyFlagValue, err := cmd.Flags().GetBool(skipCertVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.SkipCertVerify = &skipCertVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqURLFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		// warning: primitive url strfmt.URI is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationReqUseInternalAddrFlags(depth int, m *models.ScannerRegistrationReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	useInternalAddrFlagName := fmt.Sprintf("%v.use_internal_addr", cmdPrefix)
	if cmd.Flags().Changed(useInternalAddrFlagName) {

		var useInternalAddrFlagName string
		if cmdPrefix == "" {
			useInternalAddrFlagName = "use_internal_addr"
		} else {
			useInternalAddrFlagName = fmt.Sprintf("%v.use_internal_addr", cmdPrefix)
		}

		useInternalAddrFlagValue, err := cmd.Flags().GetBool(useInternalAddrFlagName)
		if err != nil {
			return err, false
		}
		m.UseInternalAddr = &useInternalAddrFlagValue

		retAdded = true
	}

	return nil, retAdded
}
