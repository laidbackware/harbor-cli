// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/oidc"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationOidcPingOIDCCmd returns a cmd to handle operation pingOIdC
func makeOperationOidcPingOIDCCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "pingOIDC",
		Short: `Test the OIDC endpoint, the setting of the endpoint is provided in the request.  This API can only be called by system admin.
`,
		RunE: runOperationOidcPingOIDC,
	}

	if err := registerOperationOidcPingOIDCParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationOidcPingOIDC uses cmd flags to call endpoint api
func runOperationOidcPingOIDC(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := oidc.NewPingOIDCParams()
	if err, _ := retrieveOperationOidcPingOIDCXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationOidcPingOIDCEndpointFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationOidcPingOIDCResult(appCli.Oidc.PingOIDC(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationOidcPingOIDCParamFlags registers all flags needed to fill params
func registerOperationOidcPingOIDCParamFlags(cmd *cobra.Command) error {
	if err := registerOperationOidcPingOIDCXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationOidcPingOIDCEndpointParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationOidcPingOIDCXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationOidcPingOIDCEndpointParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var endpointFlagName string
	if cmdPrefix == "" {
		endpointFlagName = "endpoint"
	} else {
		endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endpointFlagName, "", "Optional json string for [endpoint]. Request body for OIDC endpoint to be tested.")

	// add flags for body
	if err := registerModelPingOIDCBodyFlags(0, "pingOIdCBody", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationOidcPingOIDCXRequestIDFlag(m *oidc.PingOIDCParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationOidcPingOIDCEndpointFlag(m *oidc.PingOIDCParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("endpoint") {
		// Read endpoint string from cmd and unmarshal
		endpointValueStr, err := cmd.Flags().GetString("endpoint")
		if err != nil {
			return err, false
		}

		endpointValue := oidc.PingOIDCBody{}
		if err := json.Unmarshal([]byte(endpointValueStr), &endpointValue); err != nil {
			return fmt.Errorf("cannot unmarshal endpoint string in PingOIDCBody: %v", err), false
		}
		m.Endpoint = endpointValue
	}
	endpointValueModel := m.Endpoint
	if swag.IsZero(endpointValueModel) {
		endpointValueModel = oidc.PingOIDCBody{}
	}
	err, added := retrieveModelPingOIDCBodyFlags(0, &endpointValueModel, "pingOIdCBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Endpoint = endpointValueModel
	}
	if dryRun && debug {

		endpointValueDebugBytes, err := json.Marshal(m.Endpoint)
		if err != nil {
			return err, false
		}
		logDebugf("Endpoint dry-run payload: %v", string(endpointValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationOidcPingOIDCResult parses request result and return the string content
func parseOperationOidcPingOIDCResult(resp0 *oidc.PingOIDCOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning pingOIdCOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*oidc.PingOIDCBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*oidc.PingOIDCUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*oidc.PingOIDCForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response pingOIdCOK is not supported by go-swagger cli yet.

	return "", nil
}

// register flags to command
func registerModelPingOIDCBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPingOIDCBodyURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPingOIDCBodyVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPingOIDCBodyURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `The URL of OIDC endpoint to be tested.`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

func registerPingOIDCBodyVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verifyCertDescription := `Whether the certificate should be verified`

	var verifyCertFlagName string
	if cmdPrefix == "" {
		verifyCertFlagName = "verify_cert"
	} else {
		verifyCertFlagName = fmt.Sprintf("%v.verify_cert", cmdPrefix)
	}

	var verifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(verifyCertFlagName, verifyCertFlagDefault, verifyCertDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPingOIDCBodyFlags(depth int, m *oidc.PingOIDCBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, urlAdded := retrievePingOIDCBodyURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	err, verifyCertAdded := retrievePingOIDCBodyVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verifyCertAdded

	return nil, retAdded
}

func retrievePingOIDCBodyURLFlags(depth int, m *oidc.PingOIDCBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePingOIDCBodyVerifyCertFlags(depth int, m *oidc.PingOIDCBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verifyCertFlagName := fmt.Sprintf("%v.verify_cert", cmdPrefix)
	if cmd.Flags().Changed(verifyCertFlagName) {

		var verifyCertFlagName string
		if cmdPrefix == "" {
			verifyCertFlagName = "verify_cert"
		} else {
			verifyCertFlagName = fmt.Sprintf("%v.verify_cert", cmdPrefix)
		}

		verifyCertFlagValue, err := cmd.Flags().GetBool(verifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.VerifyCert = verifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}
