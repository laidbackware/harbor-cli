// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for GeneralInfo

// register flags to command
func registerModelGeneralInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerGeneralInfoAuthMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoAuthproxySettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoCurrentTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoExternalURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoHarborVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoHasCaRoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoNotificationEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoProjectCreationRestriction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoRegistryStorageProviderName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoRegistryURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoSelfRegistration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoWithChartmuseum(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGeneralInfoWithNotary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerGeneralInfoAuthMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authModeDescription := `The auth mode of current Harbor instance.`

	var authModeFlagName string
	if cmdPrefix == "" {
		authModeFlagName = "auth_mode"
	} else {
		authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
	}

	var authModeFlagDefault string

	_ = cmd.PersistentFlags().String(authModeFlagName, authModeFlagDefault, authModeDescription)

	return nil
}

func registerGeneralInfoAuthproxySettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var authproxySettingsFlagName string
	if cmdPrefix == "" {
		authproxySettingsFlagName = "authproxy_settings"
	} else {
		authproxySettingsFlagName = fmt.Sprintf("%v.authproxy_settings", cmdPrefix)
	}

	if err := registerModelAuthproxySettingFlags(depth+1, authproxySettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGeneralInfoCurrentTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentTimeDescription := `The current time of the server.`

	var currentTimeFlagName string
	if cmdPrefix == "" {
		currentTimeFlagName = "current_time"
	} else {
		currentTimeFlagName = fmt.Sprintf("%v.current_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(currentTimeFlagName, "", currentTimeDescription)

	return nil
}

func registerGeneralInfoExternalURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	externalUrlDescription := `The external URL of Harbor, with protocol.`

	var externalUrlFlagName string
	if cmdPrefix == "" {
		externalUrlFlagName = "external_url"
	} else {
		externalUrlFlagName = fmt.Sprintf("%v.external_url", cmdPrefix)
	}

	var externalUrlFlagDefault string

	_ = cmd.PersistentFlags().String(externalUrlFlagName, externalUrlFlagDefault, externalUrlDescription)

	return nil
}

func registerGeneralInfoHarborVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	harborVersionDescription := `The build version of Harbor.`

	var harborVersionFlagName string
	if cmdPrefix == "" {
		harborVersionFlagName = "harbor_version"
	} else {
		harborVersionFlagName = fmt.Sprintf("%v.harbor_version", cmdPrefix)
	}

	var harborVersionFlagDefault string

	_ = cmd.PersistentFlags().String(harborVersionFlagName, harborVersionFlagDefault, harborVersionDescription)

	return nil
}

func registerGeneralInfoHasCaRoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hasCaRootDescription := `Indicate whether there is a ca root cert file ready for download in the file system.`

	var hasCaRootFlagName string
	if cmdPrefix == "" {
		hasCaRootFlagName = "has_ca_root"
	} else {
		hasCaRootFlagName = fmt.Sprintf("%v.has_ca_root", cmdPrefix)
	}

	var hasCaRootFlagDefault bool

	_ = cmd.PersistentFlags().Bool(hasCaRootFlagName, hasCaRootFlagDefault, hasCaRootDescription)

	return nil
}

func registerGeneralInfoNotificationEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	notificationEnableDescription := `The flag to indicate whether notification mechanism is enabled on Harbor instance.`

	var notificationEnableFlagName string
	if cmdPrefix == "" {
		notificationEnableFlagName = "notification_enable"
	} else {
		notificationEnableFlagName = fmt.Sprintf("%v.notification_enable", cmdPrefix)
	}

	var notificationEnableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(notificationEnableFlagName, notificationEnableFlagDefault, notificationEnableDescription)

	return nil
}

func registerGeneralInfoProjectCreationRestriction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectCreationRestrictionDescription := `Indicate who can create projects, it could be adminonly or everyone.`

	var projectCreationRestrictionFlagName string
	if cmdPrefix == "" {
		projectCreationRestrictionFlagName = "project_creation_restriction"
	} else {
		projectCreationRestrictionFlagName = fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	}

	var projectCreationRestrictionFlagDefault string

	_ = cmd.PersistentFlags().String(projectCreationRestrictionFlagName, projectCreationRestrictionFlagDefault, projectCreationRestrictionDescription)

	return nil
}

func registerGeneralInfoReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	readOnlyDescription := `The flag to indicate whether Harbor is in readonly mode.`

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "read_only"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.read_only", cmdPrefix)
	}

	var readOnlyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(readOnlyFlagName, readOnlyFlagDefault, readOnlyDescription)

	return nil
}

func registerGeneralInfoRegistryStorageProviderName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryStorageProviderNameDescription := `The storage providers name of Harbor registry`

	var registryStorageProviderNameFlagName string
	if cmdPrefix == "" {
		registryStorageProviderNameFlagName = "registry_storage_provider_name"
	} else {
		registryStorageProviderNameFlagName = fmt.Sprintf("%v.registry_storage_provider_name", cmdPrefix)
	}

	var registryStorageProviderNameFlagDefault string

	_ = cmd.PersistentFlags().String(registryStorageProviderNameFlagName, registryStorageProviderNameFlagDefault, registryStorageProviderNameDescription)

	return nil
}

func registerGeneralInfoRegistryURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryUrlDescription := `The url of registry against which the docker command should be issued.`

	var registryUrlFlagName string
	if cmdPrefix == "" {
		registryUrlFlagName = "registry_url"
	} else {
		registryUrlFlagName = fmt.Sprintf("%v.registry_url", cmdPrefix)
	}

	var registryUrlFlagDefault string

	_ = cmd.PersistentFlags().String(registryUrlFlagName, registryUrlFlagDefault, registryUrlDescription)

	return nil
}

func registerGeneralInfoSelfRegistration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	selfRegistrationDescription := `Indicate whether the Harbor instance enable user to register himself.`

	var selfRegistrationFlagName string
	if cmdPrefix == "" {
		selfRegistrationFlagName = "self_registration"
	} else {
		selfRegistrationFlagName = fmt.Sprintf("%v.self_registration", cmdPrefix)
	}

	var selfRegistrationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(selfRegistrationFlagName, selfRegistrationFlagDefault, selfRegistrationDescription)

	return nil
}

func registerGeneralInfoWithChartmuseum(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	withChartmuseumDescription := `If the Harbor instance is deployed with nested chartmuseum.`

	var withChartmuseumFlagName string
	if cmdPrefix == "" {
		withChartmuseumFlagName = "with_chartmuseum"
	} else {
		withChartmuseumFlagName = fmt.Sprintf("%v.with_chartmuseum", cmdPrefix)
	}

	var withChartmuseumFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withChartmuseumFlagName, withChartmuseumFlagDefault, withChartmuseumDescription)

	return nil
}

func registerGeneralInfoWithNotary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	withNotaryDescription := `If the Harbor instance is deployed with nested notary.`

	var withNotaryFlagName string
	if cmdPrefix == "" {
		withNotaryFlagName = "with_notary"
	} else {
		withNotaryFlagName = fmt.Sprintf("%v.with_notary", cmdPrefix)
	}

	var withNotaryFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withNotaryFlagName, withNotaryFlagDefault, withNotaryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGeneralInfoFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authModeAdded := retrieveGeneralInfoAuthModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authModeAdded

	err, authproxySettingsAdded := retrieveGeneralInfoAuthproxySettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authproxySettingsAdded

	err, currentTimeAdded := retrieveGeneralInfoCurrentTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentTimeAdded

	err, externalUrlAdded := retrieveGeneralInfoExternalURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || externalUrlAdded

	err, harborVersionAdded := retrieveGeneralInfoHarborVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || harborVersionAdded

	err, hasCaRootAdded := retrieveGeneralInfoHasCaRootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hasCaRootAdded

	err, notificationEnableAdded := retrieveGeneralInfoNotificationEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notificationEnableAdded

	err, projectCreationRestrictionAdded := retrieveGeneralInfoProjectCreationRestrictionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectCreationRestrictionAdded

	err, readOnlyAdded := retrieveGeneralInfoReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, registryStorageProviderNameAdded := retrieveGeneralInfoRegistryStorageProviderNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryStorageProviderNameAdded

	err, registryUrlAdded := retrieveGeneralInfoRegistryURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryUrlAdded

	err, selfRegistrationAdded := retrieveGeneralInfoSelfRegistrationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selfRegistrationAdded

	err, withChartmuseumAdded := retrieveGeneralInfoWithChartmuseumFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || withChartmuseumAdded

	err, withNotaryAdded := retrieveGeneralInfoWithNotaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || withNotaryAdded

	return nil, retAdded
}

func retrieveGeneralInfoAuthModeFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authModeFlagName := fmt.Sprintf("%v.auth_mode", cmdPrefix)
	if cmd.Flags().Changed(authModeFlagName) {

		var authModeFlagName string
		if cmdPrefix == "" {
			authModeFlagName = "auth_mode"
		} else {
			authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
		}

		authModeFlagValue, err := cmd.Flags().GetString(authModeFlagName)
		if err != nil {
			return err, false
		}
		m.AuthMode = &authModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoAuthproxySettingsFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authproxySettingsFlagName := fmt.Sprintf("%v.authproxy_settings", cmdPrefix)
	if cmd.Flags().Changed(authproxySettingsFlagName) {
		// info: complex object authproxy_settings AuthproxySetting is retrieved outside this Changed() block
	}
	authproxySettingsFlagValue := m.AuthproxySettings
	if swag.IsZero(authproxySettingsFlagValue) {
		authproxySettingsFlagValue = &models.AuthproxySetting{}
	}

	err, authproxySettingsAdded := retrieveModelAuthproxySettingFlags(depth+1, authproxySettingsFlagValue, authproxySettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authproxySettingsAdded
	if authproxySettingsAdded {
		m.AuthproxySettings = authproxySettingsFlagValue
	}

	return nil, retAdded
}

func retrieveGeneralInfoCurrentTimeFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentTimeFlagName := fmt.Sprintf("%v.current_time", cmdPrefix)
	if cmd.Flags().Changed(currentTimeFlagName) {

		var currentTimeFlagName string
		if cmdPrefix == "" {
			currentTimeFlagName = "current_time"
		} else {
			currentTimeFlagName = fmt.Sprintf("%v.current_time", cmdPrefix)
		}

		currentTimeFlagValueStr, err := cmd.Flags().GetString(currentTimeFlagName)
		if err != nil {
			return err, false
		}
		var currentTimeFlagValue strfmt.DateTime
		if err := currentTimeFlagValue.UnmarshalText([]byte(currentTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CurrentTime = &currentTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoExternalURLFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	externalUrlFlagName := fmt.Sprintf("%v.external_url", cmdPrefix)
	if cmd.Flags().Changed(externalUrlFlagName) {

		var externalUrlFlagName string
		if cmdPrefix == "" {
			externalUrlFlagName = "external_url"
		} else {
			externalUrlFlagName = fmt.Sprintf("%v.external_url", cmdPrefix)
		}

		externalUrlFlagValue, err := cmd.Flags().GetString(externalUrlFlagName)
		if err != nil {
			return err, false
		}
		m.ExternalURL = &externalUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoHarborVersionFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	harborVersionFlagName := fmt.Sprintf("%v.harbor_version", cmdPrefix)
	if cmd.Flags().Changed(harborVersionFlagName) {

		var harborVersionFlagName string
		if cmdPrefix == "" {
			harborVersionFlagName = "harbor_version"
		} else {
			harborVersionFlagName = fmt.Sprintf("%v.harbor_version", cmdPrefix)
		}

		harborVersionFlagValue, err := cmd.Flags().GetString(harborVersionFlagName)
		if err != nil {
			return err, false
		}
		m.HarborVersion = &harborVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoHasCaRootFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hasCaRootFlagName := fmt.Sprintf("%v.has_ca_root", cmdPrefix)
	if cmd.Flags().Changed(hasCaRootFlagName) {

		var hasCaRootFlagName string
		if cmdPrefix == "" {
			hasCaRootFlagName = "has_ca_root"
		} else {
			hasCaRootFlagName = fmt.Sprintf("%v.has_ca_root", cmdPrefix)
		}

		hasCaRootFlagValue, err := cmd.Flags().GetBool(hasCaRootFlagName)
		if err != nil {
			return err, false
		}
		m.HasCaRoot = &hasCaRootFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoNotificationEnableFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notificationEnableFlagName := fmt.Sprintf("%v.notification_enable", cmdPrefix)
	if cmd.Flags().Changed(notificationEnableFlagName) {

		var notificationEnableFlagName string
		if cmdPrefix == "" {
			notificationEnableFlagName = "notification_enable"
		} else {
			notificationEnableFlagName = fmt.Sprintf("%v.notification_enable", cmdPrefix)
		}

		notificationEnableFlagValue, err := cmd.Flags().GetBool(notificationEnableFlagName)
		if err != nil {
			return err, false
		}
		m.NotificationEnable = &notificationEnableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoProjectCreationRestrictionFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectCreationRestrictionFlagName := fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	if cmd.Flags().Changed(projectCreationRestrictionFlagName) {

		var projectCreationRestrictionFlagName string
		if cmdPrefix == "" {
			projectCreationRestrictionFlagName = "project_creation_restriction"
		} else {
			projectCreationRestrictionFlagName = fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
		}

		projectCreationRestrictionFlagValue, err := cmd.Flags().GetString(projectCreationRestrictionFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectCreationRestriction = &projectCreationRestrictionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoReadOnlyFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.read_only", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {

		var readOnlyFlagName string
		if cmdPrefix == "" {
			readOnlyFlagName = "read_only"
		} else {
			readOnlyFlagName = fmt.Sprintf("%v.read_only", cmdPrefix)
		}

		readOnlyFlagValue, err := cmd.Flags().GetBool(readOnlyFlagName)
		if err != nil {
			return err, false
		}
		m.ReadOnly = &readOnlyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoRegistryStorageProviderNameFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryStorageProviderNameFlagName := fmt.Sprintf("%v.registry_storage_provider_name", cmdPrefix)
	if cmd.Flags().Changed(registryStorageProviderNameFlagName) {

		var registryStorageProviderNameFlagName string
		if cmdPrefix == "" {
			registryStorageProviderNameFlagName = "registry_storage_provider_name"
		} else {
			registryStorageProviderNameFlagName = fmt.Sprintf("%v.registry_storage_provider_name", cmdPrefix)
		}

		registryStorageProviderNameFlagValue, err := cmd.Flags().GetString(registryStorageProviderNameFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryStorageProviderName = &registryStorageProviderNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoRegistryURLFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryUrlFlagName := fmt.Sprintf("%v.registry_url", cmdPrefix)
	if cmd.Flags().Changed(registryUrlFlagName) {

		var registryUrlFlagName string
		if cmdPrefix == "" {
			registryUrlFlagName = "registry_url"
		} else {
			registryUrlFlagName = fmt.Sprintf("%v.registry_url", cmdPrefix)
		}

		registryUrlFlagValue, err := cmd.Flags().GetString(registryUrlFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryURL = &registryUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoSelfRegistrationFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	selfRegistrationFlagName := fmt.Sprintf("%v.self_registration", cmdPrefix)
	if cmd.Flags().Changed(selfRegistrationFlagName) {

		var selfRegistrationFlagName string
		if cmdPrefix == "" {
			selfRegistrationFlagName = "self_registration"
		} else {
			selfRegistrationFlagName = fmt.Sprintf("%v.self_registration", cmdPrefix)
		}

		selfRegistrationFlagValue, err := cmd.Flags().GetBool(selfRegistrationFlagName)
		if err != nil {
			return err, false
		}
		m.SelfRegistration = &selfRegistrationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoWithChartmuseumFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	withChartmuseumFlagName := fmt.Sprintf("%v.with_chartmuseum", cmdPrefix)
	if cmd.Flags().Changed(withChartmuseumFlagName) {

		var withChartmuseumFlagName string
		if cmdPrefix == "" {
			withChartmuseumFlagName = "with_chartmuseum"
		} else {
			withChartmuseumFlagName = fmt.Sprintf("%v.with_chartmuseum", cmdPrefix)
		}

		withChartmuseumFlagValue, err := cmd.Flags().GetBool(withChartmuseumFlagName)
		if err != nil {
			return err, false
		}
		m.WithChartmuseum = &withChartmuseumFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveGeneralInfoWithNotaryFlags(depth int, m *models.GeneralInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	withNotaryFlagName := fmt.Sprintf("%v.with_notary", cmdPrefix)
	if cmd.Flags().Changed(withNotaryFlagName) {

		var withNotaryFlagName string
		if cmdPrefix == "" {
			withNotaryFlagName = "with_notary"
		} else {
			withNotaryFlagName = fmt.Sprintf("%v.with_notary", cmdPrefix)
		}

		withNotaryFlagValue, err := cmd.Flags().GetBool(withNotaryFlagName)
		if err != nil {
			return err, false
		}
		m.WithNotary = &withNotaryFlagValue

		retAdded = true
	}

	return nil, retAdded
}
