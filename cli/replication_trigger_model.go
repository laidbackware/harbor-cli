// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ReplicationTrigger

// register flags to command
func registerModelReplicationTriggerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicationTriggerTriggerSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTriggerType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationTriggerTriggerSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var triggerSettingsFlagName string
	if cmdPrefix == "" {
		triggerSettingsFlagName = "trigger_settings"
	} else {
		triggerSettingsFlagName = fmt.Sprintf("%v.trigger_settings", cmdPrefix)
	}

	if err := registerModelReplicationTriggerSettingsFlags(depth+1, triggerSettingsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationTriggerType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The replication policy trigger type. The valid values are manual, event_based and scheduled.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicationTriggerFlags(depth int, m *models.ReplicationTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, triggerSettingsAdded := retrieveReplicationTriggerTriggerSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerSettingsAdded

	err, typeAdded := retrieveReplicationTriggerTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveReplicationTriggerTriggerSettingsFlags(depth int, m *models.ReplicationTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerSettingsFlagName := fmt.Sprintf("%v.trigger_settings", cmdPrefix)
	if cmd.Flags().Changed(triggerSettingsFlagName) {
		// info: complex object trigger_settings ReplicationTriggerSettings is retrieved outside this Changed() block
	}
	triggerSettingsFlagValue := m.TriggerSettings
	if swag.IsZero(triggerSettingsFlagValue) {
		triggerSettingsFlagValue = &models.ReplicationTriggerSettings{}
	}

	err, triggerSettingsAdded := retrieveModelReplicationTriggerSettingsFlags(depth+1, triggerSettingsFlagValue, triggerSettingsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerSettingsAdded
	if triggerSettingsAdded {
		m.TriggerSettings = triggerSettingsFlagValue
	}

	return nil, retAdded
}

func retrieveReplicationTriggerTypeFlags(depth int, m *models.ReplicationTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
