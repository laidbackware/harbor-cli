// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/preheat"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPreheatStopExecutionCmd returns a cmd to handle operation stopExecution
func makeOperationPreheatStopExecutionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "StopExecution",
		Short: `Stop a execution`,
		RunE:  runOperationPreheatStopExecution,
	}

	if err := registerOperationPreheatStopExecutionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPreheatStopExecution uses cmd flags to call endpoint api
func runOperationPreheatStopExecution(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := preheat.NewStopExecutionParams()
	if err, _ := retrieveOperationPreheatStopExecutionXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatStopExecutionExecutionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatStopExecutionExecutionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatStopExecutionPreheatPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatStopExecutionProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPreheatStopExecutionResult(appCli.Preheat.StopExecution(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPreheatStopExecutionParamFlags registers all flags needed to fill params
func registerOperationPreheatStopExecutionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPreheatStopExecutionXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatStopExecutionExecutionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatStopExecutionExecutionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatStopExecutionPreheatPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatStopExecutionProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPreheatStopExecutionXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationPreheatStopExecutionExecutionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var executionFlagName string
	if cmdPrefix == "" {
		executionFlagName = "execution"
	} else {
		executionFlagName = fmt.Sprintf("%v.execution", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(executionFlagName, "", "Optional json string for [execution]. The data of execution")

	// add flags for body
	if err := registerModelExecutionFlags(0, "execution", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationPreheatStopExecutionExecutionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	executionIdDescription := `Required. Execution ID`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "execution_id"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
	}

	var executionIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}
func registerOperationPreheatStopExecutionPreheatPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	preheatPolicyNameDescription := `Required. Preheat Policy Name`

	var preheatPolicyNameFlagName string
	if cmdPrefix == "" {
		preheatPolicyNameFlagName = "preheat_policy_name"
	} else {
		preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
	}

	var preheatPolicyNameFlagDefault string

	_ = cmd.PersistentFlags().String(preheatPolicyNameFlagName, preheatPolicyNameFlagDefault, preheatPolicyNameDescription)

	return nil
}
func registerOperationPreheatStopExecutionProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}

func retrieveOperationPreheatStopExecutionXRequestIDFlag(m *preheat.StopExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatStopExecutionExecutionFlag(m *preheat.StopExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("execution") {
		// Read execution string from cmd and unmarshal
		executionValueStr, err := cmd.Flags().GetString("execution")
		if err != nil {
			return err, false
		}

		executionValue := models.Execution{}
		if err := json.Unmarshal([]byte(executionValueStr), &executionValue); err != nil {
			return fmt.Errorf("cannot unmarshal execution string in models.Execution: %v", err), false
		}
		m.Execution = &executionValue
	}
	executionValueModel := m.Execution
	if swag.IsZero(executionValueModel) {
		executionValueModel = &models.Execution{}
	}
	err, added := retrieveModelExecutionFlags(0, executionValueModel, "execution", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Execution = executionValueModel
	}
	if dryRun && debug {

		executionValueDebugBytes, err := json.Marshal(m.Execution)
		if err != nil {
			return err, false
		}
		logDebugf("Execution dry-run payload: %v", string(executionValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationPreheatStopExecutionExecutionIDFlag(m *preheat.StopExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("execution_id") {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "execution_id"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetInt64(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatStopExecutionPreheatPolicyNameFlag(m *preheat.StopExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("preheat_policy_name") {

		var preheatPolicyNameFlagName string
		if cmdPrefix == "" {
			preheatPolicyNameFlagName = "preheat_policy_name"
		} else {
			preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
		}

		preheatPolicyNameFlagValue, err := cmd.Flags().GetString(preheatPolicyNameFlagName)
		if err != nil {
			return err, false
		}
		m.PreheatPolicyName = preheatPolicyNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatStopExecutionProjectNameFlag(m *preheat.StopExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}

// parseOperationPreheatStopExecutionResult parses request result and return the string content
func parseOperationPreheatStopExecutionResult(resp0 *preheat.StopExecutionOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning stopExecutionOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*preheat.StopExecutionBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*preheat.StopExecutionUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*preheat.StopExecutionForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*preheat.StopExecutionNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*preheat.StopExecutionInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response stopExecutionOK is not supported by go-swagger cli yet.

	return "", nil
}
