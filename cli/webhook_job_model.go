// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhookJob

// register flags to command
func registerModelWebhookJobFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhookJobCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobEventType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobJobDetail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobNotifyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookJobUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhookJobCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The webhook job creation time.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerWebhookJobEventType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eventTypeDescription := `The webhook job event type.`

	var eventTypeFlagName string
	if cmdPrefix == "" {
		eventTypeFlagName = "event_type"
	} else {
		eventTypeFlagName = fmt.Sprintf("%v.event_type", cmdPrefix)
	}

	var eventTypeFlagDefault string

	_ = cmd.PersistentFlags().String(eventTypeFlagName, eventTypeFlagDefault, eventTypeDescription)

	return nil
}

func registerWebhookJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The webhook job ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerWebhookJobJobDetail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobDetailDescription := `The webhook job notify detailed data.`

	var jobDetailFlagName string
	if cmdPrefix == "" {
		jobDetailFlagName = "job_detail"
	} else {
		jobDetailFlagName = fmt.Sprintf("%v.job_detail", cmdPrefix)
	}

	var jobDetailFlagDefault string

	_ = cmd.PersistentFlags().String(jobDetailFlagName, jobDetailFlagDefault, jobDetailDescription)

	return nil
}

func registerWebhookJobNotifyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	notifyTypeDescription := `The webhook job notify type.`

	var notifyTypeFlagName string
	if cmdPrefix == "" {
		notifyTypeFlagName = "notify_type"
	} else {
		notifyTypeFlagName = fmt.Sprintf("%v.notify_type", cmdPrefix)
	}

	var notifyTypeFlagDefault string

	_ = cmd.PersistentFlags().String(notifyTypeFlagName, notifyTypeFlagDefault, notifyTypeDescription)

	return nil
}

func registerWebhookJobPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyIdDescription := `The webhook policy ID.`

	var policyIdFlagName string
	if cmdPrefix == "" {
		policyIdFlagName = "policy_id"
	} else {
		policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
	}

	var policyIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(policyIdFlagName, policyIdFlagDefault, policyIdDescription)

	return nil
}

func registerWebhookJobStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The webhook job status.`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerWebhookJobUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The webhook job update time.`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhookJobFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrieveWebhookJobCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, eventTypeAdded := retrieveWebhookJobEventTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventTypeAdded

	err, idAdded := retrieveWebhookJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, jobDetailAdded := retrieveWebhookJobJobDetailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobDetailAdded

	err, notifyTypeAdded := retrieveWebhookJobNotifyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notifyTypeAdded

	err, policyIdAdded := retrieveWebhookJobPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyIdAdded

	err, statusAdded := retrieveWebhookJobStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, updateTimeAdded := retrieveWebhookJobUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrieveWebhookJobCreationTimeFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobEventTypeFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventTypeFlagName := fmt.Sprintf("%v.event_type", cmdPrefix)
	if cmd.Flags().Changed(eventTypeFlagName) {

		var eventTypeFlagName string
		if cmdPrefix == "" {
			eventTypeFlagName = "event_type"
		} else {
			eventTypeFlagName = fmt.Sprintf("%v.event_type", cmdPrefix)
		}

		eventTypeFlagValue, err := cmd.Flags().GetString(eventTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EventType = eventTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobIDFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobJobDetailFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobDetailFlagName := fmt.Sprintf("%v.job_detail", cmdPrefix)
	if cmd.Flags().Changed(jobDetailFlagName) {

		var jobDetailFlagName string
		if cmdPrefix == "" {
			jobDetailFlagName = "job_detail"
		} else {
			jobDetailFlagName = fmt.Sprintf("%v.job_detail", cmdPrefix)
		}

		jobDetailFlagValue, err := cmd.Flags().GetString(jobDetailFlagName)
		if err != nil {
			return err, false
		}
		m.JobDetail = jobDetailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobNotifyTypeFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notifyTypeFlagName := fmt.Sprintf("%v.notify_type", cmdPrefix)
	if cmd.Flags().Changed(notifyTypeFlagName) {

		var notifyTypeFlagName string
		if cmdPrefix == "" {
			notifyTypeFlagName = "notify_type"
		} else {
			notifyTypeFlagName = fmt.Sprintf("%v.notify_type", cmdPrefix)
		}

		notifyTypeFlagValue, err := cmd.Flags().GetString(notifyTypeFlagName)
		if err != nil {
			return err, false
		}
		m.NotifyType = notifyTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobPolicyIDFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyIdFlagName := fmt.Sprintf("%v.policy_id", cmdPrefix)
	if cmd.Flags().Changed(policyIdFlagName) {

		var policyIdFlagName string
		if cmdPrefix == "" {
			policyIdFlagName = "policy_id"
		} else {
			policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
		}

		policyIdFlagValue, err := cmd.Flags().GetInt64(policyIdFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyID = policyIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobStatusFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookJobUpdateTimeFlags(depth int, m *models.WebhookJob, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
