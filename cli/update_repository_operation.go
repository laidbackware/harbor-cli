// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/repository"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRepositoryUpdateRepositoryCmd returns a cmd to handle operation updateRepository
func makeOperationRepositoryUpdateRepositoryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateRepository",
		Short: `Update the repository specified by name`,
		RunE:  runOperationRepositoryUpdateRepository,
	}

	if err := registerOperationRepositoryUpdateRepositoryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRepositoryUpdateRepository uses cmd flags to call endpoint api
func runOperationRepositoryUpdateRepository(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := repository.NewUpdateRepositoryParams()
	if err, _ := retrieveOperationRepositoryUpdateRepositoryXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRepositoryUpdateRepositoryProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRepositoryUpdateRepositoryRepositoryFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRepositoryUpdateRepositoryRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRepositoryUpdateRepositoryResult(appCli.Repository.UpdateRepository(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRepositoryUpdateRepositoryParamFlags registers all flags needed to fill params
func registerOperationRepositoryUpdateRepositoryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRepositoryUpdateRepositoryXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRepositoryUpdateRepositoryProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRepositoryUpdateRepositoryRepositoryParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRepositoryUpdateRepositoryRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRepositoryUpdateRepositoryXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationRepositoryUpdateRepositoryProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationRepositoryUpdateRepositoryRepositoryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(repositoryFlagName, "", "Optional json string for [repository]. The JSON object of repository.")

	// add flags for body
	if err := registerModelRepositoryFlags(0, "repository", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationRepositoryUpdateRepositoryRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}

func retrieveOperationRepositoryUpdateRepositoryXRequestIDFlag(m *repository.UpdateRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRepositoryUpdateRepositoryProjectNameFlag(m *repository.UpdateRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRepositoryUpdateRepositoryRepositoryFlag(m *repository.UpdateRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository") {
		// Read repository string from cmd and unmarshal
		repositoryValueStr, err := cmd.Flags().GetString("repository")
		if err != nil {
			return err, false
		}

		repositoryValue := models.Repository{}
		if err := json.Unmarshal([]byte(repositoryValueStr), &repositoryValue); err != nil {
			return fmt.Errorf("cannot unmarshal repository string in models.Repository: %v", err), false
		}
		m.Repository = &repositoryValue
	}
	repositoryValueModel := m.Repository
	if swag.IsZero(repositoryValueModel) {
		repositoryValueModel = &models.Repository{}
	}
	err, added := retrieveModelRepositoryFlags(0, repositoryValueModel, "repository", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Repository = repositoryValueModel
	}
	if dryRun && debug {

		repositoryValueDebugBytes, err := json.Marshal(m.Repository)
		if err != nil {
			return err, false
		}
		logDebugf("Repository dry-run payload: %v", string(repositoryValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationRepositoryUpdateRepositoryRepositoryNameFlag(m *repository.UpdateRepositoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository_name") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}

// parseOperationRepositoryUpdateRepositoryResult parses request result and return the string content
func parseOperationRepositoryUpdateRepositoryResult(resp0 *repository.UpdateRepositoryOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateRepositoryOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*repository.UpdateRepositoryBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*repository.UpdateRepositoryUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*repository.UpdateRepositoryForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*repository.UpdateRepositoryNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*repository.UpdateRepositoryInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateRepositoryOK is not supported by go-swagger cli yet.

	return "", nil
}
