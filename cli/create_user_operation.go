// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/user"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserCreateUserCmd returns a cmd to handle operation createUser
func makeOperationUserCreateUserCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createUser",
		Short: `This API can be used only when the authentication mode is for local DB.  When self registration is disabled.`,
		RunE:  runOperationUserCreateUser,
	}

	if err := registerOperationUserCreateUserParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserCreateUser uses cmd flags to call endpoint api
func runOperationUserCreateUser(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user.NewCreateUserParams()
	if err, _ := retrieveOperationUserCreateUserXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserCreateUserUserReqFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserCreateUserResult(appCli.User.CreateUser(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserCreateUserParamFlags registers all flags needed to fill params
func registerOperationUserCreateUserParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserCreateUserXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserCreateUserUserReqParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserCreateUserXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationUserCreateUserUserReqParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var userReqFlagName string
	if cmdPrefix == "" {
		userReqFlagName = "userReq"
	} else {
		userReqFlagName = fmt.Sprintf("%v.userReq", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(userReqFlagName, "", "Optional json string for [userReq]. The new user")

	// add flags for body
	if err := registerModelUserCreationReqFlags(0, "userCreationReq", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationUserCreateUserXRequestIDFlag(m *user.CreateUserParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserCreateUserUserReqFlag(m *user.CreateUserParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("userReq") {
		// Read userReq string from cmd and unmarshal
		userReqValueStr, err := cmd.Flags().GetString("userReq")
		if err != nil {
			return err, false
		}

		userReqValue := models.UserCreationReq{}
		if err := json.Unmarshal([]byte(userReqValueStr), &userReqValue); err != nil {
			return fmt.Errorf("cannot unmarshal userReq string in models.UserCreationReq: %v", err), false
		}
		m.UserReq = &userReqValue
	}
	userReqValueModel := m.UserReq
	if swag.IsZero(userReqValueModel) {
		userReqValueModel = &models.UserCreationReq{}
	}
	err, added := retrieveModelUserCreationReqFlags(0, userReqValueModel, "userCreationReq", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.UserReq = userReqValueModel
	}
	if dryRun && debug {

		userReqValueDebugBytes, err := json.Marshal(m.UserReq)
		if err != nil {
			return err, false
		}
		logDebugf("UserReq dry-run payload: %v", string(userReqValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationUserCreateUserResult parses request result and return the string content
func parseOperationUserCreateUserResult(resp0 *user.CreateUserCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createUserCreated is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*user.CreateUserBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*user.CreateUserUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning createUserForbidden is not supported

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*user.CreateUserConflict)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*user.CreateUserInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createUserCreated is not supported by go-swagger cli yet.

	return "", nil
}
