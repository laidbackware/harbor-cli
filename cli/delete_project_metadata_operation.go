// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/project_metadata"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationProjectMetadataDeleteProjectMetadataCmd returns a cmd to handle operation deleteProjectMetadata
func makeOperationProjectMetadataDeleteProjectMetadataCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "deleteProjectMetadata",
		Short: `Delete the specific metadata for the specific project`,
		RunE:  runOperationProjectMetadataDeleteProjectMetadata,
	}

	if err := registerOperationProjectMetadataDeleteProjectMetadataParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationProjectMetadataDeleteProjectMetadata uses cmd flags to call endpoint api
func runOperationProjectMetadataDeleteProjectMetadata(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := project_metadata.NewDeleteProjectMetadataParams()
	if err, _ := retrieveOperationProjectMetadataDeleteProjectMetadataXIsResourceNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationProjectMetadataDeleteProjectMetadataXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationProjectMetadataDeleteProjectMetadataMetaNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationProjectMetadataDeleteProjectMetadataProjectNameOrIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationProjectMetadataDeleteProjectMetadataResult(appCli.ProjectMetadata.DeleteProjectMetadata(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationProjectMetadataDeleteProjectMetadataParamFlags registers all flags needed to fill params
func registerOperationProjectMetadataDeleteProjectMetadataParamFlags(cmd *cobra.Command) error {
	if err := registerOperationProjectMetadataDeleteProjectMetadataXIsResourceNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationProjectMetadataDeleteProjectMetadataXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationProjectMetadataDeleteProjectMetadataMetaNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationProjectMetadataDeleteProjectMetadataProjectNameOrIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationProjectMetadataDeleteProjectMetadataXIsResourceNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xIsResourceNameDescription := `The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.`

	var xIsResourceNameFlagName string
	if cmdPrefix == "" {
		xIsResourceNameFlagName = "X-Is-Resource-Name"
	} else {
		xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
	}

	var xIsResourceNameFlagDefault bool

	_ = cmd.PersistentFlags().Bool(xIsResourceNameFlagName, xIsResourceNameFlagDefault, xIsResourceNameDescription)

	return nil
}
func registerOperationProjectMetadataDeleteProjectMetadataXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationProjectMetadataDeleteProjectMetadataMetaNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	metaNameDescription := `Required. The name of metadata.`

	var metaNameFlagName string
	if cmdPrefix == "" {
		metaNameFlagName = "meta_name"
	} else {
		metaNameFlagName = fmt.Sprintf("%v.meta_name", cmdPrefix)
	}

	var metaNameFlagDefault string

	_ = cmd.PersistentFlags().String(metaNameFlagName, metaNameFlagDefault, metaNameDescription)

	return nil
}
func registerOperationProjectMetadataDeleteProjectMetadataProjectNameOrIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameOrIdDescription := `Required. The name or id of the project`

	var projectNameOrIdFlagName string
	if cmdPrefix == "" {
		projectNameOrIdFlagName = "project_name_or_id"
	} else {
		projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
	}

	var projectNameOrIdFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameOrIdFlagName, projectNameOrIdFlagDefault, projectNameOrIdDescription)

	return nil
}

func retrieveOperationProjectMetadataDeleteProjectMetadataXIsResourceNameFlag(m *project_metadata.DeleteProjectMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Is-Resource-Name") {

		var xIsResourceNameFlagName string
		if cmdPrefix == "" {
			xIsResourceNameFlagName = "X-Is-Resource-Name"
		} else {
			xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
		}

		xIsResourceNameFlagValue, err := cmd.Flags().GetBool(xIsResourceNameFlagName)
		if err != nil {
			return err, false
		}
		m.XIsResourceName = &xIsResourceNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationProjectMetadataDeleteProjectMetadataXRequestIDFlag(m *project_metadata.DeleteProjectMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationProjectMetadataDeleteProjectMetadataMetaNameFlag(m *project_metadata.DeleteProjectMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("meta_name") {

		var metaNameFlagName string
		if cmdPrefix == "" {
			metaNameFlagName = "meta_name"
		} else {
			metaNameFlagName = fmt.Sprintf("%v.meta_name", cmdPrefix)
		}

		metaNameFlagValue, err := cmd.Flags().GetString(metaNameFlagName)
		if err != nil {
			return err, false
		}
		m.MetaName = metaNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationProjectMetadataDeleteProjectMetadataProjectNameOrIDFlag(m *project_metadata.DeleteProjectMetadataParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name_or_id") {

		var projectNameOrIdFlagName string
		if cmdPrefix == "" {
			projectNameOrIdFlagName = "project_name_or_id"
		} else {
			projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
		}

		projectNameOrIdFlagValue, err := cmd.Flags().GetString(projectNameOrIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectNameOrID = projectNameOrIdFlagValue

	}
	return nil, retAdded
}

// parseOperationProjectMetadataDeleteProjectMetadataResult parses request result and return the string content
func parseOperationProjectMetadataDeleteProjectMetadataResult(resp0 *project_metadata.DeleteProjectMetadataOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteProjectMetadataOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*project_metadata.DeleteProjectMetadataBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*project_metadata.DeleteProjectMetadataUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*project_metadata.DeleteProjectMetadataForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*project_metadata.DeleteProjectMetadataNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*project_metadata.DeleteProjectMetadataConflict)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*project_metadata.DeleteProjectMetadataInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response deleteProjectMetadataOK is not supported by go-swagger cli yet.

	return "", nil
}
