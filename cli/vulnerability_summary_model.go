// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for VulnerabilitySummary

// register flags to command
func registerModelVulnerabilitySummaryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerVulnerabilitySummaryFixable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVulnerabilitySummarySummary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerVulnerabilitySummaryTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerVulnerabilitySummaryFixable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fixableDescription := `The number of the fixable vulnerabilities`

	var fixableFlagName string
	if cmdPrefix == "" {
		fixableFlagName = "fixable"
	} else {
		fixableFlagName = fmt.Sprintf("%v.fixable", cmdPrefix)
	}

	var fixableFlagDefault int64

	_ = cmd.PersistentFlags().Int64(fixableFlagName, fixableFlagDefault, fixableDescription)

	return nil
}

func registerVulnerabilitySummarySummary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: summary map[string]int64 map type is not supported by go-swagger cli yet

	return nil
}

func registerVulnerabilitySummaryTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := `The total number of the found vulnerabilities`

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelVulnerabilitySummaryFlags(depth int, m *models.VulnerabilitySummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, fixableAdded := retrieveVulnerabilitySummaryFixableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fixableAdded

	err, summaryAdded := retrieveVulnerabilitySummarySummaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || summaryAdded

	err, totalAdded := retrieveVulnerabilitySummaryTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	return nil, retAdded
}

func retrieveVulnerabilitySummaryFixableFlags(depth int, m *models.VulnerabilitySummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fixableFlagName := fmt.Sprintf("%v.fixable", cmdPrefix)
	if cmd.Flags().Changed(fixableFlagName) {

		var fixableFlagName string
		if cmdPrefix == "" {
			fixableFlagName = "fixable"
		} else {
			fixableFlagName = fmt.Sprintf("%v.fixable", cmdPrefix)
		}

		fixableFlagValue, err := cmd.Flags().GetInt64(fixableFlagName)
		if err != nil {
			return err, false
		}
		m.Fixable = fixableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveVulnerabilitySummarySummaryFlags(depth int, m *models.VulnerabilitySummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	summaryFlagName := fmt.Sprintf("%v.summary", cmdPrefix)
	if cmd.Flags().Changed(summaryFlagName) {
		// warning: summary map type map[string]int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveVulnerabilitySummaryTotalFlags(depth int, m *models.VulnerabilitySummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt64(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
