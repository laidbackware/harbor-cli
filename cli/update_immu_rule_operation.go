// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/immutable"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationImmutableUpdateImmuRuleCmd returns a cmd to handle operation updateImmuRule
func makeOperationImmutableUpdateImmuRuleCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "UpdateImmuRule",
		Short: ``,
		RunE:  runOperationImmutableUpdateImmuRule,
	}

	if err := registerOperationImmutableUpdateImmuRuleParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationImmutableUpdateImmuRule uses cmd flags to call endpoint api
func runOperationImmutableUpdateImmuRule(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := immutable.NewUpdateImmuRuleParams()
	if err, _ := retrieveOperationImmutableUpdateImmuRuleImmutableRuleFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImmutableUpdateImmuRuleXIsResourceNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImmutableUpdateImmuRuleXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImmutableUpdateImmuRuleImmutableRuleIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationImmutableUpdateImmuRuleProjectNameOrIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationImmutableUpdateImmuRuleResult(appCli.Immutable.UpdateImmuRule(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationImmutableUpdateImmuRuleParamFlags registers all flags needed to fill params
func registerOperationImmutableUpdateImmuRuleParamFlags(cmd *cobra.Command) error {
	if err := registerOperationImmutableUpdateImmuRuleImmutableRuleParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImmutableUpdateImmuRuleXIsResourceNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImmutableUpdateImmuRuleXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImmutableUpdateImmuRuleImmutableRuleIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationImmutableUpdateImmuRuleProjectNameOrIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationImmutableUpdateImmuRuleImmutableRuleParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var immutableRuleFlagName string
	if cmdPrefix == "" {
		immutableRuleFlagName = "ImmutableRule"
	} else {
		immutableRuleFlagName = fmt.Sprintf("%v.ImmutableRule", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(immutableRuleFlagName, "", "Optional json string for [ImmutableRule]. ")

	// add flags for body
	if err := registerModelImmutableRuleFlags(0, "immutableRule", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationImmutableUpdateImmuRuleXIsResourceNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xIsResourceNameDescription := `The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.`

	var xIsResourceNameFlagName string
	if cmdPrefix == "" {
		xIsResourceNameFlagName = "X-Is-Resource-Name"
	} else {
		xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
	}

	var xIsResourceNameFlagDefault bool

	_ = cmd.PersistentFlags().Bool(xIsResourceNameFlagName, xIsResourceNameFlagDefault, xIsResourceNameDescription)

	return nil
}
func registerOperationImmutableUpdateImmuRuleXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationImmutableUpdateImmuRuleImmutableRuleIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	immutableRuleIdDescription := `Required. The ID of the immutable rule`

	var immutableRuleIdFlagName string
	if cmdPrefix == "" {
		immutableRuleIdFlagName = "immutable_rule_id"
	} else {
		immutableRuleIdFlagName = fmt.Sprintf("%v.immutable_rule_id", cmdPrefix)
	}

	var immutableRuleIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(immutableRuleIdFlagName, immutableRuleIdFlagDefault, immutableRuleIdDescription)

	return nil
}
func registerOperationImmutableUpdateImmuRuleProjectNameOrIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameOrIdDescription := `Required. The name or id of the project`

	var projectNameOrIdFlagName string
	if cmdPrefix == "" {
		projectNameOrIdFlagName = "project_name_or_id"
	} else {
		projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
	}

	var projectNameOrIdFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameOrIdFlagName, projectNameOrIdFlagDefault, projectNameOrIdDescription)

	return nil
}

func retrieveOperationImmutableUpdateImmuRuleImmutableRuleFlag(m *immutable.UpdateImmuRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("ImmutableRule") {
		// Read ImmutableRule string from cmd and unmarshal
		immutableRuleValueStr, err := cmd.Flags().GetString("ImmutableRule")
		if err != nil {
			return err, false
		}

		immutableRuleValue := models.ImmutableRule{}
		if err := json.Unmarshal([]byte(immutableRuleValueStr), &immutableRuleValue); err != nil {
			return fmt.Errorf("cannot unmarshal ImmutableRule string in models.ImmutableRule: %v", err), false
		}
		m.ImmutableRule = &immutableRuleValue
	}
	immutableRuleValueModel := m.ImmutableRule
	if swag.IsZero(immutableRuleValueModel) {
		immutableRuleValueModel = &models.ImmutableRule{}
	}
	err, added := retrieveModelImmutableRuleFlags(0, immutableRuleValueModel, "immutableRule", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ImmutableRule = immutableRuleValueModel
	}
	if dryRun && debug {

		immutableRuleValueDebugBytes, err := json.Marshal(m.ImmutableRule)
		if err != nil {
			return err, false
		}
		logDebugf("ImmutableRule dry-run payload: %v", string(immutableRuleValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationImmutableUpdateImmuRuleXIsResourceNameFlag(m *immutable.UpdateImmuRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Is-Resource-Name") {

		var xIsResourceNameFlagName string
		if cmdPrefix == "" {
			xIsResourceNameFlagName = "X-Is-Resource-Name"
		} else {
			xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
		}

		xIsResourceNameFlagValue, err := cmd.Flags().GetBool(xIsResourceNameFlagName)
		if err != nil {
			return err, false
		}
		m.XIsResourceName = &xIsResourceNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImmutableUpdateImmuRuleXRequestIDFlag(m *immutable.UpdateImmuRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImmutableUpdateImmuRuleImmutableRuleIDFlag(m *immutable.UpdateImmuRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("immutable_rule_id") {

		var immutableRuleIdFlagName string
		if cmdPrefix == "" {
			immutableRuleIdFlagName = "immutable_rule_id"
		} else {
			immutableRuleIdFlagName = fmt.Sprintf("%v.immutable_rule_id", cmdPrefix)
		}

		immutableRuleIdFlagValue, err := cmd.Flags().GetInt64(immutableRuleIdFlagName)
		if err != nil {
			return err, false
		}
		m.ImmutableRuleID = immutableRuleIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationImmutableUpdateImmuRuleProjectNameOrIDFlag(m *immutable.UpdateImmuRuleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name_or_id") {

		var projectNameOrIdFlagName string
		if cmdPrefix == "" {
			projectNameOrIdFlagName = "project_name_or_id"
		} else {
			projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
		}

		projectNameOrIdFlagValue, err := cmd.Flags().GetString(projectNameOrIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectNameOrID = projectNameOrIdFlagValue

	}
	return nil, retAdded
}

// parseOperationImmutableUpdateImmuRuleResult parses request result and return the string content
func parseOperationImmutableUpdateImmuRuleResult(resp0 *immutable.UpdateImmuRuleOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateImmuRuleOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*immutable.UpdateImmuRuleBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*immutable.UpdateImmuRuleUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*immutable.UpdateImmuRuleForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*immutable.UpdateImmuRuleInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateImmuRuleOK is not supported by go-swagger cli yet.

	return "", nil
}
