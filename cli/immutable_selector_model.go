// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ImmutableSelector

// register flags to command
func registerModelImmutableSelectorFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerImmutableSelectorDecoration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImmutableSelectorExtras(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImmutableSelectorKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerImmutableSelectorPattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerImmutableSelectorDecoration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	decorationDescription := ``

	var decorationFlagName string
	if cmdPrefix == "" {
		decorationFlagName = "decoration"
	} else {
		decorationFlagName = fmt.Sprintf("%v.decoration", cmdPrefix)
	}

	var decorationFlagDefault string

	_ = cmd.PersistentFlags().String(decorationFlagName, decorationFlagDefault, decorationDescription)

	return nil
}

func registerImmutableSelectorExtras(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	extrasDescription := ``

	var extrasFlagName string
	if cmdPrefix == "" {
		extrasFlagName = "extras"
	} else {
		extrasFlagName = fmt.Sprintf("%v.extras", cmdPrefix)
	}

	var extrasFlagDefault string

	_ = cmd.PersistentFlags().String(extrasFlagName, extrasFlagDefault, extrasDescription)

	return nil
}

func registerImmutableSelectorKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := ``

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

func registerImmutableSelectorPattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	patternDescription := ``

	var patternFlagName string
	if cmdPrefix == "" {
		patternFlagName = "pattern"
	} else {
		patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
	}

	var patternFlagDefault string

	_ = cmd.PersistentFlags().String(patternFlagName, patternFlagDefault, patternDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelImmutableSelectorFlags(depth int, m *models.ImmutableSelector, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, decorationAdded := retrieveImmutableSelectorDecorationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || decorationAdded

	err, extrasAdded := retrieveImmutableSelectorExtrasFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extrasAdded

	err, kindAdded := retrieveImmutableSelectorKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, patternAdded := retrieveImmutableSelectorPatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || patternAdded

	return nil, retAdded
}

func retrieveImmutableSelectorDecorationFlags(depth int, m *models.ImmutableSelector, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	decorationFlagName := fmt.Sprintf("%v.decoration", cmdPrefix)
	if cmd.Flags().Changed(decorationFlagName) {

		var decorationFlagName string
		if cmdPrefix == "" {
			decorationFlagName = "decoration"
		} else {
			decorationFlagName = fmt.Sprintf("%v.decoration", cmdPrefix)
		}

		decorationFlagValue, err := cmd.Flags().GetString(decorationFlagName)
		if err != nil {
			return err, false
		}
		m.Decoration = decorationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImmutableSelectorExtrasFlags(depth int, m *models.ImmutableSelector, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extrasFlagName := fmt.Sprintf("%v.extras", cmdPrefix)
	if cmd.Flags().Changed(extrasFlagName) {

		var extrasFlagName string
		if cmdPrefix == "" {
			extrasFlagName = "extras"
		} else {
			extrasFlagName = fmt.Sprintf("%v.extras", cmdPrefix)
		}

		extrasFlagValue, err := cmd.Flags().GetString(extrasFlagName)
		if err != nil {
			return err, false
		}
		m.Extras = extrasFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImmutableSelectorKindFlags(depth int, m *models.ImmutableSelector, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveImmutableSelectorPatternFlags(depth int, m *models.ImmutableSelector, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	patternFlagName := fmt.Sprintf("%v.pattern", cmdPrefix)
	if cmd.Flags().Changed(patternFlagName) {

		var patternFlagName string
		if cmdPrefix == "" {
			patternFlagName = "pattern"
		} else {
			patternFlagName = fmt.Sprintf("%v.pattern", cmdPrefix)
		}

		patternFlagValue, err := cmd.Flags().GetString(patternFlagName)
		if err != nil {
			return err, false
		}
		m.Pattern = patternFlagValue

		retAdded = true
	}

	return nil, retAdded
}
