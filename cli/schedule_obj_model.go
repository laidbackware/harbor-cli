// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ScheduleObj

// register flags to command
func registerModelScheduleObjFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScheduleObjCron(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScheduleObjType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScheduleObjCron(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cronDescription := `A cron expression, a time-based job scheduler.`

	var cronFlagName string
	if cmdPrefix == "" {
		cronFlagName = "cron"
	} else {
		cronFlagName = fmt.Sprintf("%v.cron", cmdPrefix)
	}

	var cronFlagDefault string

	_ = cmd.PersistentFlags().String(cronFlagName, cronFlagDefault, cronDescription)

	return nil
}

func registerScheduleObjType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `Enum: ["Hourly","Daily","Weekly","Custom","Manual","None"]. The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.
'Manual' means to trigger it right away and 'None' means to cancel the schedule.
`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	if err := cmd.RegisterFlagCompletionFunc(typeFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Hourly","Daily","Weekly","Custom","Manual","None"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScheduleObjFlags(depth int, m *models.ScheduleObj, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cronAdded := retrieveScheduleObjCronFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cronAdded

	err, typeAdded := retrieveScheduleObjTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveScheduleObjCronFlags(depth int, m *models.ScheduleObj, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cronFlagName := fmt.Sprintf("%v.cron", cmdPrefix)
	if cmd.Flags().Changed(cronFlagName) {

		var cronFlagName string
		if cmdPrefix == "" {
			cronFlagName = "cron"
		} else {
			cronFlagName = fmt.Sprintf("%v.cron", cmdPrefix)
		}

		cronFlagValue, err := cmd.Flags().GetString(cronFlagName)
		if err != nil {
			return err, false
		}
		m.Cron = cronFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScheduleObjTypeFlags(depth int, m *models.ScheduleObj, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
