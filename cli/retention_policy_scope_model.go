// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionPolicyScope

// register flags to command
func registerModelRetentionPolicyScopeFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionPolicyScopeLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionPolicyScopeRef(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionPolicyScopeLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	levelDescription := ``

	var levelFlagName string
	if cmdPrefix == "" {
		levelFlagName = "level"
	} else {
		levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
	}

	var levelFlagDefault string

	_ = cmd.PersistentFlags().String(levelFlagName, levelFlagDefault, levelDescription)

	return nil
}

func registerRetentionPolicyScopeRef(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	refDescription := ``

	var refFlagName string
	if cmdPrefix == "" {
		refFlagName = "ref"
	} else {
		refFlagName = fmt.Sprintf("%v.ref", cmdPrefix)
	}

	var refFlagDefault int64

	_ = cmd.PersistentFlags().Int64(refFlagName, refFlagDefault, refDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionPolicyScopeFlags(depth int, m *models.RetentionPolicyScope, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, levelAdded := retrieveRetentionPolicyScopeLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || levelAdded

	err, refAdded := retrieveRetentionPolicyScopeRefFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || refAdded

	return nil, retAdded
}

func retrieveRetentionPolicyScopeLevelFlags(depth int, m *models.RetentionPolicyScope, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	levelFlagName := fmt.Sprintf("%v.level", cmdPrefix)
	if cmd.Flags().Changed(levelFlagName) {

		var levelFlagName string
		if cmdPrefix == "" {
			levelFlagName = "level"
		} else {
			levelFlagName = fmt.Sprintf("%v.level", cmdPrefix)
		}

		levelFlagValue, err := cmd.Flags().GetString(levelFlagName)
		if err != nil {
			return err, false
		}
		m.Level = levelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionPolicyScopeRefFlags(depth int, m *models.RetentionPolicyScope, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	refFlagName := fmt.Sprintf("%v.ref", cmdPrefix)
	if cmd.Flags().Changed(refFlagName) {

		var refFlagName string
		if cmdPrefix == "" {
			refFlagName = "ref"
		} else {
			refFlagName = fmt.Sprintf("%v.ref", cmdPrefix)
		}

		refFlagValue, err := cmd.Flags().GetInt64(refFlagName)
		if err != nil {
			return err, false
		}
		m.Ref = refFlagValue

		retAdded = true
	}

	return nil, retAdded
}
