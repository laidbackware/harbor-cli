// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/project"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationProjectCreateProjectCmd returns a cmd to handle operation createProject
func makeOperationProjectCreateProjectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createProject",
		Short: `This endpoint is for user to create a new project.`,
		RunE:  runOperationProjectCreateProject,
	}

	if err := registerOperationProjectCreateProjectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationProjectCreateProject uses cmd flags to call endpoint api
func runOperationProjectCreateProject(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := project.NewCreateProjectParams()
	if err, _ := retrieveOperationProjectCreateProjectXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationProjectCreateProjectXResourceNameInLocationFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationProjectCreateProjectProjectFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationProjectCreateProjectResult(appCli.Project.CreateProject(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationProjectCreateProjectParamFlags registers all flags needed to fill params
func registerOperationProjectCreateProjectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationProjectCreateProjectXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationProjectCreateProjectXResourceNameInLocationParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationProjectCreateProjectProjectParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationProjectCreateProjectXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationProjectCreateProjectXResourceNameInLocationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xResourceNameInLocationDescription := `The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.`

	var xResourceNameInLocationFlagName string
	if cmdPrefix == "" {
		xResourceNameInLocationFlagName = "X-Resource-Name-In-Location"
	} else {
		xResourceNameInLocationFlagName = fmt.Sprintf("%v.X-Resource-Name-In-Location", cmdPrefix)
	}

	var xResourceNameInLocationFlagDefault bool

	_ = cmd.PersistentFlags().Bool(xResourceNameInLocationFlagName, xResourceNameInLocationFlagDefault, xResourceNameInLocationDescription)

	return nil
}
func registerOperationProjectCreateProjectProjectParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var projectFlagName string
	if cmdPrefix == "" {
		projectFlagName = "project"
	} else {
		projectFlagName = fmt.Sprintf("%v.project", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(projectFlagName, "", "Optional json string for [project]. New created project.")

	// add flags for body
	if err := registerModelProjectReqFlags(0, "projectReq", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationProjectCreateProjectXRequestIDFlag(m *project.CreateProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationProjectCreateProjectXResourceNameInLocationFlag(m *project.CreateProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Resource-Name-In-Location") {

		var xResourceNameInLocationFlagName string
		if cmdPrefix == "" {
			xResourceNameInLocationFlagName = "X-Resource-Name-In-Location"
		} else {
			xResourceNameInLocationFlagName = fmt.Sprintf("%v.X-Resource-Name-In-Location", cmdPrefix)
		}

		xResourceNameInLocationFlagValue, err := cmd.Flags().GetBool(xResourceNameInLocationFlagName)
		if err != nil {
			return err, false
		}
		m.XResourceNameInLocation = &xResourceNameInLocationFlagValue

	}
	return nil, retAdded
}
func retrieveOperationProjectCreateProjectProjectFlag(m *project.CreateProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project") {
		// Read project string from cmd and unmarshal
		projectValueStr, err := cmd.Flags().GetString("project")
		if err != nil {
			return err, false
		}

		projectValue := models.ProjectReq{}
		if err := json.Unmarshal([]byte(projectValueStr), &projectValue); err != nil {
			return fmt.Errorf("cannot unmarshal project string in models.ProjectReq: %v", err), false
		}
		m.Project = &projectValue
	}
	projectValueModel := m.Project
	if swag.IsZero(projectValueModel) {
		projectValueModel = &models.ProjectReq{}
	}
	err, added := retrieveModelProjectReqFlags(0, projectValueModel, "projectReq", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Project = projectValueModel
	}
	if dryRun && debug {

		projectValueDebugBytes, err := json.Marshal(m.Project)
		if err != nil {
			return err, false
		}
		logDebugf("Project dry-run payload: %v", string(projectValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationProjectCreateProjectResult parses request result and return the string content
func parseOperationProjectCreateProjectResult(resp0 *project.CreateProjectCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createProjectCreated is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*project.CreateProjectBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*project.CreateProjectUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*project.CreateProjectConflict)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*project.CreateProjectInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createProjectCreated is not supported by go-swagger cli yet.

	return "", nil
}
