// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for RegistryProviderInfo

// register flags to command
func registerModelRegistryProviderInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistryProviderInfoCredentialPattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryProviderInfoEndpointPattern(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryProviderInfoCredentialPattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var credentialPatternFlagName string
	if cmdPrefix == "" {
		credentialPatternFlagName = "credential_pattern"
	} else {
		credentialPatternFlagName = fmt.Sprintf("%v.credential_pattern", cmdPrefix)
	}

	if err := registerModelRegistryProviderCredentialPatternFlags(depth+1, credentialPatternFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryProviderInfoEndpointPattern(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var endpointPatternFlagName string
	if cmdPrefix == "" {
		endpointPatternFlagName = "endpoint_pattern"
	} else {
		endpointPatternFlagName = fmt.Sprintf("%v.endpoint_pattern", cmdPrefix)
	}

	if err := registerModelRegistryProviderEndpointPatternFlags(depth+1, endpointPatternFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistryProviderInfoFlags(depth int, m *models.RegistryProviderInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, credentialPatternAdded := retrieveRegistryProviderInfoCredentialPatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialPatternAdded

	err, endpointPatternAdded := retrieveRegistryProviderInfoEndpointPatternFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointPatternAdded

	return nil, retAdded
}

func retrieveRegistryProviderInfoCredentialPatternFlags(depth int, m *models.RegistryProviderInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialPatternFlagName := fmt.Sprintf("%v.credential_pattern", cmdPrefix)
	if cmd.Flags().Changed(credentialPatternFlagName) {
		// info: complex object credential_pattern RegistryProviderCredentialPattern is retrieved outside this Changed() block
	}
	credentialPatternFlagValue := m.CredentialPattern
	if swag.IsZero(credentialPatternFlagValue) {
		credentialPatternFlagValue = &models.RegistryProviderCredentialPattern{}
	}

	err, credentialPatternAdded := retrieveModelRegistryProviderCredentialPatternFlags(depth+1, credentialPatternFlagValue, credentialPatternFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialPatternAdded
	if credentialPatternAdded {
		m.CredentialPattern = credentialPatternFlagValue
	}

	return nil, retAdded
}

func retrieveRegistryProviderInfoEndpointPatternFlags(depth int, m *models.RegistryProviderInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointPatternFlagName := fmt.Sprintf("%v.endpoint_pattern", cmdPrefix)
	if cmd.Flags().Changed(endpointPatternFlagName) {
		// info: complex object endpoint_pattern RegistryProviderEndpointPattern is retrieved outside this Changed() block
	}
	endpointPatternFlagValue := m.EndpointPattern
	if swag.IsZero(endpointPatternFlagValue) {
		endpointPatternFlagValue = &models.RegistryProviderEndpointPattern{}
	}

	err, endpointPatternAdded := retrieveModelRegistryProviderEndpointPatternFlags(depth+1, endpointPatternFlagValue, endpointPatternFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointPatternAdded
	if endpointPatternAdded {
		m.EndpointPattern = endpointPatternFlagValue
	}

	return nil, retAdded
}
