// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionRule

// register flags to command
func registerModelRetentionRuleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionRuleAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleDisabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRulePriority(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleScopeSelectors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleTagSelectors(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionRuleAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := ``

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

func registerRetentionRuleDisabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	disabledDescription := ``

	var disabledFlagName string
	if cmdPrefix == "" {
		disabledFlagName = "disabled"
	} else {
		disabledFlagName = fmt.Sprintf("%v.disabled", cmdPrefix)
	}

	var disabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(disabledFlagName, disabledFlagDefault, disabledDescription)

	return nil
}

func registerRetentionRuleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRetentionRuleParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: params map[string]interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionRulePriority(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	priorityDescription := ``

	var priorityFlagName string
	if cmdPrefix == "" {
		priorityFlagName = "priority"
	} else {
		priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
	}

	var priorityFlagDefault int64

	_ = cmd.PersistentFlags().Int64(priorityFlagName, priorityFlagDefault, priorityDescription)

	return nil
}

func registerRetentionRuleScopeSelectors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: scope_selectors map[string][]RetentionSelector map type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionRuleTagSelectors(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tag_selectors []*RetentionSelector array type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionRuleTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	templateDescription := ``

	var templateFlagName string
	if cmdPrefix == "" {
		templateFlagName = "template"
	} else {
		templateFlagName = fmt.Sprintf("%v.template", cmdPrefix)
	}

	var templateFlagDefault string

	_ = cmd.PersistentFlags().String(templateFlagName, templateFlagDefault, templateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionRuleFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveRetentionRuleActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, disabledAdded := retrieveRetentionRuleDisabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || disabledAdded

	err, idAdded := retrieveRetentionRuleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, paramsAdded := retrieveRetentionRuleParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || paramsAdded

	err, priorityAdded := retrieveRetentionRulePriorityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || priorityAdded

	err, scopeSelectorsAdded := retrieveRetentionRuleScopeSelectorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeSelectorsAdded

	err, tagSelectorsAdded := retrieveRetentionRuleTagSelectorsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tagSelectorsAdded

	err, templateAdded := retrieveRetentionRuleTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || templateAdded

	return nil, retAdded
}

func retrieveRetentionRuleActionFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleDisabledFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	disabledFlagName := fmt.Sprintf("%v.disabled", cmdPrefix)
	if cmd.Flags().Changed(disabledFlagName) {

		var disabledFlagName string
		if cmdPrefix == "" {
			disabledFlagName = "disabled"
		} else {
			disabledFlagName = fmt.Sprintf("%v.disabled", cmdPrefix)
		}

		disabledFlagValue, err := cmd.Flags().GetBool(disabledFlagName)
		if err != nil {
			return err, false
		}
		m.Disabled = disabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleIDFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleParamsFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	paramsFlagName := fmt.Sprintf("%v.params", cmdPrefix)
	if cmd.Flags().Changed(paramsFlagName) {
		// warning: params map type map[string]interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionRulePriorityFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	priorityFlagName := fmt.Sprintf("%v.priority", cmdPrefix)
	if cmd.Flags().Changed(priorityFlagName) {

		var priorityFlagName string
		if cmdPrefix == "" {
			priorityFlagName = "priority"
		} else {
			priorityFlagName = fmt.Sprintf("%v.priority", cmdPrefix)
		}

		priorityFlagValue, err := cmd.Flags().GetInt64(priorityFlagName)
		if err != nil {
			return err, false
		}
		m.Priority = priorityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleScopeSelectorsFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeSelectorsFlagName := fmt.Sprintf("%v.scope_selectors", cmdPrefix)
	if cmd.Flags().Changed(scopeSelectorsFlagName) {
		// warning: scope_selectors map type map[string][]RetentionSelector is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionRuleTagSelectorsFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tagSelectorsFlagName := fmt.Sprintf("%v.tag_selectors", cmdPrefix)
	if cmd.Flags().Changed(tagSelectorsFlagName) {
		// warning: tag_selectors array type []*RetentionSelector is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionRuleTemplateFlags(depth int, m *models.RetentionRule, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	templateFlagName := fmt.Sprintf("%v.template", cmdPrefix)
	if cmd.Flags().Changed(templateFlagName) {

		var templateFlagName string
		if cmdPrefix == "" {
			templateFlagName = "template"
		} else {
			templateFlagName = fmt.Sprintf("%v.template", cmdPrefix)
		}

		templateFlagValue, err := cmd.Flags().GetString(templateFlagName)
		if err != nil {
			return err, false
		}
		m.Template = templateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
