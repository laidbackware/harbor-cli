// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/ldap"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationLdapSearchLdapGroupCmd returns a cmd to handle operation searchLdapGroup
func makeOperationLdapSearchLdapGroupCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "searchLdapGroup",
		Short: `This endpoint searches the available ldap groups based on related configuration parameters. support to search by groupname or groupdn.
`,
		RunE: runOperationLdapSearchLdapGroup,
	}

	if err := registerOperationLdapSearchLdapGroupParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationLdapSearchLdapGroup uses cmd flags to call endpoint api
func runOperationLdapSearchLdapGroup(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ldap.NewSearchLdapGroupParams()
	if err, _ := retrieveOperationLdapSearchLdapGroupXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationLdapSearchLdapGroupGroupdnFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationLdapSearchLdapGroupGroupnameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationLdapSearchLdapGroupResult(appCli.Ldap.SearchLdapGroup(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationLdapSearchLdapGroupParamFlags registers all flags needed to fill params
func registerOperationLdapSearchLdapGroupParamFlags(cmd *cobra.Command) error {
	if err := registerOperationLdapSearchLdapGroupXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationLdapSearchLdapGroupGroupdnParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationLdapSearchLdapGroupGroupnameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationLdapSearchLdapGroupXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationLdapSearchLdapGroupGroupdnParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	groupdnDescription := `The LDAP group DN`

	var groupdnFlagName string
	if cmdPrefix == "" {
		groupdnFlagName = "groupdn"
	} else {
		groupdnFlagName = fmt.Sprintf("%v.groupdn", cmdPrefix)
	}

	var groupdnFlagDefault string

	_ = cmd.PersistentFlags().String(groupdnFlagName, groupdnFlagDefault, groupdnDescription)

	return nil
}
func registerOperationLdapSearchLdapGroupGroupnameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	groupnameDescription := `Ldap group name`

	var groupnameFlagName string
	if cmdPrefix == "" {
		groupnameFlagName = "groupname"
	} else {
		groupnameFlagName = fmt.Sprintf("%v.groupname", cmdPrefix)
	}

	var groupnameFlagDefault string

	_ = cmd.PersistentFlags().String(groupnameFlagName, groupnameFlagDefault, groupnameDescription)

	return nil
}

func retrieveOperationLdapSearchLdapGroupXRequestIDFlag(m *ldap.SearchLdapGroupParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationLdapSearchLdapGroupGroupdnFlag(m *ldap.SearchLdapGroupParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("groupdn") {

		var groupdnFlagName string
		if cmdPrefix == "" {
			groupdnFlagName = "groupdn"
		} else {
			groupdnFlagName = fmt.Sprintf("%v.groupdn", cmdPrefix)
		}

		groupdnFlagValue, err := cmd.Flags().GetString(groupdnFlagName)
		if err != nil {
			return err, false
		}
		m.Groupdn = &groupdnFlagValue

	}
	return nil, retAdded
}
func retrieveOperationLdapSearchLdapGroupGroupnameFlag(m *ldap.SearchLdapGroupParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("groupname") {

		var groupnameFlagName string
		if cmdPrefix == "" {
			groupnameFlagName = "groupname"
		} else {
			groupnameFlagName = fmt.Sprintf("%v.groupname", cmdPrefix)
		}

		groupnameFlagValue, err := cmd.Flags().GetString(groupnameFlagName)
		if err != nil {
			return err, false
		}
		m.Groupname = &groupnameFlagValue

	}
	return nil, retAdded
}

// parseOperationLdapSearchLdapGroupResult parses request result and return the string content
func parseOperationLdapSearchLdapGroupResult(resp0 *ldap.SearchLdapGroupOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*ldap.SearchLdapGroupOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*ldap.SearchLdapGroupBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*ldap.SearchLdapGroupUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*ldap.SearchLdapGroupForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*ldap.SearchLdapGroupInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
