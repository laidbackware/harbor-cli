// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for NativeReportSummary

// register flags to command
func registerModelNativeReportSummaryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerNativeReportSummaryCompletePercent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryReportID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryScanStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryScanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummarySeverity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummaryStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerNativeReportSummarySummary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerNativeReportSummaryCompletePercent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	completePercentDescription := `The complete percent of the scanning which value is between 0 and 100`

	var completePercentFlagName string
	if cmdPrefix == "" {
		completePercentFlagName = "complete_percent"
	} else {
		completePercentFlagName = fmt.Sprintf("%v.complete_percent", cmdPrefix)
	}

	var completePercentFlagDefault int64

	_ = cmd.PersistentFlags().Int64(completePercentFlagName, completePercentFlagDefault, completePercentDescription)

	return nil
}

func registerNativeReportSummaryDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	durationDescription := `The seconds spent for generating the report`

	var durationFlagName string
	if cmdPrefix == "" {
		durationFlagName = "duration"
	} else {
		durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
	}

	var durationFlagDefault int64

	_ = cmd.PersistentFlags().Int64(durationFlagName, durationFlagDefault, durationDescription)

	return nil
}

func registerNativeReportSummaryEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := `The end time of the scan process that generating report`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "end_time"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endTimeFlagName, "", endTimeDescription)

	return nil
}

func registerNativeReportSummaryReportID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	reportIdDescription := `id of the native scan report`

	var reportIdFlagName string
	if cmdPrefix == "" {
		reportIdFlagName = "report_id"
	} else {
		reportIdFlagName = fmt.Sprintf("%v.report_id", cmdPrefix)
	}

	var reportIdFlagDefault string

	_ = cmd.PersistentFlags().String(reportIdFlagName, reportIdFlagDefault, reportIdDescription)

	return nil
}

func registerNativeReportSummaryScanStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scanStatusDescription := `The status of the report generating process`

	var scanStatusFlagName string
	if cmdPrefix == "" {
		scanStatusFlagName = "scan_status"
	} else {
		scanStatusFlagName = fmt.Sprintf("%v.scan_status", cmdPrefix)
	}

	var scanStatusFlagDefault string

	_ = cmd.PersistentFlags().String(scanStatusFlagName, scanStatusFlagDefault, scanStatusDescription)

	return nil
}

func registerNativeReportSummaryScanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scannerFlagName string
	if cmdPrefix == "" {
		scannerFlagName = "scanner"
	} else {
		scannerFlagName = fmt.Sprintf("%v.scanner", cmdPrefix)
	}

	if err := registerModelScannerFlags(depth+1, scannerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerNativeReportSummarySeverity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	severityDescription := `The overall severity`

	var severityFlagName string
	if cmdPrefix == "" {
		severityFlagName = "severity"
	} else {
		severityFlagName = fmt.Sprintf("%v.severity", cmdPrefix)
	}

	var severityFlagDefault string

	_ = cmd.PersistentFlags().String(severityFlagName, severityFlagDefault, severityDescription)

	return nil
}

func registerNativeReportSummaryStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `The start time of the scan process that generating report`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "start_time"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimeFlagName, "", startTimeDescription)

	return nil
}

func registerNativeReportSummarySummary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var summaryFlagName string
	if cmdPrefix == "" {
		summaryFlagName = "summary"
	} else {
		summaryFlagName = fmt.Sprintf("%v.summary", cmdPrefix)
	}

	if err := registerModelVulnerabilitySummaryFlags(depth+1, summaryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelNativeReportSummaryFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completePercentAdded := retrieveNativeReportSummaryCompletePercentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completePercentAdded

	err, durationAdded := retrieveNativeReportSummaryDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || durationAdded

	err, endTimeAdded := retrieveNativeReportSummaryEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, reportIdAdded := retrieveNativeReportSummaryReportIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || reportIdAdded

	err, scanStatusAdded := retrieveNativeReportSummaryScanStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scanStatusAdded

	err, scannerAdded := retrieveNativeReportSummaryScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded

	err, severityAdded := retrieveNativeReportSummarySeverityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || severityAdded

	err, startTimeAdded := retrieveNativeReportSummaryStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, summaryAdded := retrieveNativeReportSummarySummaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || summaryAdded

	return nil, retAdded
}

func retrieveNativeReportSummaryCompletePercentFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completePercentFlagName := fmt.Sprintf("%v.complete_percent", cmdPrefix)
	if cmd.Flags().Changed(completePercentFlagName) {

		var completePercentFlagName string
		if cmdPrefix == "" {
			completePercentFlagName = "complete_percent"
		} else {
			completePercentFlagName = fmt.Sprintf("%v.complete_percent", cmdPrefix)
		}

		completePercentFlagValue, err := cmd.Flags().GetInt64(completePercentFlagName)
		if err != nil {
			return err, false
		}
		m.CompletePercent = completePercentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryDurationFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	durationFlagName := fmt.Sprintf("%v.duration", cmdPrefix)
	if cmd.Flags().Changed(durationFlagName) {

		var durationFlagName string
		if cmdPrefix == "" {
			durationFlagName = "duration"
		} else {
			durationFlagName = fmt.Sprintf("%v.duration", cmdPrefix)
		}

		durationFlagValue, err := cmd.Flags().GetInt64(durationFlagName)
		if err != nil {
			return err, false
		}
		m.Duration = durationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryEndTimeFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.end_time", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "end_time"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
		}

		endTimeFlagValueStr, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		var endTimeFlagValue strfmt.DateTime
		if err := endTimeFlagValue.UnmarshalText([]byte(endTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryReportIDFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	reportIdFlagName := fmt.Sprintf("%v.report_id", cmdPrefix)
	if cmd.Flags().Changed(reportIdFlagName) {

		var reportIdFlagName string
		if cmdPrefix == "" {
			reportIdFlagName = "report_id"
		} else {
			reportIdFlagName = fmt.Sprintf("%v.report_id", cmdPrefix)
		}

		reportIdFlagValue, err := cmd.Flags().GetString(reportIdFlagName)
		if err != nil {
			return err, false
		}
		m.ReportID = reportIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryScanStatusFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scanStatusFlagName := fmt.Sprintf("%v.scan_status", cmdPrefix)
	if cmd.Flags().Changed(scanStatusFlagName) {

		var scanStatusFlagName string
		if cmdPrefix == "" {
			scanStatusFlagName = "scan_status"
		} else {
			scanStatusFlagName = fmt.Sprintf("%v.scan_status", cmdPrefix)
		}

		scanStatusFlagValue, err := cmd.Flags().GetString(scanStatusFlagName)
		if err != nil {
			return err, false
		}
		m.ScanStatus = scanStatusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryScannerFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scannerFlagName := fmt.Sprintf("%v.scanner", cmdPrefix)
	if cmd.Flags().Changed(scannerFlagName) {
		// info: complex object scanner Scanner is retrieved outside this Changed() block
	}
	scannerFlagValue := m.Scanner
	if swag.IsZero(scannerFlagValue) {
		scannerFlagValue = &models.Scanner{}
	}

	err, scannerAdded := retrieveModelScannerFlags(depth+1, scannerFlagValue, scannerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded
	if scannerAdded {
		m.Scanner = scannerFlagValue
	}

	return nil, retAdded
}

func retrieveNativeReportSummarySeverityFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	severityFlagName := fmt.Sprintf("%v.severity", cmdPrefix)
	if cmd.Flags().Changed(severityFlagName) {

		var severityFlagName string
		if cmdPrefix == "" {
			severityFlagName = "severity"
		} else {
			severityFlagName = fmt.Sprintf("%v.severity", cmdPrefix)
		}

		severityFlagValue, err := cmd.Flags().GetString(severityFlagName)
		if err != nil {
			return err, false
		}
		m.Severity = severityFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummaryStartTimeFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "start_time"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		startTimeFlagValueStr, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		var startTimeFlagValue strfmt.DateTime
		if err := startTimeFlagValue.UnmarshalText([]byte(startTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveNativeReportSummarySummaryFlags(depth int, m *models.NativeReportSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	summaryFlagName := fmt.Sprintf("%v.summary", cmdPrefix)
	if cmd.Flags().Changed(summaryFlagName) {
		// info: complex object summary VulnerabilitySummary is retrieved outside this Changed() block
	}
	summaryFlagValue := m.Summary
	if swag.IsZero(summaryFlagValue) {
		summaryFlagValue = &models.VulnerabilitySummary{}
	}

	err, summaryAdded := retrieveModelVulnerabilitySummaryFlags(depth+1, summaryFlagValue, summaryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || summaryAdded
	if summaryAdded {
		m.Summary = summaryFlagValue
	}

	return nil, retAdded
}
