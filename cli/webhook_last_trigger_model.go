// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhookLastTrigger

// register flags to command
func registerModelWebhookLastTriggerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhookLastTriggerCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookLastTriggerEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookLastTriggerEventType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookLastTriggerLastTriggerTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookLastTriggerPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhookLastTriggerCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The creation time of webhook policy.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerWebhookLastTriggerEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Whether or not the webhook policy enabled.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerWebhookLastTriggerEventType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	eventTypeDescription := `The webhook event type.`

	var eventTypeFlagName string
	if cmdPrefix == "" {
		eventTypeFlagName = "event_type"
	} else {
		eventTypeFlagName = fmt.Sprintf("%v.event_type", cmdPrefix)
	}

	var eventTypeFlagDefault string

	_ = cmd.PersistentFlags().String(eventTypeFlagName, eventTypeFlagDefault, eventTypeDescription)

	return nil
}

func registerWebhookLastTriggerLastTriggerTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	lastTriggerTimeDescription := `The last trigger time of webhook policy.`

	var lastTriggerTimeFlagName string
	if cmdPrefix == "" {
		lastTriggerTimeFlagName = "last_trigger_time"
	} else {
		lastTriggerTimeFlagName = fmt.Sprintf("%v.last_trigger_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(lastTriggerTimeFlagName, "", lastTriggerTimeDescription)

	return nil
}

func registerWebhookLastTriggerPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyNameDescription := `The webhook policy name.`

	var policyNameFlagName string
	if cmdPrefix == "" {
		policyNameFlagName = "policy_name"
	} else {
		policyNameFlagName = fmt.Sprintf("%v.policy_name", cmdPrefix)
	}

	var policyNameFlagDefault string

	_ = cmd.PersistentFlags().String(policyNameFlagName, policyNameFlagDefault, policyNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhookLastTriggerFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrieveWebhookLastTriggerCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, enabledAdded := retrieveWebhookLastTriggerEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, eventTypeAdded := retrieveWebhookLastTriggerEventTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventTypeAdded

	err, lastTriggerTimeAdded := retrieveWebhookLastTriggerLastTriggerTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || lastTriggerTimeAdded

	err, policyNameAdded := retrieveWebhookLastTriggerPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyNameAdded

	return nil, retAdded
}

func retrieveWebhookLastTriggerCreationTimeFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookLastTriggerEnabledFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookLastTriggerEventTypeFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventTypeFlagName := fmt.Sprintf("%v.event_type", cmdPrefix)
	if cmd.Flags().Changed(eventTypeFlagName) {

		var eventTypeFlagName string
		if cmdPrefix == "" {
			eventTypeFlagName = "event_type"
		} else {
			eventTypeFlagName = fmt.Sprintf("%v.event_type", cmdPrefix)
		}

		eventTypeFlagValue, err := cmd.Flags().GetString(eventTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EventType = eventTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookLastTriggerLastTriggerTimeFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	lastTriggerTimeFlagName := fmt.Sprintf("%v.last_trigger_time", cmdPrefix)
	if cmd.Flags().Changed(lastTriggerTimeFlagName) {

		var lastTriggerTimeFlagName string
		if cmdPrefix == "" {
			lastTriggerTimeFlagName = "last_trigger_time"
		} else {
			lastTriggerTimeFlagName = fmt.Sprintf("%v.last_trigger_time", cmdPrefix)
		}

		lastTriggerTimeFlagValueStr, err := cmd.Flags().GetString(lastTriggerTimeFlagName)
		if err != nil {
			return err, false
		}
		var lastTriggerTimeFlagValue strfmt.DateTime
		if err := lastTriggerTimeFlagValue.UnmarshalText([]byte(lastTriggerTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.LastTriggerTime = lastTriggerTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookLastTriggerPolicyNameFlags(depth int, m *models.WebhookLastTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyNameFlagName := fmt.Sprintf("%v.policy_name", cmdPrefix)
	if cmd.Flags().Changed(policyNameFlagName) {

		var policyNameFlagName string
		if cmdPrefix == "" {
			policyNameFlagName = "policy_name"
		} else {
			policyNameFlagName = fmt.Sprintf("%v.policy_name", cmdPrefix)
		}

		policyNameFlagValue, err := cmd.Flags().GetString(policyNameFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyName = policyNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
