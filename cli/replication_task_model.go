// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReplicationTask

// register flags to command
func registerModelReplicationTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicationTaskDstResource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskOperation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskResourceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskSrcResource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationTaskStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationTaskDstResource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dstResourceDescription := `The destination resource that the task operates`

	var dstResourceFlagName string
	if cmdPrefix == "" {
		dstResourceFlagName = "dst_resource"
	} else {
		dstResourceFlagName = fmt.Sprintf("%v.dst_resource", cmdPrefix)
	}

	var dstResourceFlagDefault string

	_ = cmd.PersistentFlags().String(dstResourceFlagName, dstResourceFlagDefault, dstResourceDescription)

	return nil
}

func registerReplicationTaskEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := `The end time of the task`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "end_time"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endTimeFlagName, "", endTimeDescription)

	return nil
}

func registerReplicationTaskExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `The ID of the execution that the task belongs to`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "execution_id"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
	}

	var executionIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerReplicationTaskID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the task`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerReplicationTaskJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobIdDescription := `The ID of the underlying job that the task related to`

	var jobIdFlagName string
	if cmdPrefix == "" {
		jobIdFlagName = "job_id"
	} else {
		jobIdFlagName = fmt.Sprintf("%v.job_id", cmdPrefix)
	}

	var jobIdFlagDefault string

	_ = cmd.PersistentFlags().String(jobIdFlagName, jobIdFlagDefault, jobIdDescription)

	return nil
}

func registerReplicationTaskOperation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	operationDescription := `The operation of the task`

	var operationFlagName string
	if cmdPrefix == "" {
		operationFlagName = "operation"
	} else {
		operationFlagName = fmt.Sprintf("%v.operation", cmdPrefix)
	}

	var operationFlagDefault string

	_ = cmd.PersistentFlags().String(operationFlagName, operationFlagDefault, operationDescription)

	return nil
}

func registerReplicationTaskResourceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceTypeDescription := `The type of the resource that the task operates`

	var resourceTypeFlagName string
	if cmdPrefix == "" {
		resourceTypeFlagName = "resource_type"
	} else {
		resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
	}

	var resourceTypeFlagDefault string

	_ = cmd.PersistentFlags().String(resourceTypeFlagName, resourceTypeFlagDefault, resourceTypeDescription)

	return nil
}

func registerReplicationTaskSrcResource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	srcResourceDescription := `The source resource that the task operates`

	var srcResourceFlagName string
	if cmdPrefix == "" {
		srcResourceFlagName = "src_resource"
	} else {
		srcResourceFlagName = fmt.Sprintf("%v.src_resource", cmdPrefix)
	}

	var srcResourceFlagDefault string

	_ = cmd.PersistentFlags().String(srcResourceFlagName, srcResourceFlagDefault, srcResourceDescription)

	return nil
}

func registerReplicationTaskStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `The start time of the task`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "start_time"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimeFlagName, "", startTimeDescription)

	return nil
}

func registerReplicationTaskStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of the task`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicationTaskFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dstResourceAdded := retrieveReplicationTaskDstResourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dstResourceAdded

	err, endTimeAdded := retrieveReplicationTaskEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, executionIdAdded := retrieveReplicationTaskExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, idAdded := retrieveReplicationTaskIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, jobIdAdded := retrieveReplicationTaskJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobIdAdded

	err, operationAdded := retrieveReplicationTaskOperationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operationAdded

	err, resourceTypeAdded := retrieveReplicationTaskResourceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceTypeAdded

	err, srcResourceAdded := retrieveReplicationTaskSrcResourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srcResourceAdded

	err, startTimeAdded := retrieveReplicationTaskStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, statusAdded := retrieveReplicationTaskStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	return nil, retAdded
}

func retrieveReplicationTaskDstResourceFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dstResourceFlagName := fmt.Sprintf("%v.dst_resource", cmdPrefix)
	if cmd.Flags().Changed(dstResourceFlagName) {

		var dstResourceFlagName string
		if cmdPrefix == "" {
			dstResourceFlagName = "dst_resource"
		} else {
			dstResourceFlagName = fmt.Sprintf("%v.dst_resource", cmdPrefix)
		}

		dstResourceFlagValue, err := cmd.Flags().GetString(dstResourceFlagName)
		if err != nil {
			return err, false
		}
		m.DstResource = dstResourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskEndTimeFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.end_time", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "end_time"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
		}

		endTimeFlagValueStr, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		var endTimeFlagValue strfmt.DateTime
		if err := endTimeFlagValue.UnmarshalText([]byte(endTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskExecutionIDFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.execution_id", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "execution_id"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetInt64(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskIDFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskJobIDFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobIdFlagName := fmt.Sprintf("%v.job_id", cmdPrefix)
	if cmd.Flags().Changed(jobIdFlagName) {

		var jobIdFlagName string
		if cmdPrefix == "" {
			jobIdFlagName = "job_id"
		} else {
			jobIdFlagName = fmt.Sprintf("%v.job_id", cmdPrefix)
		}

		jobIdFlagValue, err := cmd.Flags().GetString(jobIdFlagName)
		if err != nil {
			return err, false
		}
		m.JobID = jobIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskOperationFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	operationFlagName := fmt.Sprintf("%v.operation", cmdPrefix)
	if cmd.Flags().Changed(operationFlagName) {

		var operationFlagName string
		if cmdPrefix == "" {
			operationFlagName = "operation"
		} else {
			operationFlagName = fmt.Sprintf("%v.operation", cmdPrefix)
		}

		operationFlagValue, err := cmd.Flags().GetString(operationFlagName)
		if err != nil {
			return err, false
		}
		m.Operation = operationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskResourceTypeFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceTypeFlagName := fmt.Sprintf("%v.resource_type", cmdPrefix)
	if cmd.Flags().Changed(resourceTypeFlagName) {

		var resourceTypeFlagName string
		if cmdPrefix == "" {
			resourceTypeFlagName = "resource_type"
		} else {
			resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
		}

		resourceTypeFlagValue, err := cmd.Flags().GetString(resourceTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceType = resourceTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskSrcResourceFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srcResourceFlagName := fmt.Sprintf("%v.src_resource", cmdPrefix)
	if cmd.Flags().Changed(srcResourceFlagName) {

		var srcResourceFlagName string
		if cmdPrefix == "" {
			srcResourceFlagName = "src_resource"
		} else {
			srcResourceFlagName = fmt.Sprintf("%v.src_resource", cmdPrefix)
		}

		srcResourceFlagValue, err := cmd.Flags().GetString(srcResourceFlagName)
		if err != nil {
			return err, false
		}
		m.SrcResource = srcResourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskStartTimeFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "start_time"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		startTimeFlagValueStr, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		var startTimeFlagValue strfmt.DateTime
		if err := startTimeFlagValue.UnmarshalText([]byte(startTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationTaskStatusFlags(depth int, m *models.ReplicationTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}
