// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/scanner"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationScannerCreateScannerCmd returns a cmd to handle operation createScanner
func makeOperationScannerCreateScannerCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "createScanner",
		Short: `Creats a new scanner registration with the given data.
`,
		RunE: runOperationScannerCreateScanner,
	}

	if err := registerOperationScannerCreateScannerParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationScannerCreateScanner uses cmd flags to call endpoint api
func runOperationScannerCreateScanner(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := scanner.NewCreateScannerParams()
	if err, _ := retrieveOperationScannerCreateScannerXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScannerCreateScannerRegistrationFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationScannerCreateScannerResult(appCli.Scanner.CreateScanner(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationScannerCreateScannerParamFlags registers all flags needed to fill params
func registerOperationScannerCreateScannerParamFlags(cmd *cobra.Command) error {
	if err := registerOperationScannerCreateScannerXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScannerCreateScannerRegistrationParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationScannerCreateScannerXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationScannerCreateScannerRegistrationParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var registrationFlagName string
	if cmdPrefix == "" {
		registrationFlagName = "registration"
	} else {
		registrationFlagName = fmt.Sprintf("%v.registration", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(registrationFlagName, "", "Optional json string for [registration]. A scanner registration to be created.")

	// add flags for body
	if err := registerModelScannerRegistrationReqFlags(0, "scannerRegistrationReq", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationScannerCreateScannerXRequestIDFlag(m *scanner.CreateScannerParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScannerCreateScannerRegistrationFlag(m *scanner.CreateScannerParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("registration") {
		// Read registration string from cmd and unmarshal
		registrationValueStr, err := cmd.Flags().GetString("registration")
		if err != nil {
			return err, false
		}

		registrationValue := models.ScannerRegistrationReq{}
		if err := json.Unmarshal([]byte(registrationValueStr), &registrationValue); err != nil {
			return fmt.Errorf("cannot unmarshal registration string in models.ScannerRegistrationReq: %v", err), false
		}
		m.Registration = &registrationValue
	}
	registrationValueModel := m.Registration
	if swag.IsZero(registrationValueModel) {
		registrationValueModel = &models.ScannerRegistrationReq{}
	}
	err, added := retrieveModelScannerRegistrationReqFlags(0, registrationValueModel, "scannerRegistrationReq", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Registration = registrationValueModel
	}
	if dryRun && debug {

		registrationValueDebugBytes, err := json.Marshal(m.Registration)
		if err != nil {
			return err, false
		}
		logDebugf("Registration dry-run payload: %v", string(registrationValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationScannerCreateScannerResult parses request result and return the string content
func parseOperationScannerCreateScannerResult(resp0 *scanner.CreateScannerCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createScannerCreated is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*scanner.CreateScannerBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*scanner.CreateScannerUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*scanner.CreateScannerForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*scanner.CreateScannerInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createScannerCreated is not supported by go-swagger cli yet.

	return "", nil
}
