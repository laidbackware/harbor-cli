// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/preheat"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPreheatUpdatePolicyCmd returns a cmd to handle operation updatePolicy
func makeOperationPreheatUpdatePolicyCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "UpdatePolicy",
		Short: `Update preheat policy`,
		RunE:  runOperationPreheatUpdatePolicy,
	}

	if err := registerOperationPreheatUpdatePolicyParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPreheatUpdatePolicy uses cmd flags to call endpoint api
func runOperationPreheatUpdatePolicy(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := preheat.NewUpdatePolicyParams()
	if err, _ := retrieveOperationPreheatUpdatePolicyXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatUpdatePolicyPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatUpdatePolicyPreheatPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatUpdatePolicyProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPreheatUpdatePolicyResult(appCli.Preheat.UpdatePolicy(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPreheatUpdatePolicyParamFlags registers all flags needed to fill params
func registerOperationPreheatUpdatePolicyParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPreheatUpdatePolicyXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatUpdatePolicyPolicyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatUpdatePolicyPreheatPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatUpdatePolicyProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPreheatUpdatePolicyXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationPreheatUpdatePolicyPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(policyFlagName, "", "Optional json string for [policy]. The policy schema info")

	// add flags for body
	if err := registerModelPreheatPolicyFlags(0, "preheatPolicy", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationPreheatUpdatePolicyPreheatPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	preheatPolicyNameDescription := `Required. Preheat Policy Name`

	var preheatPolicyNameFlagName string
	if cmdPrefix == "" {
		preheatPolicyNameFlagName = "preheat_policy_name"
	} else {
		preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
	}

	var preheatPolicyNameFlagDefault string

	_ = cmd.PersistentFlags().String(preheatPolicyNameFlagName, preheatPolicyNameFlagDefault, preheatPolicyNameDescription)

	return nil
}
func registerOperationPreheatUpdatePolicyProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}

func retrieveOperationPreheatUpdatePolicyXRequestIDFlag(m *preheat.UpdatePolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatUpdatePolicyPolicyFlag(m *preheat.UpdatePolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("policy") {
		// Read policy string from cmd and unmarshal
		policyValueStr, err := cmd.Flags().GetString("policy")
		if err != nil {
			return err, false
		}

		policyValue := models.PreheatPolicy{}
		if err := json.Unmarshal([]byte(policyValueStr), &policyValue); err != nil {
			return fmt.Errorf("cannot unmarshal policy string in models.PreheatPolicy: %v", err), false
		}
		m.Policy = &policyValue
	}
	policyValueModel := m.Policy
	if swag.IsZero(policyValueModel) {
		policyValueModel = &models.PreheatPolicy{}
	}
	err, added := retrieveModelPreheatPolicyFlags(0, policyValueModel, "preheatPolicy", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Policy = policyValueModel
	}
	if dryRun && debug {

		policyValueDebugBytes, err := json.Marshal(m.Policy)
		if err != nil {
			return err, false
		}
		logDebugf("Policy dry-run payload: %v", string(policyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationPreheatUpdatePolicyPreheatPolicyNameFlag(m *preheat.UpdatePolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("preheat_policy_name") {

		var preheatPolicyNameFlagName string
		if cmdPrefix == "" {
			preheatPolicyNameFlagName = "preheat_policy_name"
		} else {
			preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
		}

		preheatPolicyNameFlagValue, err := cmd.Flags().GetString(preheatPolicyNameFlagName)
		if err != nil {
			return err, false
		}
		m.PreheatPolicyName = preheatPolicyNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatUpdatePolicyProjectNameFlag(m *preheat.UpdatePolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}

// parseOperationPreheatUpdatePolicyResult parses request result and return the string content
func parseOperationPreheatUpdatePolicyResult(resp0 *preheat.UpdatePolicyOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updatePolicyOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*preheat.UpdatePolicyBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*preheat.UpdatePolicyUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*preheat.UpdatePolicyForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*preheat.UpdatePolicyNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*preheat.UpdatePolicyConflict)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*preheat.UpdatePolicyInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updatePolicyOK is not supported by go-swagger cli yet.

	return "", nil
}
