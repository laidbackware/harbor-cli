// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RegistryUpdate

// register flags to command
func registerModelRegistryUpdateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistryUpdateAccessKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateAccessSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateCredentialType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateInsecure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryUpdateURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryUpdateAccessKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessKeyDescription := `The registry access key.`

	var accessKeyFlagName string
	if cmdPrefix == "" {
		accessKeyFlagName = "access_key"
	} else {
		accessKeyFlagName = fmt.Sprintf("%v.access_key", cmdPrefix)
	}

	var accessKeyFlagDefault string

	_ = cmd.PersistentFlags().String(accessKeyFlagName, accessKeyFlagDefault, accessKeyDescription)

	return nil
}

func registerRegistryUpdateAccessSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessSecretDescription := `The registry access secret.`

	var accessSecretFlagName string
	if cmdPrefix == "" {
		accessSecretFlagName = "access_secret"
	} else {
		accessSecretFlagName = fmt.Sprintf("%v.access_secret", cmdPrefix)
	}

	var accessSecretFlagDefault string

	_ = cmd.PersistentFlags().String(accessSecretFlagName, accessSecretFlagDefault, accessSecretDescription)

	return nil
}

func registerRegistryUpdateCredentialType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	credentialTypeDescription := `Credential type of the registry, e.g. basic.`

	var credentialTypeFlagName string
	if cmdPrefix == "" {
		credentialTypeFlagName = "credential_type"
	} else {
		credentialTypeFlagName = fmt.Sprintf("%v.credential_type", cmdPrefix)
	}

	var credentialTypeFlagDefault string

	_ = cmd.PersistentFlags().String(credentialTypeFlagName, credentialTypeFlagDefault, credentialTypeDescription)

	return nil
}

func registerRegistryUpdateDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description of the registry.`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerRegistryUpdateInsecure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	insecureDescription := `Whether or not the certificate will be verified when Harbor tries to access the server.`

	var insecureFlagName string
	if cmdPrefix == "" {
		insecureFlagName = "insecure"
	} else {
		insecureFlagName = fmt.Sprintf("%v.insecure", cmdPrefix)
	}

	var insecureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(insecureFlagName, insecureFlagDefault, insecureDescription)

	return nil
}

func registerRegistryUpdateName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The registry name.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerRegistryUpdateURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	urlDescription := `The registry URL.`

	var urlFlagName string
	if cmdPrefix == "" {
		urlFlagName = "url"
	} else {
		urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var urlFlagDefault string

	_ = cmd.PersistentFlags().String(urlFlagName, urlFlagDefault, urlDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistryUpdateFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessKeyAdded := retrieveRegistryUpdateAccessKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessKeyAdded

	err, accessSecretAdded := retrieveRegistryUpdateAccessSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessSecretAdded

	err, credentialTypeAdded := retrieveRegistryUpdateCredentialTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || credentialTypeAdded

	err, descriptionAdded := retrieveRegistryUpdateDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, insecureAdded := retrieveRegistryUpdateInsecureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || insecureAdded

	err, nameAdded := retrieveRegistryUpdateNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, urlAdded := retrieveRegistryUpdateURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveRegistryUpdateAccessKeyFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessKeyFlagName := fmt.Sprintf("%v.access_key", cmdPrefix)
	if cmd.Flags().Changed(accessKeyFlagName) {

		var accessKeyFlagName string
		if cmdPrefix == "" {
			accessKeyFlagName = "access_key"
		} else {
			accessKeyFlagName = fmt.Sprintf("%v.access_key", cmdPrefix)
		}

		accessKeyFlagValue, err := cmd.Flags().GetString(accessKeyFlagName)
		if err != nil {
			return err, false
		}
		m.AccessKey = &accessKeyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateAccessSecretFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessSecretFlagName := fmt.Sprintf("%v.access_secret", cmdPrefix)
	if cmd.Flags().Changed(accessSecretFlagName) {

		var accessSecretFlagName string
		if cmdPrefix == "" {
			accessSecretFlagName = "access_secret"
		} else {
			accessSecretFlagName = fmt.Sprintf("%v.access_secret", cmdPrefix)
		}

		accessSecretFlagValue, err := cmd.Flags().GetString(accessSecretFlagName)
		if err != nil {
			return err, false
		}
		m.AccessSecret = &accessSecretFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateCredentialTypeFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	credentialTypeFlagName := fmt.Sprintf("%v.credential_type", cmdPrefix)
	if cmd.Flags().Changed(credentialTypeFlagName) {

		var credentialTypeFlagName string
		if cmdPrefix == "" {
			credentialTypeFlagName = "credential_type"
		} else {
			credentialTypeFlagName = fmt.Sprintf("%v.credential_type", cmdPrefix)
		}

		credentialTypeFlagValue, err := cmd.Flags().GetString(credentialTypeFlagName)
		if err != nil {
			return err, false
		}
		m.CredentialType = &credentialTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateDescriptionFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = &descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateInsecureFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	insecureFlagName := fmt.Sprintf("%v.insecure", cmdPrefix)
	if cmd.Flags().Changed(insecureFlagName) {

		var insecureFlagName string
		if cmdPrefix == "" {
			insecureFlagName = "insecure"
		} else {
			insecureFlagName = fmt.Sprintf("%v.insecure", cmdPrefix)
		}

		insecureFlagValue, err := cmd.Flags().GetBool(insecureFlagName)
		if err != nil {
			return err, false
		}
		m.Insecure = &insecureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateNameFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryUpdateURLFlags(depth int, m *models.RegistryUpdate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		var urlFlagName string
		if cmdPrefix == "" {
			urlFlagName = "url"
		} else {
			urlFlagName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		urlFlagValue, err := cmd.Flags().GetString(urlFlagName)
		if err != nil {
			return err, false
		}
		m.URL = &urlFlagValue

		retAdded = true
	}

	return nil, retAdded
}
