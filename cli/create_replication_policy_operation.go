// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/replication"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationReplicationCreateReplicationPolicyCmd returns a cmd to handle operation createReplicationPolicy
func makeOperationReplicationCreateReplicationPolicyCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "createReplicationPolicy",
		Short: `Create a replication policy`,
		RunE:  runOperationReplicationCreateReplicationPolicy,
	}

	if err := registerOperationReplicationCreateReplicationPolicyParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationReplicationCreateReplicationPolicy uses cmd flags to call endpoint api
func runOperationReplicationCreateReplicationPolicy(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := replication.NewCreateReplicationPolicyParams()
	if err, _ := retrieveOperationReplicationCreateReplicationPolicyXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationCreateReplicationPolicyPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationReplicationCreateReplicationPolicyResult(appCli.Replication.CreateReplicationPolicy(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationReplicationCreateReplicationPolicyParamFlags registers all flags needed to fill params
func registerOperationReplicationCreateReplicationPolicyParamFlags(cmd *cobra.Command) error {
	if err := registerOperationReplicationCreateReplicationPolicyXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationCreateReplicationPolicyPolicyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationReplicationCreateReplicationPolicyXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationReplicationCreateReplicationPolicyPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(policyFlagName, "", "Optional json string for [policy]. The replication policy")

	// add flags for body
	if err := registerModelReplicationPolicyFlags(0, "replicationPolicy", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationReplicationCreateReplicationPolicyXRequestIDFlag(m *replication.CreateReplicationPolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationCreateReplicationPolicyPolicyFlag(m *replication.CreateReplicationPolicyParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("policy") {
		// Read policy string from cmd and unmarshal
		policyValueStr, err := cmd.Flags().GetString("policy")
		if err != nil {
			return err, false
		}

		policyValue := models.ReplicationPolicy{}
		if err := json.Unmarshal([]byte(policyValueStr), &policyValue); err != nil {
			return fmt.Errorf("cannot unmarshal policy string in models.ReplicationPolicy: %v", err), false
		}
		m.Policy = &policyValue
	}
	policyValueModel := m.Policy
	if swag.IsZero(policyValueModel) {
		policyValueModel = &models.ReplicationPolicy{}
	}
	err, added := retrieveModelReplicationPolicyFlags(0, policyValueModel, "replicationPolicy", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Policy = policyValueModel
	}
	if dryRun && debug {

		policyValueDebugBytes, err := json.Marshal(m.Policy)
		if err != nil {
			return err, false
		}
		logDebugf("Policy dry-run payload: %v", string(policyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationReplicationCreateReplicationPolicyResult parses request result and return the string content
func parseOperationReplicationCreateReplicationPolicyResult(resp0 *replication.CreateReplicationPolicyCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createReplicationPolicyCreated is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*replication.CreateReplicationPolicyBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*replication.CreateReplicationPolicyUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*replication.CreateReplicationPolicyForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*replication.CreateReplicationPolicyConflict)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*replication.CreateReplicationPolicyInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createReplicationPolicyCreated is not supported by go-swagger cli yet.

	return "", nil
}
