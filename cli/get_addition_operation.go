// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/artifact"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationArtifactGetAdditionCmd returns a cmd to handle operation getAddition
func makeOperationArtifactGetAdditionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getAddition",
		Short: `Get the addition of the artifact specified by the reference under the project and repository.`,
		RunE:  runOperationArtifactGetAddition,
	}

	if err := registerOperationArtifactGetAdditionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationArtifactGetAddition uses cmd flags to call endpoint api
func runOperationArtifactGetAddition(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := artifact.NewGetAdditionParams()
	if err, _ := retrieveOperationArtifactGetAdditionXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetAdditionAdditionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetAdditionProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetAdditionReferenceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetAdditionRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationArtifactGetAdditionResult(appCli.Artifact.GetAddition(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationArtifactGetAdditionParamFlags registers all flags needed to fill params
func registerOperationArtifactGetAdditionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationArtifactGetAdditionXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetAdditionAdditionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetAdditionProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetAdditionReferenceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetAdditionRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationArtifactGetAdditionXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationArtifactGetAdditionAdditionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	additionDescription := `Enum: ["build_history","values.yaml","readme.md","dependencies"]. Required. The type of addition.`

	var additionFlagName string
	if cmdPrefix == "" {
		additionFlagName = "addition"
	} else {
		additionFlagName = fmt.Sprintf("%v.addition", cmdPrefix)
	}

	var additionFlagDefault string

	_ = cmd.PersistentFlags().String(additionFlagName, additionFlagDefault, additionDescription)

	if err := cmd.RegisterFlagCompletionFunc(additionFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["build_history","values.yaml","readme.md","dependencies"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}
func registerOperationArtifactGetAdditionProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationArtifactGetAdditionReferenceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	referenceDescription := `Required. The reference of the artifact, can be digest or tag`

	var referenceFlagName string
	if cmdPrefix == "" {
		referenceFlagName = "reference"
	} else {
		referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
	}

	var referenceFlagDefault string

	_ = cmd.PersistentFlags().String(referenceFlagName, referenceFlagDefault, referenceDescription)

	return nil
}
func registerOperationArtifactGetAdditionRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}

func retrieveOperationArtifactGetAdditionXRequestIDFlag(m *artifact.GetAdditionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetAdditionAdditionFlag(m *artifact.GetAdditionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("addition") {

		var additionFlagName string
		if cmdPrefix == "" {
			additionFlagName = "addition"
		} else {
			additionFlagName = fmt.Sprintf("%v.addition", cmdPrefix)
		}

		additionFlagValue, err := cmd.Flags().GetString(additionFlagName)
		if err != nil {
			return err, false
		}
		m.Addition = additionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetAdditionProjectNameFlag(m *artifact.GetAdditionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetAdditionReferenceFlag(m *artifact.GetAdditionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("reference") {

		var referenceFlagName string
		if cmdPrefix == "" {
			referenceFlagName = "reference"
		} else {
			referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
		}

		referenceFlagValue, err := cmd.Flags().GetString(referenceFlagName)
		if err != nil {
			return err, false
		}
		m.Reference = referenceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetAdditionRepositoryNameFlag(m *artifact.GetAdditionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository_name") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}

// parseOperationArtifactGetAdditionResult parses request result and return the string content
func parseOperationArtifactGetAdditionResult(resp0 *artifact.GetAdditionOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*artifact.GetAdditionOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*artifact.GetAdditionBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*artifact.GetAdditionUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*artifact.GetAdditionForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*artifact.GetAdditionNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*artifact.GetAdditionInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
