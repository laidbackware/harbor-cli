// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for FilterStyle

// register flags to command
func registerModelFilterStyleFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerFilterStyleStyle(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFilterStyleType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerFilterStyleValues(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerFilterStyleStyle(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	styleDescription := `The filter style`

	var styleFlagName string
	if cmdPrefix == "" {
		styleFlagName = "style"
	} else {
		styleFlagName = fmt.Sprintf("%v.style", cmdPrefix)
	}

	var styleFlagDefault string

	_ = cmd.PersistentFlags().String(styleFlagName, styleFlagDefault, styleDescription)

	return nil
}

func registerFilterStyleType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The filter type`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

func registerFilterStyleValues(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: values []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelFilterStyleFlags(depth int, m *models.FilterStyle, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, styleAdded := retrieveFilterStyleStyleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || styleAdded

	err, typeAdded := retrieveFilterStyleTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	err, valuesAdded := retrieveFilterStyleValuesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valuesAdded

	return nil, retAdded
}

func retrieveFilterStyleStyleFlags(depth int, m *models.FilterStyle, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	styleFlagName := fmt.Sprintf("%v.style", cmdPrefix)
	if cmd.Flags().Changed(styleFlagName) {

		var styleFlagName string
		if cmdPrefix == "" {
			styleFlagName = "style"
		} else {
			styleFlagName = fmt.Sprintf("%v.style", cmdPrefix)
		}

		styleFlagValue, err := cmd.Flags().GetString(styleFlagName)
		if err != nil {
			return err, false
		}
		m.Style = styleFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFilterStyleTypeFlags(depth int, m *models.FilterStyle, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveFilterStyleValuesFlags(depth int, m *models.FilterStyle, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valuesFlagName := fmt.Sprintf("%v.values", cmdPrefix)
	if cmd.Flags().Changed(valuesFlagName) {
		// warning: values array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
