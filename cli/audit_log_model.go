// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuditLog

// register flags to command
func registerModelAuditLogFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuditLogID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuditLogOpTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuditLogOperation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuditLogResource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuditLogResourceType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuditLogUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuditLogID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the audit log entry.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerAuditLogOpTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	opTimeDescription := `The time when this operation is triggered.`

	var opTimeFlagName string
	if cmdPrefix == "" {
		opTimeFlagName = "op_time"
	} else {
		opTimeFlagName = fmt.Sprintf("%v.op_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(opTimeFlagName, "", opTimeDescription)

	return nil
}

func registerAuditLogOperation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	operationDescription := `The operation against the repository in this log entry.`

	var operationFlagName string
	if cmdPrefix == "" {
		operationFlagName = "operation"
	} else {
		operationFlagName = fmt.Sprintf("%v.operation", cmdPrefix)
	}

	var operationFlagDefault string

	_ = cmd.PersistentFlags().String(operationFlagName, operationFlagDefault, operationDescription)

	return nil
}

func registerAuditLogResource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceDescription := `Name of the repository in this log entry.`

	var resourceFlagName string
	if cmdPrefix == "" {
		resourceFlagName = "resource"
	} else {
		resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
	}

	var resourceFlagDefault string

	_ = cmd.PersistentFlags().String(resourceFlagName, resourceFlagDefault, resourceDescription)

	return nil
}

func registerAuditLogResourceType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	resourceTypeDescription := `Tag of the repository in this log entry.`

	var resourceTypeFlagName string
	if cmdPrefix == "" {
		resourceTypeFlagName = "resource_type"
	} else {
		resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
	}

	var resourceTypeFlagDefault string

	_ = cmd.PersistentFlags().String(resourceTypeFlagName, resourceTypeFlagDefault, resourceTypeDescription)

	return nil
}

func registerAuditLogUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Username of the user in this log entry.`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuditLogFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, idAdded := retrieveAuditLogIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, opTimeAdded := retrieveAuditLogOpTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || opTimeAdded

	err, operationAdded := retrieveAuditLogOperationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || operationAdded

	err, resourceAdded := retrieveAuditLogResourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceAdded

	err, resourceTypeAdded := retrieveAuditLogResourceTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || resourceTypeAdded

	err, usernameAdded := retrieveAuditLogUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveAuditLogIDFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuditLogOpTimeFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	opTimeFlagName := fmt.Sprintf("%v.op_time", cmdPrefix)
	if cmd.Flags().Changed(opTimeFlagName) {

		var opTimeFlagName string
		if cmdPrefix == "" {
			opTimeFlagName = "op_time"
		} else {
			opTimeFlagName = fmt.Sprintf("%v.op_time", cmdPrefix)
		}

		opTimeFlagValueStr, err := cmd.Flags().GetString(opTimeFlagName)
		if err != nil {
			return err, false
		}
		var opTimeFlagValue strfmt.DateTime
		if err := opTimeFlagValue.UnmarshalText([]byte(opTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.OpTime = opTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuditLogOperationFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	operationFlagName := fmt.Sprintf("%v.operation", cmdPrefix)
	if cmd.Flags().Changed(operationFlagName) {

		var operationFlagName string
		if cmdPrefix == "" {
			operationFlagName = "operation"
		} else {
			operationFlagName = fmt.Sprintf("%v.operation", cmdPrefix)
		}

		operationFlagValue, err := cmd.Flags().GetString(operationFlagName)
		if err != nil {
			return err, false
		}
		m.Operation = operationFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuditLogResourceFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceFlagName := fmt.Sprintf("%v.resource", cmdPrefix)
	if cmd.Flags().Changed(resourceFlagName) {

		var resourceFlagName string
		if cmdPrefix == "" {
			resourceFlagName = "resource"
		} else {
			resourceFlagName = fmt.Sprintf("%v.resource", cmdPrefix)
		}

		resourceFlagValue, err := cmd.Flags().GetString(resourceFlagName)
		if err != nil {
			return err, false
		}
		m.Resource = resourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuditLogResourceTypeFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	resourceTypeFlagName := fmt.Sprintf("%v.resource_type", cmdPrefix)
	if cmd.Flags().Changed(resourceTypeFlagName) {

		var resourceTypeFlagName string
		if cmdPrefix == "" {
			resourceTypeFlagName = "resource_type"
		} else {
			resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
		}

		resourceTypeFlagValue, err := cmd.Flags().GetString(resourceTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceType = resourceTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuditLogUsernameFlags(depth int, m *models.AuditLog, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
