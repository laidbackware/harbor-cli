// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for StartReplicationExecution

// register flags to command
func registerModelStartReplicationExecutionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStartReplicationExecutionPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStartReplicationExecutionPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyIdDescription := `The ID of policy that the execution belongs to.`

	var policyIdFlagName string
	if cmdPrefix == "" {
		policyIdFlagName = "policy_id"
	} else {
		policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
	}

	var policyIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(policyIdFlagName, policyIdFlagDefault, policyIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStartReplicationExecutionFlags(depth int, m *models.StartReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, policyIdAdded := retrieveStartReplicationExecutionPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyIdAdded

	return nil, retAdded
}

func retrieveStartReplicationExecutionPolicyIDFlags(depth int, m *models.StartReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyIdFlagName := fmt.Sprintf("%v.policy_id", cmdPrefix)
	if cmd.Flags().Changed(policyIdFlagName) {

		var policyIdFlagName string
		if cmdPrefix == "" {
			policyIdFlagName = "policy_id"
		} else {
			policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
		}

		policyIdFlagValue, err := cmd.Flags().GetInt64(policyIdFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyID = policyIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
