// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/robot"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRobotUpdateRobotCmd returns a cmd to handle operation updateRobot
func makeOperationRobotUpdateRobotCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "UpdateRobot",
		Short: `This endpoint updates specific robot account information by robot ID.`,
		RunE:  runOperationRobotUpdateRobot,
	}

	if err := registerOperationRobotUpdateRobotParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRobotUpdateRobot uses cmd flags to call endpoint api
func runOperationRobotUpdateRobot(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := robot.NewUpdateRobotParams()
	if err, _ := retrieveOperationRobotUpdateRobotXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRobotUpdateRobotRobotFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRobotUpdateRobotRobotIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRobotUpdateRobotResult(appCli.Robot.UpdateRobot(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRobotUpdateRobotParamFlags registers all flags needed to fill params
func registerOperationRobotUpdateRobotParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRobotUpdateRobotXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRobotUpdateRobotRobotParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRobotUpdateRobotRobotIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRobotUpdateRobotXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationRobotUpdateRobotRobotParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var robotFlagName string
	if cmdPrefix == "" {
		robotFlagName = "robot"
	} else {
		robotFlagName = fmt.Sprintf("%v.robot", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(robotFlagName, "", "Optional json string for [robot]. The JSON object of a robot account.")

	// add flags for body
	if err := registerModelRobotFlags(0, "robot", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationRobotUpdateRobotRobotIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	robotIdDescription := `Required. Robot ID`

	var robotIdFlagName string
	if cmdPrefix == "" {
		robotIdFlagName = "robot_id"
	} else {
		robotIdFlagName = fmt.Sprintf("%v.robot_id", cmdPrefix)
	}

	var robotIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(robotIdFlagName, robotIdFlagDefault, robotIdDescription)

	return nil
}

func retrieveOperationRobotUpdateRobotXRequestIDFlag(m *robot.UpdateRobotParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRobotUpdateRobotRobotFlag(m *robot.UpdateRobotParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("robot") {
		// Read robot string from cmd and unmarshal
		robotValueStr, err := cmd.Flags().GetString("robot")
		if err != nil {
			return err, false
		}

		robotValue := models.Robot{}
		if err := json.Unmarshal([]byte(robotValueStr), &robotValue); err != nil {
			return fmt.Errorf("cannot unmarshal robot string in models.Robot: %v", err), false
		}
		m.Robot = &robotValue
	}
	robotValueModel := m.Robot
	if swag.IsZero(robotValueModel) {
		robotValueModel = &models.Robot{}
	}
	err, added := retrieveModelRobotFlags(0, robotValueModel, "robot", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Robot = robotValueModel
	}
	if dryRun && debug {

		robotValueDebugBytes, err := json.Marshal(m.Robot)
		if err != nil {
			return err, false
		}
		logDebugf("Robot dry-run payload: %v", string(robotValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationRobotUpdateRobotRobotIDFlag(m *robot.UpdateRobotParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("robot_id") {

		var robotIdFlagName string
		if cmdPrefix == "" {
			robotIdFlagName = "robot_id"
		} else {
			robotIdFlagName = fmt.Sprintf("%v.robot_id", cmdPrefix)
		}

		robotIdFlagValue, err := cmd.Flags().GetInt64(robotIdFlagName)
		if err != nil {
			return err, false
		}
		m.RobotID = robotIdFlagValue

	}
	return nil, retAdded
}

// parseOperationRobotUpdateRobotResult parses request result and return the string content
func parseOperationRobotUpdateRobotResult(resp0 *robot.UpdateRobotOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateRobotOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*robot.UpdateRobotBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*robot.UpdateRobotUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*robot.UpdateRobotForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*robot.UpdateRobotNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*robot.UpdateRobotConflict)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*robot.UpdateRobotInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateRobotOK is not supported by go-swagger cli yet.

	return "", nil
}
