// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/robot"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRobotRefreshSecCmd returns a cmd to handle operation refreshSec
func makeOperationRobotRefreshSecCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "RefreshSec",
		Short: `Refresh the robot secret`,
		RunE:  runOperationRobotRefreshSec,
	}

	if err := registerOperationRobotRefreshSecParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRobotRefreshSec uses cmd flags to call endpoint api
func runOperationRobotRefreshSec(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := robot.NewRefreshSecParams()
	if err, _ := retrieveOperationRobotRefreshSecXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRobotRefreshSecRobotSecFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRobotRefreshSecRobotIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRobotRefreshSecResult(appCli.Robot.RefreshSec(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRobotRefreshSecParamFlags registers all flags needed to fill params
func registerOperationRobotRefreshSecParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRobotRefreshSecXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRobotRefreshSecRobotSecParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRobotRefreshSecRobotIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRobotRefreshSecXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationRobotRefreshSecRobotSecParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var robotSecFlagName string
	if cmdPrefix == "" {
		robotSecFlagName = "robotSec"
	} else {
		robotSecFlagName = fmt.Sprintf("%v.robotSec", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(robotSecFlagName, "", "Optional json string for [robotSec]. The JSON object of a robot account.")

	// add flags for body
	if err := registerModelRobotSecFlags(0, "robotSec", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationRobotRefreshSecRobotIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	robotIdDescription := `Required. Robot ID`

	var robotIdFlagName string
	if cmdPrefix == "" {
		robotIdFlagName = "robot_id"
	} else {
		robotIdFlagName = fmt.Sprintf("%v.robot_id", cmdPrefix)
	}

	var robotIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(robotIdFlagName, robotIdFlagDefault, robotIdDescription)

	return nil
}

func retrieveOperationRobotRefreshSecXRequestIDFlag(m *robot.RefreshSecParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRobotRefreshSecRobotSecFlag(m *robot.RefreshSecParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("robotSec") {
		// Read robotSec string from cmd and unmarshal
		robotSecValueStr, err := cmd.Flags().GetString("robotSec")
		if err != nil {
			return err, false
		}

		robotSecValue := models.RobotSec{}
		if err := json.Unmarshal([]byte(robotSecValueStr), &robotSecValue); err != nil {
			return fmt.Errorf("cannot unmarshal robotSec string in models.RobotSec: %v", err), false
		}
		m.RobotSec = &robotSecValue
	}
	robotSecValueModel := m.RobotSec
	if swag.IsZero(robotSecValueModel) {
		robotSecValueModel = &models.RobotSec{}
	}
	err, added := retrieveModelRobotSecFlags(0, robotSecValueModel, "robotSec", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.RobotSec = robotSecValueModel
	}
	if dryRun && debug {

		robotSecValueDebugBytes, err := json.Marshal(m.RobotSec)
		if err != nil {
			return err, false
		}
		logDebugf("RobotSec dry-run payload: %v", string(robotSecValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationRobotRefreshSecRobotIDFlag(m *robot.RefreshSecParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("robot_id") {

		var robotIdFlagName string
		if cmdPrefix == "" {
			robotIdFlagName = "robot_id"
		} else {
			robotIdFlagName = fmt.Sprintf("%v.robot_id", cmdPrefix)
		}

		robotIdFlagValue, err := cmd.Flags().GetInt64(robotIdFlagName)
		if err != nil {
			return err, false
		}
		m.RobotID = robotIdFlagValue

	}
	return nil, retAdded
}

// parseOperationRobotRefreshSecResult parses request result and return the string content
func parseOperationRobotRefreshSecResult(resp0 *robot.RefreshSecOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*robot.RefreshSecOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*robot.RefreshSecBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*robot.RefreshSecUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*robot.RefreshSecForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*robot.RefreshSecNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*robot.RefreshSecInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
