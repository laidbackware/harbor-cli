// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ChartVersion

// register flags to command
func registerModelChartVersionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded ChartMetadata flags

	if err := registerModelChartMetadataFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register anonymous fields for AO1

	if err := registerChartVersionAnonAO1Created(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChartVersionAnonAO1Digest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChartVersionAnonAO1Removed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChartVersionAnonAO1Urls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerChartVersionLabels(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name AO1, type

func registerChartVersionAnonAO1Created(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdDescription := `The created time of the chart entry`

	var createdFlagName string
	if cmdPrefix == "" {
		createdFlagName = "created"
	} else {
		createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
	}

	var createdFlagDefault string

	_ = cmd.PersistentFlags().String(createdFlagName, createdFlagDefault, createdDescription)

	return nil
}

func registerChartVersionAnonAO1Digest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	digestDescription := `The digest value of the chart entry`

	var digestFlagName string
	if cmdPrefix == "" {
		digestFlagName = "digest"
	} else {
		digestFlagName = fmt.Sprintf("%v.digest", cmdPrefix)
	}

	var digestFlagDefault string

	_ = cmd.PersistentFlags().String(digestFlagName, digestFlagDefault, digestDescription)

	return nil
}

func registerChartVersionAnonAO1Removed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	removedDescription := `A flag to indicate if the chart entry is removed`

	var removedFlagName string
	if cmdPrefix == "" {
		removedFlagName = "removed"
	} else {
		removedFlagName = fmt.Sprintf("%v.removed", cmdPrefix)
	}

	var removedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(removedFlagName, removedFlagDefault, removedDescription)

	return nil
}

func registerChartVersionAnonAO1Urls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: urls []string array type is not supported by go-swagger cli yet

	return nil
}

func registerChartVersionLabels(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: labels []*Label array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelChartVersionFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model ChartMetadata
	err, aO0Added := retrieveModelChartMetadataFlags(depth, &m.ChartMetadata, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || aO0Added

	// retrieve allOf AO1 fields

	err, createdAdded := retrieveChartVersionAnonAO1CreatedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAdded

	err, digestAdded := retrieveChartVersionAnonAO1DigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || digestAdded

	err, removedAdded := retrieveChartVersionAnonAO1RemovedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || removedAdded

	err, urlsAdded := retrieveChartVersionAnonAO1UrlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlsAdded

	err, labelsAdded := retrieveChartVersionLabelsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || labelsAdded

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name AO1

func retrieveChartVersionAnonAO1CreatedFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdFlagName := fmt.Sprintf("%v.created", cmdPrefix)
	if cmd.Flags().Changed(createdFlagName) {

		var createdFlagName string
		if cmdPrefix == "" {
			createdFlagName = "created"
		} else {
			createdFlagName = fmt.Sprintf("%v.created", cmdPrefix)
		}

		createdFlagValue, err := cmd.Flags().GetString(createdFlagName)
		if err != nil {
			return err, false
		}
		m.Created = createdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveChartVersionAnonAO1DigestFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	digestFlagName := fmt.Sprintf("%v.digest", cmdPrefix)
	if cmd.Flags().Changed(digestFlagName) {

		var digestFlagName string
		if cmdPrefix == "" {
			digestFlagName = "digest"
		} else {
			digestFlagName = fmt.Sprintf("%v.digest", cmdPrefix)
		}

		digestFlagValue, err := cmd.Flags().GetString(digestFlagName)
		if err != nil {
			return err, false
		}
		m.Digest = digestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveChartVersionAnonAO1RemovedFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	removedFlagName := fmt.Sprintf("%v.removed", cmdPrefix)
	if cmd.Flags().Changed(removedFlagName) {

		var removedFlagName string
		if cmdPrefix == "" {
			removedFlagName = "removed"
		} else {
			removedFlagName = fmt.Sprintf("%v.removed", cmdPrefix)
		}

		removedFlagValue, err := cmd.Flags().GetBool(removedFlagName)
		if err != nil {
			return err, false
		}
		m.Removed = removedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveChartVersionAnonAO1UrlsFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlsFlagName := fmt.Sprintf("%v.urls", cmdPrefix)
	if cmd.Flags().Changed(urlsFlagName) {
		// warning: urls array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveChartVersionLabelsFlags(depth int, m *models.ChartVersion, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	labelsFlagName := fmt.Sprintf("%v.labels", cmdPrefix)
	if cmd.Flags().Changed(labelsFlagName) {
		// warning: labels array type []*Label is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
