// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/ldap"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationLdapImportLdapUserCmd returns a cmd to handle operation importLdapUser
func makeOperationLdapImportLdapUserCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "importLdapUser",
		Short: `This endpoint adds the selected available ldap users to harbor based on related configuration parameters from the system. System will try to guess the user email address and realname, add to harbor user information. If have errors when import user, will return the list of importing failed uid and the failed reason.
`,
		RunE: runOperationLdapImportLdapUser,
	}

	if err := registerOperationLdapImportLdapUserParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationLdapImportLdapUser uses cmd flags to call endpoint api
func runOperationLdapImportLdapUser(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ldap.NewImportLdapUserParams()
	if err, _ := retrieveOperationLdapImportLdapUserXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationLdapImportLdapUserUIDListFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationLdapImportLdapUserResult(appCli.Ldap.ImportLdapUser(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationLdapImportLdapUserParamFlags registers all flags needed to fill params
func registerOperationLdapImportLdapUserParamFlags(cmd *cobra.Command) error {
	if err := registerOperationLdapImportLdapUserXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationLdapImportLdapUserUIDListParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationLdapImportLdapUserXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationLdapImportLdapUserUIDListParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var uidListFlagName string
	if cmdPrefix == "" {
		uidListFlagName = "uid_list"
	} else {
		uidListFlagName = fmt.Sprintf("%v.uid_list", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(uidListFlagName, "", "Optional json string for [uid_list]. The uid listed for importing. This list will check users validity of ldap service based on configuration from the system.")

	// add flags for body
	if err := registerModelLdapImportUsersFlags(0, "ldapImportUsers", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationLdapImportLdapUserXRequestIDFlag(m *ldap.ImportLdapUserParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationLdapImportLdapUserUIDListFlag(m *ldap.ImportLdapUserParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("uid_list") {
		// Read uid_list string from cmd and unmarshal
		uidListValueStr, err := cmd.Flags().GetString("uid_list")
		if err != nil {
			return err, false
		}

		uidListValue := models.LdapImportUsers{}
		if err := json.Unmarshal([]byte(uidListValueStr), &uidListValue); err != nil {
			return fmt.Errorf("cannot unmarshal uid_list string in models.LdapImportUsers: %v", err), false
		}
		m.UIDList = &uidListValue
	}
	uidListValueModel := m.UIDList
	if swag.IsZero(uidListValueModel) {
		uidListValueModel = &models.LdapImportUsers{}
	}
	err, added := retrieveModelLdapImportUsersFlags(0, uidListValueModel, "ldapImportUsers", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.UIDList = uidListValueModel
	}
	if dryRun && debug {

		uidListValueDebugBytes, err := json.Marshal(m.UIDList)
		if err != nil {
			return err, false
		}
		logDebugf("UIDList dry-run payload: %v", string(uidListValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationLdapImportLdapUserResult parses request result and return the string content
func parseOperationLdapImportLdapUserResult(resp0 *ldap.ImportLdapUserOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning importLdapUserOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*ldap.ImportLdapUserBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*ldap.ImportLdapUserUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*ldap.ImportLdapUserForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*ldap.ImportLdapUserNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*ldap.ImportLdapUserInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response importLdapUserOK is not supported by go-swagger cli yet.

	return "", nil
}
