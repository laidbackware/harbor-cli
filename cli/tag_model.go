// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Tag

// register flags to command
func registerModelTagFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTagArtifactID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagImmutable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagPullTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagPushTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagRepositoryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTagSigned(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTagArtifactID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactIdDescription := `The ID of the artifact that the tag attached to`

	var artifactIdFlagName string
	if cmdPrefix == "" {
		artifactIdFlagName = "artifact_id"
	} else {
		artifactIdFlagName = fmt.Sprintf("%v.artifact_id", cmdPrefix)
	}

	var artifactIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(artifactIdFlagName, artifactIdFlagDefault, artifactIdDescription)

	return nil
}

func registerTagID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the tag`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTagImmutable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	immutableDescription := `The immutable status of the tag`

	var immutableFlagName string
	if cmdPrefix == "" {
		immutableFlagName = "immutable"
	} else {
		immutableFlagName = fmt.Sprintf("%v.immutable", cmdPrefix)
	}

	var immutableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(immutableFlagName, immutableFlagDefault, immutableDescription)

	return nil
}

func registerTagName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The name of the tag`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerTagPullTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullTimeDescription := `The latest pull time of the tag`

	var pullTimeFlagName string
	if cmdPrefix == "" {
		pullTimeFlagName = "pull_time"
	} else {
		pullTimeFlagName = fmt.Sprintf("%v.pull_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(pullTimeFlagName, "", pullTimeDescription)

	return nil
}

func registerTagPushTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pushTimeDescription := `The push time of the tag`

	var pushTimeFlagName string
	if cmdPrefix == "" {
		pushTimeFlagName = "push_time"
	} else {
		pushTimeFlagName = fmt.Sprintf("%v.push_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(pushTimeFlagName, "", pushTimeDescription)

	return nil
}

func registerTagRepositoryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryIdDescription := `The ID of the repository that the tag belongs to`

	var repositoryIdFlagName string
	if cmdPrefix == "" {
		repositoryIdFlagName = "repository_id"
	} else {
		repositoryIdFlagName = fmt.Sprintf("%v.repository_id", cmdPrefix)
	}

	var repositoryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repositoryIdFlagName, repositoryIdFlagDefault, repositoryIdDescription)

	return nil
}

func registerTagSigned(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	signedDescription := `The attribute indicates whether the tag is signed or not`

	var signedFlagName string
	if cmdPrefix == "" {
		signedFlagName = "signed"
	} else {
		signedFlagName = fmt.Sprintf("%v.signed", cmdPrefix)
	}

	var signedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(signedFlagName, signedFlagDefault, signedDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTagFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactIdAdded := retrieveTagArtifactIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactIdAdded

	err, idAdded := retrieveTagIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, immutableAdded := retrieveTagImmutableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || immutableAdded

	err, nameAdded := retrieveTagNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, pullTimeAdded := retrieveTagPullTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullTimeAdded

	err, pushTimeAdded := retrieveTagPushTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pushTimeAdded

	err, repositoryIdAdded := retrieveTagRepositoryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryIdAdded

	err, signedAdded := retrieveTagSignedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || signedAdded

	return nil, retAdded
}

func retrieveTagArtifactIDFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactIdFlagName := fmt.Sprintf("%v.artifact_id", cmdPrefix)
	if cmd.Flags().Changed(artifactIdFlagName) {

		var artifactIdFlagName string
		if cmdPrefix == "" {
			artifactIdFlagName = "artifact_id"
		} else {
			artifactIdFlagName = fmt.Sprintf("%v.artifact_id", cmdPrefix)
		}

		artifactIdFlagValue, err := cmd.Flags().GetInt64(artifactIdFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactID = artifactIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagIDFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagImmutableFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	immutableFlagName := fmt.Sprintf("%v.immutable", cmdPrefix)
	if cmd.Flags().Changed(immutableFlagName) {

		var immutableFlagName string
		if cmdPrefix == "" {
			immutableFlagName = "immutable"
		} else {
			immutableFlagName = fmt.Sprintf("%v.immutable", cmdPrefix)
		}

		immutableFlagValue, err := cmd.Flags().GetBool(immutableFlagName)
		if err != nil {
			return err, false
		}
		m.Immutable = immutableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagNameFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagPullTimeFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullTimeFlagName := fmt.Sprintf("%v.pull_time", cmdPrefix)
	if cmd.Flags().Changed(pullTimeFlagName) {

		var pullTimeFlagName string
		if cmdPrefix == "" {
			pullTimeFlagName = "pull_time"
		} else {
			pullTimeFlagName = fmt.Sprintf("%v.pull_time", cmdPrefix)
		}

		pullTimeFlagValueStr, err := cmd.Flags().GetString(pullTimeFlagName)
		if err != nil {
			return err, false
		}
		var pullTimeFlagValue strfmt.DateTime
		if err := pullTimeFlagValue.UnmarshalText([]byte(pullTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.PullTime = pullTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagPushTimeFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pushTimeFlagName := fmt.Sprintf("%v.push_time", cmdPrefix)
	if cmd.Flags().Changed(pushTimeFlagName) {

		var pushTimeFlagName string
		if cmdPrefix == "" {
			pushTimeFlagName = "push_time"
		} else {
			pushTimeFlagName = fmt.Sprintf("%v.push_time", cmdPrefix)
		}

		pushTimeFlagValueStr, err := cmd.Flags().GetString(pushTimeFlagName)
		if err != nil {
			return err, false
		}
		var pushTimeFlagValue strfmt.DateTime
		if err := pushTimeFlagValue.UnmarshalText([]byte(pushTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.PushTime = pushTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagRepositoryIDFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryIdFlagName := fmt.Sprintf("%v.repository_id", cmdPrefix)
	if cmd.Flags().Changed(repositoryIdFlagName) {

		var repositoryIdFlagName string
		if cmdPrefix == "" {
			repositoryIdFlagName = "repository_id"
		} else {
			repositoryIdFlagName = fmt.Sprintf("%v.repository_id", cmdPrefix)
		}

		repositoryIdFlagValue, err := cmd.Flags().GetInt64(repositoryIdFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryID = repositoryIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTagSignedFlags(depth int, m *models.Tag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	signedFlagName := fmt.Sprintf("%v.signed", cmdPrefix)
	if cmd.Flags().Changed(signedFlagName) {

		var signedFlagName string
		if cmdPrefix == "" {
			signedFlagName = "signed"
		} else {
			signedFlagName = fmt.Sprintf("%v.signed", cmdPrefix)
		}

		signedFlagValue, err := cmd.Flags().GetBool(signedFlagName)
		if err != nil {
			return err, false
		}
		m.Signed = signedFlagValue

		retAdded = true
	}

	return nil, retAdded
}
