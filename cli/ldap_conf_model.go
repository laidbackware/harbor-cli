// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for LdapConf

// register flags to command
func registerModelLdapConfFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLdapConfLdapBaseDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapConnectionTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapSearchDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapSearchPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapConfLdapVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLdapConfLdapBaseDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapBaseDnDescription := `The base dn of ldap service.`

	var ldapBaseDnFlagName string
	if cmdPrefix == "" {
		ldapBaseDnFlagName = "ldap_base_dn"
	} else {
		ldapBaseDnFlagName = fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	}

	var ldapBaseDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapBaseDnFlagName, ldapBaseDnFlagDefault, ldapBaseDnDescription)

	return nil
}

func registerLdapConfLdapConnectionTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapConnectionTimeoutDescription := `The connect timeout of ldap service(second).`

	var ldapConnectionTimeoutFlagName string
	if cmdPrefix == "" {
		ldapConnectionTimeoutFlagName = "ldap_connection_timeout"
	} else {
		ldapConnectionTimeoutFlagName = fmt.Sprintf("%v.ldap_connection_timeout", cmdPrefix)
	}

	var ldapConnectionTimeoutFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ldapConnectionTimeoutFlagName, ldapConnectionTimeoutFlagDefault, ldapConnectionTimeoutDescription)

	return nil
}

func registerLdapConfLdapFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapFilterDescription := `The serach filter of ldap service.`

	var ldapFilterFlagName string
	if cmdPrefix == "" {
		ldapFilterFlagName = "ldap_filter"
	} else {
		ldapFilterFlagName = fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	}

	var ldapFilterFlagDefault string

	_ = cmd.PersistentFlags().String(ldapFilterFlagName, ldapFilterFlagDefault, ldapFilterDescription)

	return nil
}

func registerLdapConfLdapScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapScopeDescription := `The serach scope of ldap service.`

	var ldapScopeFlagName string
	if cmdPrefix == "" {
		ldapScopeFlagName = "ldap_scope"
	} else {
		ldapScopeFlagName = fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	}

	var ldapScopeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ldapScopeFlagName, ldapScopeFlagDefault, ldapScopeDescription)

	return nil
}

func registerLdapConfLdapSearchDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapSearchDnDescription := `The search dn of ldap service.`

	var ldapSearchDnFlagName string
	if cmdPrefix == "" {
		ldapSearchDnFlagName = "ldap_search_dn"
	} else {
		ldapSearchDnFlagName = fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	}

	var ldapSearchDnFlagDefault string

	_ = cmd.PersistentFlags().String(ldapSearchDnFlagName, ldapSearchDnFlagDefault, ldapSearchDnDescription)

	return nil
}

func registerLdapConfLdapSearchPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapSearchPasswordDescription := `The search password of ldap service.`

	var ldapSearchPasswordFlagName string
	if cmdPrefix == "" {
		ldapSearchPasswordFlagName = "ldap_search_password"
	} else {
		ldapSearchPasswordFlagName = fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
	}

	var ldapSearchPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(ldapSearchPasswordFlagName, ldapSearchPasswordFlagDefault, ldapSearchPasswordDescription)

	return nil
}

func registerLdapConfLdapUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapUidDescription := `The serach uid from ldap service attributes.`

	var ldapUidFlagName string
	if cmdPrefix == "" {
		ldapUidFlagName = "ldap_uid"
	} else {
		ldapUidFlagName = fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	}

	var ldapUidFlagDefault string

	_ = cmd.PersistentFlags().String(ldapUidFlagName, ldapUidFlagDefault, ldapUidDescription)

	return nil
}

func registerLdapConfLdapURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapUrlDescription := `The url of ldap service.`

	var ldapUrlFlagName string
	if cmdPrefix == "" {
		ldapUrlFlagName = "ldap_url"
	} else {
		ldapUrlFlagName = fmt.Sprintf("%v.ldap_url", cmdPrefix)
	}

	var ldapUrlFlagDefault string

	_ = cmd.PersistentFlags().String(ldapUrlFlagName, ldapUrlFlagDefault, ldapUrlDescription)

	return nil
}

func registerLdapConfLdapVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ldapVerifyCertDescription := `Verify Ldap server certificate.`

	var ldapVerifyCertFlagName string
	if cmdPrefix == "" {
		ldapVerifyCertFlagName = "ldap_verify_cert"
	} else {
		ldapVerifyCertFlagName = fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	}

	var ldapVerifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ldapVerifyCertFlagName, ldapVerifyCertFlagDefault, ldapVerifyCertDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLdapConfFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ldapBaseDnAdded := retrieveLdapConfLdapBaseDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapBaseDnAdded

	err, ldapConnectionTimeoutAdded := retrieveLdapConfLdapConnectionTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapConnectionTimeoutAdded

	err, ldapFilterAdded := retrieveLdapConfLdapFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapFilterAdded

	err, ldapScopeAdded := retrieveLdapConfLdapScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapScopeAdded

	err, ldapSearchDnAdded := retrieveLdapConfLdapSearchDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchDnAdded

	err, ldapSearchPasswordAdded := retrieveLdapConfLdapSearchPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchPasswordAdded

	err, ldapUidAdded := retrieveLdapConfLdapUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUidAdded

	err, ldapUrlAdded := retrieveLdapConfLdapURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUrlAdded

	err, ldapVerifyCertAdded := retrieveLdapConfLdapVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapVerifyCertAdded

	return nil, retAdded
}

func retrieveLdapConfLdapBaseDnFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapBaseDnFlagName := fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapBaseDnFlagName) {

		var ldapBaseDnFlagName string
		if cmdPrefix == "" {
			ldapBaseDnFlagName = "ldap_base_dn"
		} else {
			ldapBaseDnFlagName = fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
		}

		ldapBaseDnFlagValue, err := cmd.Flags().GetString(ldapBaseDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapBaseDn = ldapBaseDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapConnectionTimeoutFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapConnectionTimeoutFlagName := fmt.Sprintf("%v.ldap_connection_timeout", cmdPrefix)
	if cmd.Flags().Changed(ldapConnectionTimeoutFlagName) {

		var ldapConnectionTimeoutFlagName string
		if cmdPrefix == "" {
			ldapConnectionTimeoutFlagName = "ldap_connection_timeout"
		} else {
			ldapConnectionTimeoutFlagName = fmt.Sprintf("%v.ldap_connection_timeout", cmdPrefix)
		}

		ldapConnectionTimeoutFlagValue, err := cmd.Flags().GetInt64(ldapConnectionTimeoutFlagName)
		if err != nil {
			return err, false
		}
		m.LdapConnectionTimeout = ldapConnectionTimeoutFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapFilterFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapFilterFlagName := fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	if cmd.Flags().Changed(ldapFilterFlagName) {

		var ldapFilterFlagName string
		if cmdPrefix == "" {
			ldapFilterFlagName = "ldap_filter"
		} else {
			ldapFilterFlagName = fmt.Sprintf("%v.ldap_filter", cmdPrefix)
		}

		ldapFilterFlagValue, err := cmd.Flags().GetString(ldapFilterFlagName)
		if err != nil {
			return err, false
		}
		m.LdapFilter = ldapFilterFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapScopeFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapScopeFlagName := fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	if cmd.Flags().Changed(ldapScopeFlagName) {

		var ldapScopeFlagName string
		if cmdPrefix == "" {
			ldapScopeFlagName = "ldap_scope"
		} else {
			ldapScopeFlagName = fmt.Sprintf("%v.ldap_scope", cmdPrefix)
		}

		ldapScopeFlagValue, err := cmd.Flags().GetInt64(ldapScopeFlagName)
		if err != nil {
			return err, false
		}
		m.LdapScope = ldapScopeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapSearchDnFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapSearchDnFlagName := fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapSearchDnFlagName) {

		var ldapSearchDnFlagName string
		if cmdPrefix == "" {
			ldapSearchDnFlagName = "ldap_search_dn"
		} else {
			ldapSearchDnFlagName = fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
		}

		ldapSearchDnFlagValue, err := cmd.Flags().GetString(ldapSearchDnFlagName)
		if err != nil {
			return err, false
		}
		m.LdapSearchDn = ldapSearchDnFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapSearchPasswordFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapSearchPasswordFlagName := fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
	if cmd.Flags().Changed(ldapSearchPasswordFlagName) {

		var ldapSearchPasswordFlagName string
		if cmdPrefix == "" {
			ldapSearchPasswordFlagName = "ldap_search_password"
		} else {
			ldapSearchPasswordFlagName = fmt.Sprintf("%v.ldap_search_password", cmdPrefix)
		}

		ldapSearchPasswordFlagValue, err := cmd.Flags().GetString(ldapSearchPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.LdapSearchPassword = ldapSearchPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapUIDFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUidFlagName := fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	if cmd.Flags().Changed(ldapUidFlagName) {

		var ldapUidFlagName string
		if cmdPrefix == "" {
			ldapUidFlagName = "ldap_uid"
		} else {
			ldapUidFlagName = fmt.Sprintf("%v.ldap_uid", cmdPrefix)
		}

		ldapUidFlagValue, err := cmd.Flags().GetString(ldapUidFlagName)
		if err != nil {
			return err, false
		}
		m.LdapUID = ldapUidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapURLFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUrlFlagName := fmt.Sprintf("%v.ldap_url", cmdPrefix)
	if cmd.Flags().Changed(ldapUrlFlagName) {

		var ldapUrlFlagName string
		if cmdPrefix == "" {
			ldapUrlFlagName = "ldap_url"
		} else {
			ldapUrlFlagName = fmt.Sprintf("%v.ldap_url", cmdPrefix)
		}

		ldapUrlFlagValue, err := cmd.Flags().GetString(ldapUrlFlagName)
		if err != nil {
			return err, false
		}
		m.LdapURL = ldapUrlFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapConfLdapVerifyCertFlags(depth int, m *models.LdapConf, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapVerifyCertFlagName := fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(ldapVerifyCertFlagName) {

		var ldapVerifyCertFlagName string
		if cmdPrefix == "" {
			ldapVerifyCertFlagName = "ldap_verify_cert"
		} else {
			ldapVerifyCertFlagName = fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
		}

		ldapVerifyCertFlagValue, err := cmd.Flags().GetBool(ldapVerifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.LdapVerifyCert = ldapVerifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}
