// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ProjectSummary

// register flags to command
func registerModelProjectSummaryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectSummaryChartCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryDeveloperCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryGuestCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryLimitedGuestCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryMaintainerCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryProjectAdminCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryQuota(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectSummaryRepoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectSummaryChartCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chartCountDescription := `The total number of charts under this project.`

	var chartCountFlagName string
	if cmdPrefix == "" {
		chartCountFlagName = "chart_count"
	} else {
		chartCountFlagName = fmt.Sprintf("%v.chart_count", cmdPrefix)
	}

	var chartCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(chartCountFlagName, chartCountFlagDefault, chartCountDescription)

	return nil
}

func registerProjectSummaryDeveloperCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	developerCountDescription := `The total number of developer members.`

	var developerCountFlagName string
	if cmdPrefix == "" {
		developerCountFlagName = "developer_count"
	} else {
		developerCountFlagName = fmt.Sprintf("%v.developer_count", cmdPrefix)
	}

	var developerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(developerCountFlagName, developerCountFlagDefault, developerCountDescription)

	return nil
}

func registerProjectSummaryGuestCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	guestCountDescription := `The total number of guest members.`

	var guestCountFlagName string
	if cmdPrefix == "" {
		guestCountFlagName = "guest_count"
	} else {
		guestCountFlagName = fmt.Sprintf("%v.guest_count", cmdPrefix)
	}

	var guestCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(guestCountFlagName, guestCountFlagDefault, guestCountDescription)

	return nil
}

func registerProjectSummaryLimitedGuestCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	limitedGuestCountDescription := `The total number of limited guest members.`

	var limitedGuestCountFlagName string
	if cmdPrefix == "" {
		limitedGuestCountFlagName = "limited_guest_count"
	} else {
		limitedGuestCountFlagName = fmt.Sprintf("%v.limited_guest_count", cmdPrefix)
	}

	var limitedGuestCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(limitedGuestCountFlagName, limitedGuestCountFlagDefault, limitedGuestCountDescription)

	return nil
}

func registerProjectSummaryMaintainerCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maintainerCountDescription := `The total number of maintainer members.`

	var maintainerCountFlagName string
	if cmdPrefix == "" {
		maintainerCountFlagName = "maintainer_count"
	} else {
		maintainerCountFlagName = fmt.Sprintf("%v.maintainer_count", cmdPrefix)
	}

	var maintainerCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(maintainerCountFlagName, maintainerCountFlagDefault, maintainerCountDescription)

	return nil
}

func registerProjectSummaryProjectAdminCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectAdminCountDescription := `The total number of project admin members.`

	var projectAdminCountFlagName string
	if cmdPrefix == "" {
		projectAdminCountFlagName = "project_admin_count"
	} else {
		projectAdminCountFlagName = fmt.Sprintf("%v.project_admin_count", cmdPrefix)
	}

	var projectAdminCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectAdminCountFlagName, projectAdminCountFlagDefault, projectAdminCountDescription)

	return nil
}

func registerProjectSummaryQuota(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var quotaFlagName string
	if cmdPrefix == "" {
		quotaFlagName = "quota"
	} else {
		quotaFlagName = fmt.Sprintf("%v.quota", cmdPrefix)
	}

	if err := registerModelProjectSummaryQuotaFlags(depth+1, quotaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectSummaryRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var registryFlagName string
	if cmdPrefix == "" {
		registryFlagName = "registry"
	} else {
		registryFlagName = fmt.Sprintf("%v.registry", cmdPrefix)
	}

	if err := registerModelRegistryFlags(depth+1, registryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectSummaryRepoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repoCountDescription := `The number of the repositories under this project.`

	var repoCountFlagName string
	if cmdPrefix == "" {
		repoCountFlagName = "repo_count"
	} else {
		repoCountFlagName = fmt.Sprintf("%v.repo_count", cmdPrefix)
	}

	var repoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repoCountFlagName, repoCountFlagDefault, repoCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectSummaryFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartCountAdded := retrieveProjectSummaryChartCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartCountAdded

	err, developerCountAdded := retrieveProjectSummaryDeveloperCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || developerCountAdded

	err, guestCountAdded := retrieveProjectSummaryGuestCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || guestCountAdded

	err, limitedGuestCountAdded := retrieveProjectSummaryLimitedGuestCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || limitedGuestCountAdded

	err, maintainerCountAdded := retrieveProjectSummaryMaintainerCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintainerCountAdded

	err, projectAdminCountAdded := retrieveProjectSummaryProjectAdminCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectAdminCountAdded

	err, quotaAdded := retrieveProjectSummaryQuotaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaAdded

	err, registryAdded := retrieveProjectSummaryRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryAdded

	err, repoCountAdded := retrieveProjectSummaryRepoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repoCountAdded

	return nil, retAdded
}

func retrieveProjectSummaryChartCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartCountFlagName := fmt.Sprintf("%v.chart_count", cmdPrefix)
	if cmd.Flags().Changed(chartCountFlagName) {

		var chartCountFlagName string
		if cmdPrefix == "" {
			chartCountFlagName = "chart_count"
		} else {
			chartCountFlagName = fmt.Sprintf("%v.chart_count", cmdPrefix)
		}

		chartCountFlagValue, err := cmd.Flags().GetInt64(chartCountFlagName)
		if err != nil {
			return err, false
		}
		m.ChartCount = chartCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryDeveloperCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	developerCountFlagName := fmt.Sprintf("%v.developer_count", cmdPrefix)
	if cmd.Flags().Changed(developerCountFlagName) {

		var developerCountFlagName string
		if cmdPrefix == "" {
			developerCountFlagName = "developer_count"
		} else {
			developerCountFlagName = fmt.Sprintf("%v.developer_count", cmdPrefix)
		}

		developerCountFlagValue, err := cmd.Flags().GetInt64(developerCountFlagName)
		if err != nil {
			return err, false
		}
		m.DeveloperCount = developerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryGuestCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	guestCountFlagName := fmt.Sprintf("%v.guest_count", cmdPrefix)
	if cmd.Flags().Changed(guestCountFlagName) {

		var guestCountFlagName string
		if cmdPrefix == "" {
			guestCountFlagName = "guest_count"
		} else {
			guestCountFlagName = fmt.Sprintf("%v.guest_count", cmdPrefix)
		}

		guestCountFlagValue, err := cmd.Flags().GetInt64(guestCountFlagName)
		if err != nil {
			return err, false
		}
		m.GuestCount = guestCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryLimitedGuestCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	limitedGuestCountFlagName := fmt.Sprintf("%v.limited_guest_count", cmdPrefix)
	if cmd.Flags().Changed(limitedGuestCountFlagName) {

		var limitedGuestCountFlagName string
		if cmdPrefix == "" {
			limitedGuestCountFlagName = "limited_guest_count"
		} else {
			limitedGuestCountFlagName = fmt.Sprintf("%v.limited_guest_count", cmdPrefix)
		}

		limitedGuestCountFlagValue, err := cmd.Flags().GetInt64(limitedGuestCountFlagName)
		if err != nil {
			return err, false
		}
		m.LimitedGuestCount = limitedGuestCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryMaintainerCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintainerCountFlagName := fmt.Sprintf("%v.maintainer_count", cmdPrefix)
	if cmd.Flags().Changed(maintainerCountFlagName) {

		var maintainerCountFlagName string
		if cmdPrefix == "" {
			maintainerCountFlagName = "maintainer_count"
		} else {
			maintainerCountFlagName = fmt.Sprintf("%v.maintainer_count", cmdPrefix)
		}

		maintainerCountFlagValue, err := cmd.Flags().GetInt64(maintainerCountFlagName)
		if err != nil {
			return err, false
		}
		m.MaintainerCount = maintainerCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryProjectAdminCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectAdminCountFlagName := fmt.Sprintf("%v.project_admin_count", cmdPrefix)
	if cmd.Flags().Changed(projectAdminCountFlagName) {

		var projectAdminCountFlagName string
		if cmdPrefix == "" {
			projectAdminCountFlagName = "project_admin_count"
		} else {
			projectAdminCountFlagName = fmt.Sprintf("%v.project_admin_count", cmdPrefix)
		}

		projectAdminCountFlagValue, err := cmd.Flags().GetInt64(projectAdminCountFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectAdminCount = projectAdminCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectSummaryQuotaFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quotaFlagName := fmt.Sprintf("%v.quota", cmdPrefix)
	if cmd.Flags().Changed(quotaFlagName) {
		// info: complex object quota ProjectSummaryQuota is retrieved outside this Changed() block
	}
	quotaFlagValue := m.Quota
	if swag.IsZero(quotaFlagValue) {
		quotaFlagValue = &models.ProjectSummaryQuota{}
	}

	err, quotaAdded := retrieveModelProjectSummaryQuotaFlags(depth+1, quotaFlagValue, quotaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaAdded
	if quotaAdded {
		m.Quota = quotaFlagValue
	}

	return nil, retAdded
}

func retrieveProjectSummaryRegistryFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryFlagName := fmt.Sprintf("%v.registry", cmdPrefix)
	if cmd.Flags().Changed(registryFlagName) {
		// info: complex object registry Registry is retrieved outside this Changed() block
	}
	registryFlagValue := m.Registry
	if swag.IsZero(registryFlagValue) {
		registryFlagValue = &models.Registry{}
	}

	err, registryAdded := retrieveModelRegistryFlags(depth+1, registryFlagValue, registryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryAdded
	if registryAdded {
		m.Registry = registryFlagValue
	}

	return nil, retAdded
}

func retrieveProjectSummaryRepoCountFlags(depth int, m *models.ProjectSummary, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repoCountFlagName := fmt.Sprintf("%v.repo_count", cmdPrefix)
	if cmd.Flags().Changed(repoCountFlagName) {

		var repoCountFlagName string
		if cmdPrefix == "" {
			repoCountFlagName = "repo_count"
		} else {
			repoCountFlagName = fmt.Sprintf("%v.repo_count", cmdPrefix)
		}

		repoCountFlagValue, err := cmd.Flags().GetInt64(repoCountFlagName)
		if err != nil {
			return err, false
		}
		m.RepoCount = repoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}
