// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ConfigurationsResponse

// register flags to command
func registerModelConfigurationsResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigurationsResponseAuthMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailFrom(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailHost(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailIdentity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailInsecure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailSsl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseEmailUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyAdminGroups(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyAdminUsernames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyServerCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxySkipSearch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyTokenreviewEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseHTTPAuthproxyVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapBaseDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupAdminDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupAttributeName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupBaseDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupMembershipAttribute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupSearchFilter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapGroupSearchScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapSearchDn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapTimeout(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapUID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseLdapVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseNotificationEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcAdminGroup(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcAutoOnboard(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcExtraRedirectParms(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcGroupsClaim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcUserClaim(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseOidcVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseProjectCreationRestriction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseQuotaPerProjectEnable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseReadOnly(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseRobotNamePrefix(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseRobotTokenDuration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseScanAllPolicy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseSelfRegistration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseStoragePerProject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseTokenExpiration(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseUaaClientID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseUaaClientSecret(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseUaaEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseUaaVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseAuthMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var authModeFlagName string
	if cmdPrefix == "" {
		authModeFlagName = "auth_mode"
	} else {
		authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, authModeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailFrom(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailFromFlagName string
	if cmdPrefix == "" {
		emailFromFlagName = "email_from"
	} else {
		emailFromFlagName = fmt.Sprintf("%v.email_from", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, emailFromFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailHost(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailHostFlagName string
	if cmdPrefix == "" {
		emailHostFlagName = "email_host"
	} else {
		emailHostFlagName = fmt.Sprintf("%v.email_host", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, emailHostFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailIdentity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailIdentityFlagName string
	if cmdPrefix == "" {
		emailIdentityFlagName = "email_identity"
	} else {
		emailIdentityFlagName = fmt.Sprintf("%v.email_identity", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, emailIdentityFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailInsecure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailInsecureFlagName string
	if cmdPrefix == "" {
		emailInsecureFlagName = "email_insecure"
	} else {
		emailInsecureFlagName = fmt.Sprintf("%v.email_insecure", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, emailInsecureFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailPortFlagName string
	if cmdPrefix == "" {
		emailPortFlagName = "email_port"
	} else {
		emailPortFlagName = fmt.Sprintf("%v.email_port", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, emailPortFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailSsl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailSslFlagName string
	if cmdPrefix == "" {
		emailSslFlagName = "email_ssl"
	} else {
		emailSslFlagName = fmt.Sprintf("%v.email_ssl", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, emailSslFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseEmailUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var emailUsernameFlagName string
	if cmdPrefix == "" {
		emailUsernameFlagName = "email_username"
	} else {
		emailUsernameFlagName = fmt.Sprintf("%v.email_username", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, emailUsernameFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyAdminGroups(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyAdminGroupsFlagName string
	if cmdPrefix == "" {
		httpAuthproxyAdminGroupsFlagName = "http_authproxy_admin_groups"
	} else {
		httpAuthproxyAdminGroupsFlagName = fmt.Sprintf("%v.http_authproxy_admin_groups", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, httpAuthproxyAdminGroupsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyAdminUsernames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyAdminUsernamesFlagName string
	if cmdPrefix == "" {
		httpAuthproxyAdminUsernamesFlagName = "http_authproxy_admin_usernames"
	} else {
		httpAuthproxyAdminUsernamesFlagName = fmt.Sprintf("%v.http_authproxy_admin_usernames", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, httpAuthproxyAdminUsernamesFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyEndpointFlagName string
	if cmdPrefix == "" {
		httpAuthproxyEndpointFlagName = "http_authproxy_endpoint"
	} else {
		httpAuthproxyEndpointFlagName = fmt.Sprintf("%v.http_authproxy_endpoint", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, httpAuthproxyEndpointFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyServerCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyServerCertificateFlagName string
	if cmdPrefix == "" {
		httpAuthproxyServerCertificateFlagName = "http_authproxy_server_certificate"
	} else {
		httpAuthproxyServerCertificateFlagName = fmt.Sprintf("%v.http_authproxy_server_certificate", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, httpAuthproxyServerCertificateFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxySkipSearch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxySkipSearchFlagName string
	if cmdPrefix == "" {
		httpAuthproxySkipSearchFlagName = "http_authproxy_skip_search"
	} else {
		httpAuthproxySkipSearchFlagName = fmt.Sprintf("%v.http_authproxy_skip_search", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, httpAuthproxySkipSearchFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyTokenreviewEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyTokenreviewEndpointFlagName string
	if cmdPrefix == "" {
		httpAuthproxyTokenreviewEndpointFlagName = "http_authproxy_tokenreview_endpoint"
	} else {
		httpAuthproxyTokenreviewEndpointFlagName = fmt.Sprintf("%v.http_authproxy_tokenreview_endpoint", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, httpAuthproxyTokenreviewEndpointFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseHTTPAuthproxyVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var httpAuthproxyVerifyCertFlagName string
	if cmdPrefix == "" {
		httpAuthproxyVerifyCertFlagName = "http_authproxy_verify_cert"
	} else {
		httpAuthproxyVerifyCertFlagName = fmt.Sprintf("%v.http_authproxy_verify_cert", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, httpAuthproxyVerifyCertFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapBaseDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapBaseDnFlagName string
	if cmdPrefix == "" {
		ldapBaseDnFlagName = "ldap_base_dn"
	} else {
		ldapBaseDnFlagName = fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapBaseDnFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapFilterFlagName string
	if cmdPrefix == "" {
		ldapFilterFlagName = "ldap_filter"
	} else {
		ldapFilterFlagName = fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapFilterFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupAdminDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupAdminDnFlagName string
	if cmdPrefix == "" {
		ldapGroupAdminDnFlagName = "ldap_group_admin_dn"
	} else {
		ldapGroupAdminDnFlagName = fmt.Sprintf("%v.ldap_group_admin_dn", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapGroupAdminDnFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupAttributeName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupAttributeNameFlagName string
	if cmdPrefix == "" {
		ldapGroupAttributeNameFlagName = "ldap_group_attribute_name"
	} else {
		ldapGroupAttributeNameFlagName = fmt.Sprintf("%v.ldap_group_attribute_name", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapGroupAttributeNameFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupBaseDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupBaseDnFlagName string
	if cmdPrefix == "" {
		ldapGroupBaseDnFlagName = "ldap_group_base_dn"
	} else {
		ldapGroupBaseDnFlagName = fmt.Sprintf("%v.ldap_group_base_dn", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapGroupBaseDnFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupMembershipAttribute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupMembershipAttributeFlagName string
	if cmdPrefix == "" {
		ldapGroupMembershipAttributeFlagName = "ldap_group_membership_attribute"
	} else {
		ldapGroupMembershipAttributeFlagName = fmt.Sprintf("%v.ldap_group_membership_attribute", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapGroupMembershipAttributeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupSearchFilter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupSearchFilterFlagName string
	if cmdPrefix == "" {
		ldapGroupSearchFilterFlagName = "ldap_group_search_filter"
	} else {
		ldapGroupSearchFilterFlagName = fmt.Sprintf("%v.ldap_group_search_filter", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapGroupSearchFilterFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapGroupSearchScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapGroupSearchScopeFlagName string
	if cmdPrefix == "" {
		ldapGroupSearchScopeFlagName = "ldap_group_search_scope"
	} else {
		ldapGroupSearchScopeFlagName = fmt.Sprintf("%v.ldap_group_search_scope", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, ldapGroupSearchScopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapScopeFlagName string
	if cmdPrefix == "" {
		ldapScopeFlagName = "ldap_scope"
	} else {
		ldapScopeFlagName = fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, ldapScopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapSearchDn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapSearchDnFlagName string
	if cmdPrefix == "" {
		ldapSearchDnFlagName = "ldap_search_dn"
	} else {
		ldapSearchDnFlagName = fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapSearchDnFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapTimeout(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapTimeoutFlagName string
	if cmdPrefix == "" {
		ldapTimeoutFlagName = "ldap_timeout"
	} else {
		ldapTimeoutFlagName = fmt.Sprintf("%v.ldap_timeout", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, ldapTimeoutFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapUID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapUidFlagName string
	if cmdPrefix == "" {
		ldapUidFlagName = "ldap_uid"
	} else {
		ldapUidFlagName = fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapUidFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapUrlFlagName string
	if cmdPrefix == "" {
		ldapUrlFlagName = "ldap_url"
	} else {
		ldapUrlFlagName = fmt.Sprintf("%v.ldap_url", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, ldapUrlFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseLdapVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var ldapVerifyCertFlagName string
	if cmdPrefix == "" {
		ldapVerifyCertFlagName = "ldap_verify_cert"
	} else {
		ldapVerifyCertFlagName = fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, ldapVerifyCertFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseNotificationEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var notificationEnableFlagName string
	if cmdPrefix == "" {
		notificationEnableFlagName = "notification_enable"
	} else {
		notificationEnableFlagName = fmt.Sprintf("%v.notification_enable", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, notificationEnableFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcAdminGroup(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcAdminGroupFlagName string
	if cmdPrefix == "" {
		oidcAdminGroupFlagName = "oidc_admin_group"
	} else {
		oidcAdminGroupFlagName = fmt.Sprintf("%v.oidc_admin_group", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcAdminGroupFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcAutoOnboard(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcAutoOnboardFlagName string
	if cmdPrefix == "" {
		oidcAutoOnboardFlagName = "oidc_auto_onboard"
	} else {
		oidcAutoOnboardFlagName = fmt.Sprintf("%v.oidc_auto_onboard", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, oidcAutoOnboardFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcClientIdFlagName string
	if cmdPrefix == "" {
		oidcClientIdFlagName = "oidc_client_id"
	} else {
		oidcClientIdFlagName = fmt.Sprintf("%v.oidc_client_id", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcClientIdFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcEndpointFlagName string
	if cmdPrefix == "" {
		oidcEndpointFlagName = "oidc_endpoint"
	} else {
		oidcEndpointFlagName = fmt.Sprintf("%v.oidc_endpoint", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcEndpointFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcExtraRedirectParms(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcExtraRedirectParmsFlagName string
	if cmdPrefix == "" {
		oidcExtraRedirectParmsFlagName = "oidc_extra_redirect_parms"
	} else {
		oidcExtraRedirectParmsFlagName = fmt.Sprintf("%v.oidc_extra_redirect_parms", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcExtraRedirectParmsFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcGroupsClaim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcGroupsClaimFlagName string
	if cmdPrefix == "" {
		oidcGroupsClaimFlagName = "oidc_groups_claim"
	} else {
		oidcGroupsClaimFlagName = fmt.Sprintf("%v.oidc_groups_claim", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcGroupsClaimFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcNameFlagName string
	if cmdPrefix == "" {
		oidcNameFlagName = "oidc_name"
	} else {
		oidcNameFlagName = fmt.Sprintf("%v.oidc_name", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcNameFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcScopeFlagName string
	if cmdPrefix == "" {
		oidcScopeFlagName = "oidc_scope"
	} else {
		oidcScopeFlagName = fmt.Sprintf("%v.oidc_scope", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcScopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcUserClaim(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcUserClaimFlagName string
	if cmdPrefix == "" {
		oidcUserClaimFlagName = "oidc_user_claim"
	} else {
		oidcUserClaimFlagName = fmt.Sprintf("%v.oidc_user_claim", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, oidcUserClaimFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseOidcVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcVerifyCertFlagName string
	if cmdPrefix == "" {
		oidcVerifyCertFlagName = "oidc_verify_cert"
	} else {
		oidcVerifyCertFlagName = fmt.Sprintf("%v.oidc_verify_cert", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, oidcVerifyCertFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseProjectCreationRestriction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var projectCreationRestrictionFlagName string
	if cmdPrefix == "" {
		projectCreationRestrictionFlagName = "project_creation_restriction"
	} else {
		projectCreationRestrictionFlagName = fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, projectCreationRestrictionFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseQuotaPerProjectEnable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var quotaPerProjectEnableFlagName string
	if cmdPrefix == "" {
		quotaPerProjectEnableFlagName = "quota_per_project_enable"
	} else {
		quotaPerProjectEnableFlagName = fmt.Sprintf("%v.quota_per_project_enable", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, quotaPerProjectEnableFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseReadOnly(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var readOnlyFlagName string
	if cmdPrefix == "" {
		readOnlyFlagName = "read_only"
	} else {
		readOnlyFlagName = fmt.Sprintf("%v.read_only", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, readOnlyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseRobotNamePrefix(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var robotNamePrefixFlagName string
	if cmdPrefix == "" {
		robotNamePrefixFlagName = "robot_name_prefix"
	} else {
		robotNamePrefixFlagName = fmt.Sprintf("%v.robot_name_prefix", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, robotNamePrefixFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseRobotTokenDuration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var robotTokenDurationFlagName string
	if cmdPrefix == "" {
		robotTokenDurationFlagName = "robot_token_duration"
	} else {
		robotTokenDurationFlagName = fmt.Sprintf("%v.robot_token_duration", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, robotTokenDurationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseScanAllPolicy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scanAllPolicyFlagName string
	if cmdPrefix == "" {
		scanAllPolicyFlagName = "scan_all_policy"
	} else {
		scanAllPolicyFlagName = fmt.Sprintf("%v.scan_all_policy", cmdPrefix)
	}

	if err := registerModelConfigurationsResponseScanAllPolicyFlags(depth+1, scanAllPolicyFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseSelfRegistration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var selfRegistrationFlagName string
	if cmdPrefix == "" {
		selfRegistrationFlagName = "self_registration"
	} else {
		selfRegistrationFlagName = fmt.Sprintf("%v.self_registration", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, selfRegistrationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseStoragePerProject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var storagePerProjectFlagName string
	if cmdPrefix == "" {
		storagePerProjectFlagName = "storage_per_project"
	} else {
		storagePerProjectFlagName = fmt.Sprintf("%v.storage_per_project", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, storagePerProjectFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseTokenExpiration(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var tokenExpirationFlagName string
	if cmdPrefix == "" {
		tokenExpirationFlagName = "token_expiration"
	} else {
		tokenExpirationFlagName = fmt.Sprintf("%v.token_expiration", cmdPrefix)
	}

	if err := registerModelIntegerConfigItemFlags(depth+1, tokenExpirationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseUaaClientID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var uaaClientIdFlagName string
	if cmdPrefix == "" {
		uaaClientIdFlagName = "uaa_client_id"
	} else {
		uaaClientIdFlagName = fmt.Sprintf("%v.uaa_client_id", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, uaaClientIdFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseUaaClientSecret(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var uaaClientSecretFlagName string
	if cmdPrefix == "" {
		uaaClientSecretFlagName = "uaa_client_secret"
	} else {
		uaaClientSecretFlagName = fmt.Sprintf("%v.uaa_client_secret", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, uaaClientSecretFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseUaaEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var uaaEndpointFlagName string
	if cmdPrefix == "" {
		uaaEndpointFlagName = "uaa_endpoint"
	} else {
		uaaEndpointFlagName = fmt.Sprintf("%v.uaa_endpoint", cmdPrefix)
	}

	if err := registerModelStringConfigItemFlags(depth+1, uaaEndpointFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseUaaVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var uaaVerifyCertFlagName string
	if cmdPrefix == "" {
		uaaVerifyCertFlagName = "uaa_verify_cert"
	} else {
		uaaVerifyCertFlagName = fmt.Sprintf("%v.uaa_verify_cert", cmdPrefix)
	}

	if err := registerModelBoolConfigItemFlags(depth+1, uaaVerifyCertFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigurationsResponseFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authModeAdded := retrieveConfigurationsResponseAuthModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authModeAdded

	err, emailFromAdded := retrieveConfigurationsResponseEmailFromFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailFromAdded

	err, emailHostAdded := retrieveConfigurationsResponseEmailHostFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailHostAdded

	err, emailIdentityAdded := retrieveConfigurationsResponseEmailIdentityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailIdentityAdded

	err, emailInsecureAdded := retrieveConfigurationsResponseEmailInsecureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailInsecureAdded

	err, emailPortAdded := retrieveConfigurationsResponseEmailPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailPortAdded

	err, emailSslAdded := retrieveConfigurationsResponseEmailSslFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailSslAdded

	err, emailUsernameAdded := retrieveConfigurationsResponseEmailUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailUsernameAdded

	err, httpAuthproxyAdminGroupsAdded := retrieveConfigurationsResponseHTTPAuthproxyAdminGroupsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminGroupsAdded

	err, httpAuthproxyAdminUsernamesAdded := retrieveConfigurationsResponseHTTPAuthproxyAdminUsernamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminUsernamesAdded

	err, httpAuthproxyEndpointAdded := retrieveConfigurationsResponseHTTPAuthproxyEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyEndpointAdded

	err, httpAuthproxyServerCertificateAdded := retrieveConfigurationsResponseHTTPAuthproxyServerCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyServerCertificateAdded

	err, httpAuthproxySkipSearchAdded := retrieveConfigurationsResponseHTTPAuthproxySkipSearchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxySkipSearchAdded

	err, httpAuthproxyTokenreviewEndpointAdded := retrieveConfigurationsResponseHTTPAuthproxyTokenreviewEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyTokenreviewEndpointAdded

	err, httpAuthproxyVerifyCertAdded := retrieveConfigurationsResponseHTTPAuthproxyVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyVerifyCertAdded

	err, ldapBaseDnAdded := retrieveConfigurationsResponseLdapBaseDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapBaseDnAdded

	err, ldapFilterAdded := retrieveConfigurationsResponseLdapFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapFilterAdded

	err, ldapGroupAdminDnAdded := retrieveConfigurationsResponseLdapGroupAdminDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAdminDnAdded

	err, ldapGroupAttributeNameAdded := retrieveConfigurationsResponseLdapGroupAttributeNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAttributeNameAdded

	err, ldapGroupBaseDnAdded := retrieveConfigurationsResponseLdapGroupBaseDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupBaseDnAdded

	err, ldapGroupMembershipAttributeAdded := retrieveConfigurationsResponseLdapGroupMembershipAttributeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupMembershipAttributeAdded

	err, ldapGroupSearchFilterAdded := retrieveConfigurationsResponseLdapGroupSearchFilterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchFilterAdded

	err, ldapGroupSearchScopeAdded := retrieveConfigurationsResponseLdapGroupSearchScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchScopeAdded

	err, ldapScopeAdded := retrieveConfigurationsResponseLdapScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapScopeAdded

	err, ldapSearchDnAdded := retrieveConfigurationsResponseLdapSearchDnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchDnAdded

	err, ldapTimeoutAdded := retrieveConfigurationsResponseLdapTimeoutFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapTimeoutAdded

	err, ldapUidAdded := retrieveConfigurationsResponseLdapUIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUidAdded

	err, ldapUrlAdded := retrieveConfigurationsResponseLdapURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUrlAdded

	err, ldapVerifyCertAdded := retrieveConfigurationsResponseLdapVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapVerifyCertAdded

	err, notificationEnableAdded := retrieveConfigurationsResponseNotificationEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notificationEnableAdded

	err, oidcAdminGroupAdded := retrieveConfigurationsResponseOidcAdminGroupFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAdminGroupAdded

	err, oidcAutoOnboardAdded := retrieveConfigurationsResponseOidcAutoOnboardFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAutoOnboardAdded

	err, oidcClientIdAdded := retrieveConfigurationsResponseOidcClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcClientIdAdded

	err, oidcEndpointAdded := retrieveConfigurationsResponseOidcEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcEndpointAdded

	err, oidcExtraRedirectParmsAdded := retrieveConfigurationsResponseOidcExtraRedirectParmsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcExtraRedirectParmsAdded

	err, oidcGroupsClaimAdded := retrieveConfigurationsResponseOidcGroupsClaimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcGroupsClaimAdded

	err, oidcNameAdded := retrieveConfigurationsResponseOidcNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcNameAdded

	err, oidcScopeAdded := retrieveConfigurationsResponseOidcScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcScopeAdded

	err, oidcUserClaimAdded := retrieveConfigurationsResponseOidcUserClaimFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcUserClaimAdded

	err, oidcVerifyCertAdded := retrieveConfigurationsResponseOidcVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcVerifyCertAdded

	err, projectCreationRestrictionAdded := retrieveConfigurationsResponseProjectCreationRestrictionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectCreationRestrictionAdded

	err, quotaPerProjectEnableAdded := retrieveConfigurationsResponseQuotaPerProjectEnableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaPerProjectEnableAdded

	err, readOnlyAdded := retrieveConfigurationsResponseReadOnlyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded

	err, robotNamePrefixAdded := retrieveConfigurationsResponseRobotNamePrefixFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotNamePrefixAdded

	err, robotTokenDurationAdded := retrieveConfigurationsResponseRobotTokenDurationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotTokenDurationAdded

	err, scanAllPolicyAdded := retrieveConfigurationsResponseScanAllPolicyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scanAllPolicyAdded

	err, selfRegistrationAdded := retrieveConfigurationsResponseSelfRegistrationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selfRegistrationAdded

	err, storagePerProjectAdded := retrieveConfigurationsResponseStoragePerProjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storagePerProjectAdded

	err, tokenExpirationAdded := retrieveConfigurationsResponseTokenExpirationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenExpirationAdded

	err, uaaClientIdAdded := retrieveConfigurationsResponseUaaClientIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientIdAdded

	err, uaaClientSecretAdded := retrieveConfigurationsResponseUaaClientSecretFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientSecretAdded

	err, uaaEndpointAdded := retrieveConfigurationsResponseUaaEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaEndpointAdded

	err, uaaVerifyCertAdded := retrieveConfigurationsResponseUaaVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaVerifyCertAdded

	return nil, retAdded
}

func retrieveConfigurationsResponseAuthModeFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authModeFlagName := fmt.Sprintf("%v.auth_mode", cmdPrefix)
	if cmd.Flags().Changed(authModeFlagName) {
		// info: complex object auth_mode StringConfigItem is retrieved outside this Changed() block
	}
	authModeFlagValue := m.AuthMode
	if swag.IsZero(authModeFlagValue) {
		authModeFlagValue = &models.StringConfigItem{}
	}

	err, authModeAdded := retrieveModelStringConfigItemFlags(depth+1, authModeFlagValue, authModeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authModeAdded
	if authModeAdded {
		m.AuthMode = authModeFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailFromFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFromFlagName := fmt.Sprintf("%v.email_from", cmdPrefix)
	if cmd.Flags().Changed(emailFromFlagName) {
		// info: complex object email_from StringConfigItem is retrieved outside this Changed() block
	}
	emailFromFlagValue := m.EmailFrom
	if swag.IsZero(emailFromFlagValue) {
		emailFromFlagValue = &models.StringConfigItem{}
	}

	err, emailFromAdded := retrieveModelStringConfigItemFlags(depth+1, emailFromFlagValue, emailFromFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailFromAdded
	if emailFromAdded {
		m.EmailFrom = emailFromFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailHostFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailHostFlagName := fmt.Sprintf("%v.email_host", cmdPrefix)
	if cmd.Flags().Changed(emailHostFlagName) {
		// info: complex object email_host StringConfigItem is retrieved outside this Changed() block
	}
	emailHostFlagValue := m.EmailHost
	if swag.IsZero(emailHostFlagValue) {
		emailHostFlagValue = &models.StringConfigItem{}
	}

	err, emailHostAdded := retrieveModelStringConfigItemFlags(depth+1, emailHostFlagValue, emailHostFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailHostAdded
	if emailHostAdded {
		m.EmailHost = emailHostFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailIdentityFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailIdentityFlagName := fmt.Sprintf("%v.email_identity", cmdPrefix)
	if cmd.Flags().Changed(emailIdentityFlagName) {
		// info: complex object email_identity StringConfigItem is retrieved outside this Changed() block
	}
	emailIdentityFlagValue := m.EmailIdentity
	if swag.IsZero(emailIdentityFlagValue) {
		emailIdentityFlagValue = &models.StringConfigItem{}
	}

	err, emailIdentityAdded := retrieveModelStringConfigItemFlags(depth+1, emailIdentityFlagValue, emailIdentityFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailIdentityAdded
	if emailIdentityAdded {
		m.EmailIdentity = emailIdentityFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailInsecureFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailInsecureFlagName := fmt.Sprintf("%v.email_insecure", cmdPrefix)
	if cmd.Flags().Changed(emailInsecureFlagName) {
		// info: complex object email_insecure BoolConfigItem is retrieved outside this Changed() block
	}
	emailInsecureFlagValue := m.EmailInsecure
	if swag.IsZero(emailInsecureFlagValue) {
		emailInsecureFlagValue = &models.BoolConfigItem{}
	}

	err, emailInsecureAdded := retrieveModelBoolConfigItemFlags(depth+1, emailInsecureFlagValue, emailInsecureFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailInsecureAdded
	if emailInsecureAdded {
		m.EmailInsecure = emailInsecureFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailPortFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailPortFlagName := fmt.Sprintf("%v.email_port", cmdPrefix)
	if cmd.Flags().Changed(emailPortFlagName) {
		// info: complex object email_port IntegerConfigItem is retrieved outside this Changed() block
	}
	emailPortFlagValue := m.EmailPort
	if swag.IsZero(emailPortFlagValue) {
		emailPortFlagValue = &models.IntegerConfigItem{}
	}

	err, emailPortAdded := retrieveModelIntegerConfigItemFlags(depth+1, emailPortFlagValue, emailPortFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailPortAdded
	if emailPortAdded {
		m.EmailPort = emailPortFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailSslFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailSslFlagName := fmt.Sprintf("%v.email_ssl", cmdPrefix)
	if cmd.Flags().Changed(emailSslFlagName) {
		// info: complex object email_ssl BoolConfigItem is retrieved outside this Changed() block
	}
	emailSslFlagValue := m.EmailSsl
	if swag.IsZero(emailSslFlagValue) {
		emailSslFlagValue = &models.BoolConfigItem{}
	}

	err, emailSslAdded := retrieveModelBoolConfigItemFlags(depth+1, emailSslFlagValue, emailSslFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailSslAdded
	if emailSslAdded {
		m.EmailSsl = emailSslFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseEmailUsernameFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailUsernameFlagName := fmt.Sprintf("%v.email_username", cmdPrefix)
	if cmd.Flags().Changed(emailUsernameFlagName) {
		// info: complex object email_username StringConfigItem is retrieved outside this Changed() block
	}
	emailUsernameFlagValue := m.EmailUsername
	if swag.IsZero(emailUsernameFlagValue) {
		emailUsernameFlagValue = &models.StringConfigItem{}
	}

	err, emailUsernameAdded := retrieveModelStringConfigItemFlags(depth+1, emailUsernameFlagValue, emailUsernameFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailUsernameAdded
	if emailUsernameAdded {
		m.EmailUsername = emailUsernameFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyAdminGroupsFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyAdminGroupsFlagName := fmt.Sprintf("%v.http_authproxy_admin_groups", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyAdminGroupsFlagName) {
		// info: complex object http_authproxy_admin_groups StringConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyAdminGroupsFlagValue := m.HTTPAuthproxyAdminGroups
	if swag.IsZero(httpAuthproxyAdminGroupsFlagValue) {
		httpAuthproxyAdminGroupsFlagValue = &models.StringConfigItem{}
	}

	err, httpAuthproxyAdminGroupsAdded := retrieveModelStringConfigItemFlags(depth+1, httpAuthproxyAdminGroupsFlagValue, httpAuthproxyAdminGroupsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminGroupsAdded
	if httpAuthproxyAdminGroupsAdded {
		m.HTTPAuthproxyAdminGroups = httpAuthproxyAdminGroupsFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyAdminUsernamesFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyAdminUsernamesFlagName := fmt.Sprintf("%v.http_authproxy_admin_usernames", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyAdminUsernamesFlagName) {
		// info: complex object http_authproxy_admin_usernames StringConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyAdminUsernamesFlagValue := m.HTTPAuthproxyAdminUsernames
	if swag.IsZero(httpAuthproxyAdminUsernamesFlagValue) {
		httpAuthproxyAdminUsernamesFlagValue = &models.StringConfigItem{}
	}

	err, httpAuthproxyAdminUsernamesAdded := retrieveModelStringConfigItemFlags(depth+1, httpAuthproxyAdminUsernamesFlagValue, httpAuthproxyAdminUsernamesFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyAdminUsernamesAdded
	if httpAuthproxyAdminUsernamesAdded {
		m.HTTPAuthproxyAdminUsernames = httpAuthproxyAdminUsernamesFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyEndpointFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyEndpointFlagName := fmt.Sprintf("%v.http_authproxy_endpoint", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyEndpointFlagName) {
		// info: complex object http_authproxy_endpoint StringConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyEndpointFlagValue := m.HTTPAuthproxyEndpoint
	if swag.IsZero(httpAuthproxyEndpointFlagValue) {
		httpAuthproxyEndpointFlagValue = &models.StringConfigItem{}
	}

	err, httpAuthproxyEndpointAdded := retrieveModelStringConfigItemFlags(depth+1, httpAuthproxyEndpointFlagValue, httpAuthproxyEndpointFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyEndpointAdded
	if httpAuthproxyEndpointAdded {
		m.HTTPAuthproxyEndpoint = httpAuthproxyEndpointFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyServerCertificateFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyServerCertificateFlagName := fmt.Sprintf("%v.http_authproxy_server_certificate", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyServerCertificateFlagName) {
		// info: complex object http_authproxy_server_certificate StringConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyServerCertificateFlagValue := m.HTTPAuthproxyServerCertificate
	if swag.IsZero(httpAuthproxyServerCertificateFlagValue) {
		httpAuthproxyServerCertificateFlagValue = &models.StringConfigItem{}
	}

	err, httpAuthproxyServerCertificateAdded := retrieveModelStringConfigItemFlags(depth+1, httpAuthproxyServerCertificateFlagValue, httpAuthproxyServerCertificateFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyServerCertificateAdded
	if httpAuthproxyServerCertificateAdded {
		m.HTTPAuthproxyServerCertificate = httpAuthproxyServerCertificateFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxySkipSearchFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxySkipSearchFlagName := fmt.Sprintf("%v.http_authproxy_skip_search", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxySkipSearchFlagName) {
		// info: complex object http_authproxy_skip_search BoolConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxySkipSearchFlagValue := m.HTTPAuthproxySkipSearch
	if swag.IsZero(httpAuthproxySkipSearchFlagValue) {
		httpAuthproxySkipSearchFlagValue = &models.BoolConfigItem{}
	}

	err, httpAuthproxySkipSearchAdded := retrieveModelBoolConfigItemFlags(depth+1, httpAuthproxySkipSearchFlagValue, httpAuthproxySkipSearchFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxySkipSearchAdded
	if httpAuthproxySkipSearchAdded {
		m.HTTPAuthproxySkipSearch = httpAuthproxySkipSearchFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyTokenreviewEndpointFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyTokenreviewEndpointFlagName := fmt.Sprintf("%v.http_authproxy_tokenreview_endpoint", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyTokenreviewEndpointFlagName) {
		// info: complex object http_authproxy_tokenreview_endpoint StringConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyTokenreviewEndpointFlagValue := m.HTTPAuthproxyTokenreviewEndpoint
	if swag.IsZero(httpAuthproxyTokenreviewEndpointFlagValue) {
		httpAuthproxyTokenreviewEndpointFlagValue = &models.StringConfigItem{}
	}

	err, httpAuthproxyTokenreviewEndpointAdded := retrieveModelStringConfigItemFlags(depth+1, httpAuthproxyTokenreviewEndpointFlagValue, httpAuthproxyTokenreviewEndpointFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyTokenreviewEndpointAdded
	if httpAuthproxyTokenreviewEndpointAdded {
		m.HTTPAuthproxyTokenreviewEndpoint = httpAuthproxyTokenreviewEndpointFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseHTTPAuthproxyVerifyCertFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpAuthproxyVerifyCertFlagName := fmt.Sprintf("%v.http_authproxy_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(httpAuthproxyVerifyCertFlagName) {
		// info: complex object http_authproxy_verify_cert BoolConfigItem is retrieved outside this Changed() block
	}
	httpAuthproxyVerifyCertFlagValue := m.HTTPAuthproxyVerifyCert
	if swag.IsZero(httpAuthproxyVerifyCertFlagValue) {
		httpAuthproxyVerifyCertFlagValue = &models.BoolConfigItem{}
	}

	err, httpAuthproxyVerifyCertAdded := retrieveModelBoolConfigItemFlags(depth+1, httpAuthproxyVerifyCertFlagValue, httpAuthproxyVerifyCertFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpAuthproxyVerifyCertAdded
	if httpAuthproxyVerifyCertAdded {
		m.HTTPAuthproxyVerifyCert = httpAuthproxyVerifyCertFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapBaseDnFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapBaseDnFlagName := fmt.Sprintf("%v.ldap_base_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapBaseDnFlagName) {
		// info: complex object ldap_base_dn StringConfigItem is retrieved outside this Changed() block
	}
	ldapBaseDnFlagValue := m.LdapBaseDn
	if swag.IsZero(ldapBaseDnFlagValue) {
		ldapBaseDnFlagValue = &models.StringConfigItem{}
	}

	err, ldapBaseDnAdded := retrieveModelStringConfigItemFlags(depth+1, ldapBaseDnFlagValue, ldapBaseDnFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapBaseDnAdded
	if ldapBaseDnAdded {
		m.LdapBaseDn = ldapBaseDnFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapFilterFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapFilterFlagName := fmt.Sprintf("%v.ldap_filter", cmdPrefix)
	if cmd.Flags().Changed(ldapFilterFlagName) {
		// info: complex object ldap_filter StringConfigItem is retrieved outside this Changed() block
	}
	ldapFilterFlagValue := m.LdapFilter
	if swag.IsZero(ldapFilterFlagValue) {
		ldapFilterFlagValue = &models.StringConfigItem{}
	}

	err, ldapFilterAdded := retrieveModelStringConfigItemFlags(depth+1, ldapFilterFlagValue, ldapFilterFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapFilterAdded
	if ldapFilterAdded {
		m.LdapFilter = ldapFilterFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupAdminDnFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupAdminDnFlagName := fmt.Sprintf("%v.ldap_group_admin_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupAdminDnFlagName) {
		// info: complex object ldap_group_admin_dn StringConfigItem is retrieved outside this Changed() block
	}
	ldapGroupAdminDnFlagValue := m.LdapGroupAdminDn
	if swag.IsZero(ldapGroupAdminDnFlagValue) {
		ldapGroupAdminDnFlagValue = &models.StringConfigItem{}
	}

	err, ldapGroupAdminDnAdded := retrieveModelStringConfigItemFlags(depth+1, ldapGroupAdminDnFlagValue, ldapGroupAdminDnFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAdminDnAdded
	if ldapGroupAdminDnAdded {
		m.LdapGroupAdminDn = ldapGroupAdminDnFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupAttributeNameFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupAttributeNameFlagName := fmt.Sprintf("%v.ldap_group_attribute_name", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupAttributeNameFlagName) {
		// info: complex object ldap_group_attribute_name StringConfigItem is retrieved outside this Changed() block
	}
	ldapGroupAttributeNameFlagValue := m.LdapGroupAttributeName
	if swag.IsZero(ldapGroupAttributeNameFlagValue) {
		ldapGroupAttributeNameFlagValue = &models.StringConfigItem{}
	}

	err, ldapGroupAttributeNameAdded := retrieveModelStringConfigItemFlags(depth+1, ldapGroupAttributeNameFlagValue, ldapGroupAttributeNameFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupAttributeNameAdded
	if ldapGroupAttributeNameAdded {
		m.LdapGroupAttributeName = ldapGroupAttributeNameFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupBaseDnFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupBaseDnFlagName := fmt.Sprintf("%v.ldap_group_base_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupBaseDnFlagName) {
		// info: complex object ldap_group_base_dn StringConfigItem is retrieved outside this Changed() block
	}
	ldapGroupBaseDnFlagValue := m.LdapGroupBaseDn
	if swag.IsZero(ldapGroupBaseDnFlagValue) {
		ldapGroupBaseDnFlagValue = &models.StringConfigItem{}
	}

	err, ldapGroupBaseDnAdded := retrieveModelStringConfigItemFlags(depth+1, ldapGroupBaseDnFlagValue, ldapGroupBaseDnFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupBaseDnAdded
	if ldapGroupBaseDnAdded {
		m.LdapGroupBaseDn = ldapGroupBaseDnFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupMembershipAttributeFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupMembershipAttributeFlagName := fmt.Sprintf("%v.ldap_group_membership_attribute", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupMembershipAttributeFlagName) {
		// info: complex object ldap_group_membership_attribute StringConfigItem is retrieved outside this Changed() block
	}
	ldapGroupMembershipAttributeFlagValue := m.LdapGroupMembershipAttribute
	if swag.IsZero(ldapGroupMembershipAttributeFlagValue) {
		ldapGroupMembershipAttributeFlagValue = &models.StringConfigItem{}
	}

	err, ldapGroupMembershipAttributeAdded := retrieveModelStringConfigItemFlags(depth+1, ldapGroupMembershipAttributeFlagValue, ldapGroupMembershipAttributeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupMembershipAttributeAdded
	if ldapGroupMembershipAttributeAdded {
		m.LdapGroupMembershipAttribute = ldapGroupMembershipAttributeFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupSearchFilterFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupSearchFilterFlagName := fmt.Sprintf("%v.ldap_group_search_filter", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupSearchFilterFlagName) {
		// info: complex object ldap_group_search_filter StringConfigItem is retrieved outside this Changed() block
	}
	ldapGroupSearchFilterFlagValue := m.LdapGroupSearchFilter
	if swag.IsZero(ldapGroupSearchFilterFlagValue) {
		ldapGroupSearchFilterFlagValue = &models.StringConfigItem{}
	}

	err, ldapGroupSearchFilterAdded := retrieveModelStringConfigItemFlags(depth+1, ldapGroupSearchFilterFlagValue, ldapGroupSearchFilterFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchFilterAdded
	if ldapGroupSearchFilterAdded {
		m.LdapGroupSearchFilter = ldapGroupSearchFilterFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapGroupSearchScopeFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapGroupSearchScopeFlagName := fmt.Sprintf("%v.ldap_group_search_scope", cmdPrefix)
	if cmd.Flags().Changed(ldapGroupSearchScopeFlagName) {
		// info: complex object ldap_group_search_scope IntegerConfigItem is retrieved outside this Changed() block
	}
	ldapGroupSearchScopeFlagValue := m.LdapGroupSearchScope
	if swag.IsZero(ldapGroupSearchScopeFlagValue) {
		ldapGroupSearchScopeFlagValue = &models.IntegerConfigItem{}
	}

	err, ldapGroupSearchScopeAdded := retrieveModelIntegerConfigItemFlags(depth+1, ldapGroupSearchScopeFlagValue, ldapGroupSearchScopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapGroupSearchScopeAdded
	if ldapGroupSearchScopeAdded {
		m.LdapGroupSearchScope = ldapGroupSearchScopeFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapScopeFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapScopeFlagName := fmt.Sprintf("%v.ldap_scope", cmdPrefix)
	if cmd.Flags().Changed(ldapScopeFlagName) {
		// info: complex object ldap_scope IntegerConfigItem is retrieved outside this Changed() block
	}
	ldapScopeFlagValue := m.LdapScope
	if swag.IsZero(ldapScopeFlagValue) {
		ldapScopeFlagValue = &models.IntegerConfigItem{}
	}

	err, ldapScopeAdded := retrieveModelIntegerConfigItemFlags(depth+1, ldapScopeFlagValue, ldapScopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapScopeAdded
	if ldapScopeAdded {
		m.LdapScope = ldapScopeFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapSearchDnFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapSearchDnFlagName := fmt.Sprintf("%v.ldap_search_dn", cmdPrefix)
	if cmd.Flags().Changed(ldapSearchDnFlagName) {
		// info: complex object ldap_search_dn StringConfigItem is retrieved outside this Changed() block
	}
	ldapSearchDnFlagValue := m.LdapSearchDn
	if swag.IsZero(ldapSearchDnFlagValue) {
		ldapSearchDnFlagValue = &models.StringConfigItem{}
	}

	err, ldapSearchDnAdded := retrieveModelStringConfigItemFlags(depth+1, ldapSearchDnFlagValue, ldapSearchDnFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapSearchDnAdded
	if ldapSearchDnAdded {
		m.LdapSearchDn = ldapSearchDnFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapTimeoutFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapTimeoutFlagName := fmt.Sprintf("%v.ldap_timeout", cmdPrefix)
	if cmd.Flags().Changed(ldapTimeoutFlagName) {
		// info: complex object ldap_timeout IntegerConfigItem is retrieved outside this Changed() block
	}
	ldapTimeoutFlagValue := m.LdapTimeout
	if swag.IsZero(ldapTimeoutFlagValue) {
		ldapTimeoutFlagValue = &models.IntegerConfigItem{}
	}

	err, ldapTimeoutAdded := retrieveModelIntegerConfigItemFlags(depth+1, ldapTimeoutFlagValue, ldapTimeoutFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapTimeoutAdded
	if ldapTimeoutAdded {
		m.LdapTimeout = ldapTimeoutFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapUIDFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUidFlagName := fmt.Sprintf("%v.ldap_uid", cmdPrefix)
	if cmd.Flags().Changed(ldapUidFlagName) {
		// info: complex object ldap_uid StringConfigItem is retrieved outside this Changed() block
	}
	ldapUidFlagValue := m.LdapUID
	if swag.IsZero(ldapUidFlagValue) {
		ldapUidFlagValue = &models.StringConfigItem{}
	}

	err, ldapUidAdded := retrieveModelStringConfigItemFlags(depth+1, ldapUidFlagValue, ldapUidFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUidAdded
	if ldapUidAdded {
		m.LdapUID = ldapUidFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapURLFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapUrlFlagName := fmt.Sprintf("%v.ldap_url", cmdPrefix)
	if cmd.Flags().Changed(ldapUrlFlagName) {
		// info: complex object ldap_url StringConfigItem is retrieved outside this Changed() block
	}
	ldapUrlFlagValue := m.LdapURL
	if swag.IsZero(ldapUrlFlagValue) {
		ldapUrlFlagValue = &models.StringConfigItem{}
	}

	err, ldapUrlAdded := retrieveModelStringConfigItemFlags(depth+1, ldapUrlFlagValue, ldapUrlFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapUrlAdded
	if ldapUrlAdded {
		m.LdapURL = ldapUrlFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseLdapVerifyCertFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ldapVerifyCertFlagName := fmt.Sprintf("%v.ldap_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(ldapVerifyCertFlagName) {
		// info: complex object ldap_verify_cert BoolConfigItem is retrieved outside this Changed() block
	}
	ldapVerifyCertFlagValue := m.LdapVerifyCert
	if swag.IsZero(ldapVerifyCertFlagValue) {
		ldapVerifyCertFlagValue = &models.BoolConfigItem{}
	}

	err, ldapVerifyCertAdded := retrieveModelBoolConfigItemFlags(depth+1, ldapVerifyCertFlagValue, ldapVerifyCertFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ldapVerifyCertAdded
	if ldapVerifyCertAdded {
		m.LdapVerifyCert = ldapVerifyCertFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseNotificationEnableFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	notificationEnableFlagName := fmt.Sprintf("%v.notification_enable", cmdPrefix)
	if cmd.Flags().Changed(notificationEnableFlagName) {
		// info: complex object notification_enable BoolConfigItem is retrieved outside this Changed() block
	}
	notificationEnableFlagValue := m.NotificationEnable
	if swag.IsZero(notificationEnableFlagValue) {
		notificationEnableFlagValue = &models.BoolConfigItem{}
	}

	err, notificationEnableAdded := retrieveModelBoolConfigItemFlags(depth+1, notificationEnableFlagValue, notificationEnableFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || notificationEnableAdded
	if notificationEnableAdded {
		m.NotificationEnable = notificationEnableFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcAdminGroupFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcAdminGroupFlagName := fmt.Sprintf("%v.oidc_admin_group", cmdPrefix)
	if cmd.Flags().Changed(oidcAdminGroupFlagName) {
		// info: complex object oidc_admin_group StringConfigItem is retrieved outside this Changed() block
	}
	oidcAdminGroupFlagValue := m.OidcAdminGroup
	if swag.IsZero(oidcAdminGroupFlagValue) {
		oidcAdminGroupFlagValue = &models.StringConfigItem{}
	}

	err, oidcAdminGroupAdded := retrieveModelStringConfigItemFlags(depth+1, oidcAdminGroupFlagValue, oidcAdminGroupFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAdminGroupAdded
	if oidcAdminGroupAdded {
		m.OidcAdminGroup = oidcAdminGroupFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcAutoOnboardFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcAutoOnboardFlagName := fmt.Sprintf("%v.oidc_auto_onboard", cmdPrefix)
	if cmd.Flags().Changed(oidcAutoOnboardFlagName) {
		// info: complex object oidc_auto_onboard BoolConfigItem is retrieved outside this Changed() block
	}
	oidcAutoOnboardFlagValue := m.OidcAutoOnboard
	if swag.IsZero(oidcAutoOnboardFlagValue) {
		oidcAutoOnboardFlagValue = &models.BoolConfigItem{}
	}

	err, oidcAutoOnboardAdded := retrieveModelBoolConfigItemFlags(depth+1, oidcAutoOnboardFlagValue, oidcAutoOnboardFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcAutoOnboardAdded
	if oidcAutoOnboardAdded {
		m.OidcAutoOnboard = oidcAutoOnboardFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcClientIDFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcClientIdFlagName := fmt.Sprintf("%v.oidc_client_id", cmdPrefix)
	if cmd.Flags().Changed(oidcClientIdFlagName) {
		// info: complex object oidc_client_id StringConfigItem is retrieved outside this Changed() block
	}
	oidcClientIdFlagValue := m.OidcClientID
	if swag.IsZero(oidcClientIdFlagValue) {
		oidcClientIdFlagValue = &models.StringConfigItem{}
	}

	err, oidcClientIdAdded := retrieveModelStringConfigItemFlags(depth+1, oidcClientIdFlagValue, oidcClientIdFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcClientIdAdded
	if oidcClientIdAdded {
		m.OidcClientID = oidcClientIdFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcEndpointFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcEndpointFlagName := fmt.Sprintf("%v.oidc_endpoint", cmdPrefix)
	if cmd.Flags().Changed(oidcEndpointFlagName) {
		// info: complex object oidc_endpoint StringConfigItem is retrieved outside this Changed() block
	}
	oidcEndpointFlagValue := m.OidcEndpoint
	if swag.IsZero(oidcEndpointFlagValue) {
		oidcEndpointFlagValue = &models.StringConfigItem{}
	}

	err, oidcEndpointAdded := retrieveModelStringConfigItemFlags(depth+1, oidcEndpointFlagValue, oidcEndpointFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcEndpointAdded
	if oidcEndpointAdded {
		m.OidcEndpoint = oidcEndpointFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcExtraRedirectParmsFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcExtraRedirectParmsFlagName := fmt.Sprintf("%v.oidc_extra_redirect_parms", cmdPrefix)
	if cmd.Flags().Changed(oidcExtraRedirectParmsFlagName) {
		// info: complex object oidc_extra_redirect_parms StringConfigItem is retrieved outside this Changed() block
	}
	oidcExtraRedirectParmsFlagValue := m.OidcExtraRedirectParms
	if swag.IsZero(oidcExtraRedirectParmsFlagValue) {
		oidcExtraRedirectParmsFlagValue = &models.StringConfigItem{}
	}

	err, oidcExtraRedirectParmsAdded := retrieveModelStringConfigItemFlags(depth+1, oidcExtraRedirectParmsFlagValue, oidcExtraRedirectParmsFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcExtraRedirectParmsAdded
	if oidcExtraRedirectParmsAdded {
		m.OidcExtraRedirectParms = oidcExtraRedirectParmsFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcGroupsClaimFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcGroupsClaimFlagName := fmt.Sprintf("%v.oidc_groups_claim", cmdPrefix)
	if cmd.Flags().Changed(oidcGroupsClaimFlagName) {
		// info: complex object oidc_groups_claim StringConfigItem is retrieved outside this Changed() block
	}
	oidcGroupsClaimFlagValue := m.OidcGroupsClaim
	if swag.IsZero(oidcGroupsClaimFlagValue) {
		oidcGroupsClaimFlagValue = &models.StringConfigItem{}
	}

	err, oidcGroupsClaimAdded := retrieveModelStringConfigItemFlags(depth+1, oidcGroupsClaimFlagValue, oidcGroupsClaimFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcGroupsClaimAdded
	if oidcGroupsClaimAdded {
		m.OidcGroupsClaim = oidcGroupsClaimFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcNameFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcNameFlagName := fmt.Sprintf("%v.oidc_name", cmdPrefix)
	if cmd.Flags().Changed(oidcNameFlagName) {
		// info: complex object oidc_name StringConfigItem is retrieved outside this Changed() block
	}
	oidcNameFlagValue := m.OidcName
	if swag.IsZero(oidcNameFlagValue) {
		oidcNameFlagValue = &models.StringConfigItem{}
	}

	err, oidcNameAdded := retrieveModelStringConfigItemFlags(depth+1, oidcNameFlagValue, oidcNameFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcNameAdded
	if oidcNameAdded {
		m.OidcName = oidcNameFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcScopeFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcScopeFlagName := fmt.Sprintf("%v.oidc_scope", cmdPrefix)
	if cmd.Flags().Changed(oidcScopeFlagName) {
		// info: complex object oidc_scope StringConfigItem is retrieved outside this Changed() block
	}
	oidcScopeFlagValue := m.OidcScope
	if swag.IsZero(oidcScopeFlagValue) {
		oidcScopeFlagValue = &models.StringConfigItem{}
	}

	err, oidcScopeAdded := retrieveModelStringConfigItemFlags(depth+1, oidcScopeFlagValue, oidcScopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcScopeAdded
	if oidcScopeAdded {
		m.OidcScope = oidcScopeFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcUserClaimFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcUserClaimFlagName := fmt.Sprintf("%v.oidc_user_claim", cmdPrefix)
	if cmd.Flags().Changed(oidcUserClaimFlagName) {
		// info: complex object oidc_user_claim StringConfigItem is retrieved outside this Changed() block
	}
	oidcUserClaimFlagValue := m.OidcUserClaim
	if swag.IsZero(oidcUserClaimFlagValue) {
		oidcUserClaimFlagValue = &models.StringConfigItem{}
	}

	err, oidcUserClaimAdded := retrieveModelStringConfigItemFlags(depth+1, oidcUserClaimFlagValue, oidcUserClaimFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcUserClaimAdded
	if oidcUserClaimAdded {
		m.OidcUserClaim = oidcUserClaimFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseOidcVerifyCertFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcVerifyCertFlagName := fmt.Sprintf("%v.oidc_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(oidcVerifyCertFlagName) {
		// info: complex object oidc_verify_cert BoolConfigItem is retrieved outside this Changed() block
	}
	oidcVerifyCertFlagValue := m.OidcVerifyCert
	if swag.IsZero(oidcVerifyCertFlagValue) {
		oidcVerifyCertFlagValue = &models.BoolConfigItem{}
	}

	err, oidcVerifyCertAdded := retrieveModelBoolConfigItemFlags(depth+1, oidcVerifyCertFlagValue, oidcVerifyCertFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcVerifyCertAdded
	if oidcVerifyCertAdded {
		m.OidcVerifyCert = oidcVerifyCertFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseProjectCreationRestrictionFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectCreationRestrictionFlagName := fmt.Sprintf("%v.project_creation_restriction", cmdPrefix)
	if cmd.Flags().Changed(projectCreationRestrictionFlagName) {
		// info: complex object project_creation_restriction StringConfigItem is retrieved outside this Changed() block
	}
	projectCreationRestrictionFlagValue := m.ProjectCreationRestriction
	if swag.IsZero(projectCreationRestrictionFlagValue) {
		projectCreationRestrictionFlagValue = &models.StringConfigItem{}
	}

	err, projectCreationRestrictionAdded := retrieveModelStringConfigItemFlags(depth+1, projectCreationRestrictionFlagValue, projectCreationRestrictionFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectCreationRestrictionAdded
	if projectCreationRestrictionAdded {
		m.ProjectCreationRestriction = projectCreationRestrictionFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseQuotaPerProjectEnableFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	quotaPerProjectEnableFlagName := fmt.Sprintf("%v.quota_per_project_enable", cmdPrefix)
	if cmd.Flags().Changed(quotaPerProjectEnableFlagName) {
		// info: complex object quota_per_project_enable BoolConfigItem is retrieved outside this Changed() block
	}
	quotaPerProjectEnableFlagValue := m.QuotaPerProjectEnable
	if swag.IsZero(quotaPerProjectEnableFlagValue) {
		quotaPerProjectEnableFlagValue = &models.BoolConfigItem{}
	}

	err, quotaPerProjectEnableAdded := retrieveModelBoolConfigItemFlags(depth+1, quotaPerProjectEnableFlagValue, quotaPerProjectEnableFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || quotaPerProjectEnableAdded
	if quotaPerProjectEnableAdded {
		m.QuotaPerProjectEnable = quotaPerProjectEnableFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseReadOnlyFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	readOnlyFlagName := fmt.Sprintf("%v.read_only", cmdPrefix)
	if cmd.Flags().Changed(readOnlyFlagName) {
		// info: complex object read_only BoolConfigItem is retrieved outside this Changed() block
	}
	readOnlyFlagValue := m.ReadOnly
	if swag.IsZero(readOnlyFlagValue) {
		readOnlyFlagValue = &models.BoolConfigItem{}
	}

	err, readOnlyAdded := retrieveModelBoolConfigItemFlags(depth+1, readOnlyFlagValue, readOnlyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || readOnlyAdded
	if readOnlyAdded {
		m.ReadOnly = readOnlyFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseRobotNamePrefixFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	robotNamePrefixFlagName := fmt.Sprintf("%v.robot_name_prefix", cmdPrefix)
	if cmd.Flags().Changed(robotNamePrefixFlagName) {
		// info: complex object robot_name_prefix StringConfigItem is retrieved outside this Changed() block
	}
	robotNamePrefixFlagValue := m.RobotNamePrefix
	if swag.IsZero(robotNamePrefixFlagValue) {
		robotNamePrefixFlagValue = &models.StringConfigItem{}
	}

	err, robotNamePrefixAdded := retrieveModelStringConfigItemFlags(depth+1, robotNamePrefixFlagValue, robotNamePrefixFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotNamePrefixAdded
	if robotNamePrefixAdded {
		m.RobotNamePrefix = robotNamePrefixFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseRobotTokenDurationFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	robotTokenDurationFlagName := fmt.Sprintf("%v.robot_token_duration", cmdPrefix)
	if cmd.Flags().Changed(robotTokenDurationFlagName) {
		// info: complex object robot_token_duration IntegerConfigItem is retrieved outside this Changed() block
	}
	robotTokenDurationFlagValue := m.RobotTokenDuration
	if swag.IsZero(robotTokenDurationFlagValue) {
		robotTokenDurationFlagValue = &models.IntegerConfigItem{}
	}

	err, robotTokenDurationAdded := retrieveModelIntegerConfigItemFlags(depth+1, robotTokenDurationFlagValue, robotTokenDurationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || robotTokenDurationAdded
	if robotTokenDurationAdded {
		m.RobotTokenDuration = robotTokenDurationFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseScanAllPolicyFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scanAllPolicyFlagName := fmt.Sprintf("%v.scan_all_policy", cmdPrefix)
	if cmd.Flags().Changed(scanAllPolicyFlagName) {
		// info: complex object scan_all_policy ConfigurationsResponseScanAllPolicy is retrieved outside this Changed() block
	}
	scanAllPolicyFlagValue := m.ScanAllPolicy
	if swag.IsZero(scanAllPolicyFlagValue) {
		scanAllPolicyFlagValue = &models.ConfigurationsResponseScanAllPolicy{}
	}

	err, scanAllPolicyAdded := retrieveModelConfigurationsResponseScanAllPolicyFlags(depth+1, scanAllPolicyFlagValue, scanAllPolicyFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scanAllPolicyAdded
	if scanAllPolicyAdded {
		m.ScanAllPolicy = scanAllPolicyFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseSelfRegistrationFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	selfRegistrationFlagName := fmt.Sprintf("%v.self_registration", cmdPrefix)
	if cmd.Flags().Changed(selfRegistrationFlagName) {
		// info: complex object self_registration BoolConfigItem is retrieved outside this Changed() block
	}
	selfRegistrationFlagValue := m.SelfRegistration
	if swag.IsZero(selfRegistrationFlagValue) {
		selfRegistrationFlagValue = &models.BoolConfigItem{}
	}

	err, selfRegistrationAdded := retrieveModelBoolConfigItemFlags(depth+1, selfRegistrationFlagValue, selfRegistrationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || selfRegistrationAdded
	if selfRegistrationAdded {
		m.SelfRegistration = selfRegistrationFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseStoragePerProjectFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	storagePerProjectFlagName := fmt.Sprintf("%v.storage_per_project", cmdPrefix)
	if cmd.Flags().Changed(storagePerProjectFlagName) {
		// info: complex object storage_per_project IntegerConfigItem is retrieved outside this Changed() block
	}
	storagePerProjectFlagValue := m.StoragePerProject
	if swag.IsZero(storagePerProjectFlagValue) {
		storagePerProjectFlagValue = &models.IntegerConfigItem{}
	}

	err, storagePerProjectAdded := retrieveModelIntegerConfigItemFlags(depth+1, storagePerProjectFlagValue, storagePerProjectFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || storagePerProjectAdded
	if storagePerProjectAdded {
		m.StoragePerProject = storagePerProjectFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseTokenExpirationFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenExpirationFlagName := fmt.Sprintf("%v.token_expiration", cmdPrefix)
	if cmd.Flags().Changed(tokenExpirationFlagName) {
		// info: complex object token_expiration IntegerConfigItem is retrieved outside this Changed() block
	}
	tokenExpirationFlagValue := m.TokenExpiration
	if swag.IsZero(tokenExpirationFlagValue) {
		tokenExpirationFlagValue = &models.IntegerConfigItem{}
	}

	err, tokenExpirationAdded := retrieveModelIntegerConfigItemFlags(depth+1, tokenExpirationFlagValue, tokenExpirationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenExpirationAdded
	if tokenExpirationAdded {
		m.TokenExpiration = tokenExpirationFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseUaaClientIDFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaClientIdFlagName := fmt.Sprintf("%v.uaa_client_id", cmdPrefix)
	if cmd.Flags().Changed(uaaClientIdFlagName) {
		// info: complex object uaa_client_id StringConfigItem is retrieved outside this Changed() block
	}
	uaaClientIdFlagValue := m.UaaClientID
	if swag.IsZero(uaaClientIdFlagValue) {
		uaaClientIdFlagValue = &models.StringConfigItem{}
	}

	err, uaaClientIdAdded := retrieveModelStringConfigItemFlags(depth+1, uaaClientIdFlagValue, uaaClientIdFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientIdAdded
	if uaaClientIdAdded {
		m.UaaClientID = uaaClientIdFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseUaaClientSecretFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaClientSecretFlagName := fmt.Sprintf("%v.uaa_client_secret", cmdPrefix)
	if cmd.Flags().Changed(uaaClientSecretFlagName) {
		// info: complex object uaa_client_secret StringConfigItem is retrieved outside this Changed() block
	}
	uaaClientSecretFlagValue := m.UaaClientSecret
	if swag.IsZero(uaaClientSecretFlagValue) {
		uaaClientSecretFlagValue = &models.StringConfigItem{}
	}

	err, uaaClientSecretAdded := retrieveModelStringConfigItemFlags(depth+1, uaaClientSecretFlagValue, uaaClientSecretFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaClientSecretAdded
	if uaaClientSecretAdded {
		m.UaaClientSecret = uaaClientSecretFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseUaaEndpointFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaEndpointFlagName := fmt.Sprintf("%v.uaa_endpoint", cmdPrefix)
	if cmd.Flags().Changed(uaaEndpointFlagName) {
		// info: complex object uaa_endpoint StringConfigItem is retrieved outside this Changed() block
	}
	uaaEndpointFlagValue := m.UaaEndpoint
	if swag.IsZero(uaaEndpointFlagValue) {
		uaaEndpointFlagValue = &models.StringConfigItem{}
	}

	err, uaaEndpointAdded := retrieveModelStringConfigItemFlags(depth+1, uaaEndpointFlagValue, uaaEndpointFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaEndpointAdded
	if uaaEndpointAdded {
		m.UaaEndpoint = uaaEndpointFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseUaaVerifyCertFlags(depth int, m *models.ConfigurationsResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	uaaVerifyCertFlagName := fmt.Sprintf("%v.uaa_verify_cert", cmdPrefix)
	if cmd.Flags().Changed(uaaVerifyCertFlagName) {
		// info: complex object uaa_verify_cert BoolConfigItem is retrieved outside this Changed() block
	}
	uaaVerifyCertFlagValue := m.UaaVerifyCert
	if swag.IsZero(uaaVerifyCertFlagValue) {
		uaaVerifyCertFlagValue = &models.BoolConfigItem{}
	}

	err, uaaVerifyCertAdded := retrieveModelBoolConfigItemFlags(depth+1, uaaVerifyCertFlagValue, uaaVerifyCertFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || uaaVerifyCertAdded
	if uaaVerifyCertAdded {
		m.UaaVerifyCert = uaaVerifyCertFlagValue
	}

	return nil, retAdded
}

// Extra schema cli for ConfigurationsResponseScanAllPolicy

// register flags to command
func registerModelConfigurationsResponseScanAllPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigurationsResponseScanAllPolicyParameter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerConfigurationsResponseScanAllPolicyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseScanAllPolicyParameter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var parameterFlagName string
	if cmdPrefix == "" {
		parameterFlagName = "parameter"
	} else {
		parameterFlagName = fmt.Sprintf("%v.parameter", cmdPrefix)
	}

	if err := registerModelConfigurationsResponseScanAllPolicyParameterFlags(depth+1, parameterFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseScanAllPolicyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The type of scan all policy, currently the valid values are 'none' and 'daily'`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigurationsResponseScanAllPolicyFlags(depth int, m *models.ConfigurationsResponseScanAllPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, parameterAdded := retrieveConfigurationsResponseScanAllPolicyParameterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parameterAdded

	err, typeAdded := retrieveConfigurationsResponseScanAllPolicyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveConfigurationsResponseScanAllPolicyParameterFlags(depth int, m *models.ConfigurationsResponseScanAllPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parameterFlagName := fmt.Sprintf("%v.parameter", cmdPrefix)
	if cmd.Flags().Changed(parameterFlagName) {
		// info: complex object parameter ConfigurationsResponseScanAllPolicyParameter is retrieved outside this Changed() block
	}
	parameterFlagValue := m.Parameter
	if swag.IsZero(parameterFlagValue) {
		parameterFlagValue = &models.ConfigurationsResponseScanAllPolicyParameter{}
	}

	err, parameterAdded := retrieveModelConfigurationsResponseScanAllPolicyParameterFlags(depth+1, parameterFlagValue, parameterFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parameterAdded
	if parameterAdded {
		m.Parameter = parameterFlagValue
	}

	return nil, retAdded
}

func retrieveConfigurationsResponseScanAllPolicyTypeFlags(depth int, m *models.ConfigurationsResponseScanAllPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for ConfigurationsResponseScanAllPolicyParameter

// register flags to command
func registerModelConfigurationsResponseScanAllPolicyParameterFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerConfigurationsResponseScanAllPolicyParameterDailyTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerConfigurationsResponseScanAllPolicyParameterDailyTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dailyTimeDescription := `The offset in seconds of UTC 0 oclock, only valid when the policy type is 'daily'`

	var dailyTimeFlagName string
	if cmdPrefix == "" {
		dailyTimeFlagName = "daily_time"
	} else {
		dailyTimeFlagName = fmt.Sprintf("%v.daily_time", cmdPrefix)
	}

	var dailyTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(dailyTimeFlagName, dailyTimeFlagDefault, dailyTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelConfigurationsResponseScanAllPolicyParameterFlags(depth int, m *models.ConfigurationsResponseScanAllPolicyParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dailyTimeAdded := retrieveConfigurationsResponseScanAllPolicyParameterDailyTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dailyTimeAdded

	return nil, retAdded
}

func retrieveConfigurationsResponseScanAllPolicyParameterDailyTimeFlags(depth int, m *models.ConfigurationsResponseScanAllPolicyParameter, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dailyTimeFlagName := fmt.Sprintf("%v.daily_time", cmdPrefix)
	if cmd.Flags().Changed(dailyTimeFlagName) {

		var dailyTimeFlagName string
		if cmdPrefix == "" {
			dailyTimeFlagName = "daily_time"
		} else {
			dailyTimeFlagName = fmt.Sprintf("%v.daily_time", cmdPrefix)
		}

		dailyTimeFlagValue, err := cmd.Flags().GetInt64(dailyTimeFlagName)
		if err != nil {
			return err, false
		}
		m.DailyTime = dailyTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
