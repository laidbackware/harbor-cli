// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Task

// register flags to command
func registerModelTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTaskCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskExtraAttrs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskRunCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskStatusMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTaskUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTaskCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The creation time of task`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	var creationTimeFlagDefault string

	_ = cmd.PersistentFlags().String(creationTimeFlagName, creationTimeFlagDefault, creationTimeDescription)

	return nil
}

func registerTaskEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := `The end time of task`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "end_time"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
	}

	var endTimeFlagDefault string

	_ = cmd.PersistentFlags().String(endTimeFlagName, endTimeFlagDefault, endTimeDescription)

	return nil
}

func registerTaskExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := `The ID of task execution`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "execution_id"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
	}

	var executionIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerTaskExtraAttrs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: extra_attrs ExtraAttrs map type is not supported by go-swagger cli yet

	return nil
}

func registerTaskID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of task`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerTaskRunCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	runCountDescription := `The count of task run`

	var runCountFlagName string
	if cmdPrefix == "" {
		runCountFlagName = "run_count"
	} else {
		runCountFlagName = fmt.Sprintf("%v.run_count", cmdPrefix)
	}

	var runCountFlagDefault int32

	_ = cmd.PersistentFlags().Int32(runCountFlagName, runCountFlagDefault, runCountDescription)

	return nil
}

func registerTaskStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `The start time of task`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "start_time"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerTaskStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of task`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerTaskStatusMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusMessageDescription := `The status message of task`

	var statusMessageFlagName string
	if cmdPrefix == "" {
		statusMessageFlagName = "status_message"
	} else {
		statusMessageFlagName = fmt.Sprintf("%v.status_message", cmdPrefix)
	}

	var statusMessageFlagDefault string

	_ = cmd.PersistentFlags().String(statusMessageFlagName, statusMessageFlagDefault, statusMessageDescription)

	return nil
}

func registerTaskUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The update time of task`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	var updateTimeFlagDefault string

	_ = cmd.PersistentFlags().String(updateTimeFlagName, updateTimeFlagDefault, updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTaskFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrieveTaskCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, endTimeAdded := retrieveTaskEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, executionIdAdded := retrieveTaskExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, extraAttrsAdded := retrieveTaskExtraAttrsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || extraAttrsAdded

	err, idAdded := retrieveTaskIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, runCountAdded := retrieveTaskRunCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || runCountAdded

	err, startTimeAdded := retrieveTaskStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, statusAdded := retrieveTaskStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusMessageAdded := retrieveTaskStatusMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusMessageAdded

	err, updateTimeAdded := retrieveTaskUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrieveTaskCreationTimeFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValue, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskEndTimeFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.end_time", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "end_time"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
		}

		endTimeFlagValue, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskExecutionIDFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.execution_id", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "execution_id"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetInt64(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskExtraAttrsFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	extraAttrsFlagName := fmt.Sprintf("%v.extra_attrs", cmdPrefix)
	if cmd.Flags().Changed(extraAttrsFlagName) {
		// warning: extra_attrs map type ExtraAttrs is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTaskIDFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskRunCountFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	runCountFlagName := fmt.Sprintf("%v.run_count", cmdPrefix)
	if cmd.Flags().Changed(runCountFlagName) {

		var runCountFlagName string
		if cmdPrefix == "" {
			runCountFlagName = "run_count"
		} else {
			runCountFlagName = fmt.Sprintf("%v.run_count", cmdPrefix)
		}

		runCountFlagValue, err := cmd.Flags().GetInt32(runCountFlagName)
		if err != nil {
			return err, false
		}
		m.RunCount = runCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStartTimeFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "start_time"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskStatusMessageFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusMessageFlagName := fmt.Sprintf("%v.status_message", cmdPrefix)
	if cmd.Flags().Changed(statusMessageFlagName) {

		var statusMessageFlagName string
		if cmdPrefix == "" {
			statusMessageFlagName = "status_message"
		} else {
			statusMessageFlagName = fmt.Sprintf("%v.status_message", cmdPrefix)
		}

		statusMessageFlagValue, err := cmd.Flags().GetString(statusMessageFlagName)
		if err != nil {
			return err, false
		}
		m.StatusMessage = statusMessageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTaskUpdateTimeFlags(depth int, m *models.Task, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValue, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
