// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for PasswordReq

// register flags to command
func registerModelPasswordReqFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPasswordReqNewPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPasswordReqOldPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPasswordReqNewPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	newPasswordDescription := `New password for marking as to be updated.`

	var newPasswordFlagName string
	if cmdPrefix == "" {
		newPasswordFlagName = "new_password"
	} else {
		newPasswordFlagName = fmt.Sprintf("%v.new_password", cmdPrefix)
	}

	var newPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(newPasswordFlagName, newPasswordFlagDefault, newPasswordDescription)

	return nil
}

func registerPasswordReqOldPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	oldPasswordDescription := `The users existing password.`

	var oldPasswordFlagName string
	if cmdPrefix == "" {
		oldPasswordFlagName = "old_password"
	} else {
		oldPasswordFlagName = fmt.Sprintf("%v.old_password", cmdPrefix)
	}

	var oldPasswordFlagDefault string

	_ = cmd.PersistentFlags().String(oldPasswordFlagName, oldPasswordFlagDefault, oldPasswordDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPasswordReqFlags(depth int, m *models.PasswordReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, newPasswordAdded := retrievePasswordReqNewPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || newPasswordAdded

	err, oldPasswordAdded := retrievePasswordReqOldPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oldPasswordAdded

	return nil, retAdded
}

func retrievePasswordReqNewPasswordFlags(depth int, m *models.PasswordReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	newPasswordFlagName := fmt.Sprintf("%v.new_password", cmdPrefix)
	if cmd.Flags().Changed(newPasswordFlagName) {

		var newPasswordFlagName string
		if cmdPrefix == "" {
			newPasswordFlagName = "new_password"
		} else {
			newPasswordFlagName = fmt.Sprintf("%v.new_password", cmdPrefix)
		}

		newPasswordFlagValue, err := cmd.Flags().GetString(newPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.NewPassword = newPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePasswordReqOldPasswordFlags(depth int, m *models.PasswordReq, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oldPasswordFlagName := fmt.Sprintf("%v.old_password", cmdPrefix)
	if cmd.Flags().Changed(oldPasswordFlagName) {

		var oldPasswordFlagName string
		if cmdPrefix == "" {
			oldPasswordFlagName = "old_password"
		} else {
			oldPasswordFlagName = fmt.Sprintf("%v.old_password", cmdPrefix)
		}

		oldPasswordFlagValue, err := cmd.Flags().GetString(oldPasswordFlagName)
		if err != nil {
			return err, false
		}
		m.OldPassword = oldPasswordFlagValue

		retAdded = true
	}

	return nil, retAdded
}
