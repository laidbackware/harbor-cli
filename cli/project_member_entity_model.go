// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProjectMemberEntity

// register flags to command
func registerModelProjectMemberEntityFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectMemberEntityEntityID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityEntityName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityEntityType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityRoleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMemberEntityRoleName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectMemberEntityEntityID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entityIdDescription := `the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user groups ID in user_group table.`

	var entityIdFlagName string
	if cmdPrefix == "" {
		entityIdFlagName = "entity_id"
	} else {
		entityIdFlagName = fmt.Sprintf("%v.entity_id", cmdPrefix)
	}

	var entityIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(entityIdFlagName, entityIdFlagDefault, entityIdDescription)

	return nil
}

func registerProjectMemberEntityEntityName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entityNameDescription := `the name of the group member.`

	var entityNameFlagName string
	if cmdPrefix == "" {
		entityNameFlagName = "entity_name"
	} else {
		entityNameFlagName = fmt.Sprintf("%v.entity_name", cmdPrefix)
	}

	var entityNameFlagDefault string

	_ = cmd.PersistentFlags().String(entityNameFlagName, entityNameFlagDefault, entityNameDescription)

	return nil
}

func registerProjectMemberEntityEntityType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	entityTypeDescription := `the entitys type, u for user entity, g for group entity.`

	var entityTypeFlagName string
	if cmdPrefix == "" {
		entityTypeFlagName = "entity_type"
	} else {
		entityTypeFlagName = fmt.Sprintf("%v.entity_type", cmdPrefix)
	}

	var entityTypeFlagDefault string

	_ = cmd.PersistentFlags().String(entityTypeFlagName, entityTypeFlagDefault, entityTypeDescription)

	return nil
}

func registerProjectMemberEntityID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `the project member id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerProjectMemberEntityProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := `the project id`

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "project_id"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
	}

	var projectIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerProjectMemberEntityRoleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleIdDescription := `the role id`

	var roleIdFlagName string
	if cmdPrefix == "" {
		roleIdFlagName = "role_id"
	} else {
		roleIdFlagName = fmt.Sprintf("%v.role_id", cmdPrefix)
	}

	var roleIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(roleIdFlagName, roleIdFlagDefault, roleIdDescription)

	return nil
}

func registerProjectMemberEntityRoleName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	roleNameDescription := `the name of the role`

	var roleNameFlagName string
	if cmdPrefix == "" {
		roleNameFlagName = "role_name"
	} else {
		roleNameFlagName = fmt.Sprintf("%v.role_name", cmdPrefix)
	}

	var roleNameFlagDefault string

	_ = cmd.PersistentFlags().String(roleNameFlagName, roleNameFlagDefault, roleNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectMemberEntityFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, entityIdAdded := retrieveProjectMemberEntityEntityIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entityIdAdded

	err, entityNameAdded := retrieveProjectMemberEntityEntityNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entityNameAdded

	err, entityTypeAdded := retrieveProjectMemberEntityEntityTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || entityTypeAdded

	err, idAdded := retrieveProjectMemberEntityIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, projectIdAdded := retrieveProjectMemberEntityProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, roleIdAdded := retrieveProjectMemberEntityRoleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleIdAdded

	err, roleNameAdded := retrieveProjectMemberEntityRoleNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || roleNameAdded

	return nil, retAdded
}

func retrieveProjectMemberEntityEntityIDFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entityIdFlagName := fmt.Sprintf("%v.entity_id", cmdPrefix)
	if cmd.Flags().Changed(entityIdFlagName) {

		var entityIdFlagName string
		if cmdPrefix == "" {
			entityIdFlagName = "entity_id"
		} else {
			entityIdFlagName = fmt.Sprintf("%v.entity_id", cmdPrefix)
		}

		entityIdFlagValue, err := cmd.Flags().GetInt64(entityIdFlagName)
		if err != nil {
			return err, false
		}
		m.EntityID = entityIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityEntityNameFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entityNameFlagName := fmt.Sprintf("%v.entity_name", cmdPrefix)
	if cmd.Flags().Changed(entityNameFlagName) {

		var entityNameFlagName string
		if cmdPrefix == "" {
			entityNameFlagName = "entity_name"
		} else {
			entityNameFlagName = fmt.Sprintf("%v.entity_name", cmdPrefix)
		}

		entityNameFlagValue, err := cmd.Flags().GetString(entityNameFlagName)
		if err != nil {
			return err, false
		}
		m.EntityName = entityNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityEntityTypeFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	entityTypeFlagName := fmt.Sprintf("%v.entity_type", cmdPrefix)
	if cmd.Flags().Changed(entityTypeFlagName) {

		var entityTypeFlagName string
		if cmdPrefix == "" {
			entityTypeFlagName = "entity_type"
		} else {
			entityTypeFlagName = fmt.Sprintf("%v.entity_type", cmdPrefix)
		}

		entityTypeFlagValue, err := cmd.Flags().GetString(entityTypeFlagName)
		if err != nil {
			return err, false
		}
		m.EntityType = entityTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityIDFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityProjectIDFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.project_id", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "project_id"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt64(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityRoleIDFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleIdFlagName := fmt.Sprintf("%v.role_id", cmdPrefix)
	if cmd.Flags().Changed(roleIdFlagName) {

		var roleIdFlagName string
		if cmdPrefix == "" {
			roleIdFlagName = "role_id"
		} else {
			roleIdFlagName = fmt.Sprintf("%v.role_id", cmdPrefix)
		}

		roleIdFlagValue, err := cmd.Flags().GetInt64(roleIdFlagName)
		if err != nil {
			return err, false
		}
		m.RoleID = roleIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMemberEntityRoleNameFlags(depth int, m *models.ProjectMemberEntity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	roleNameFlagName := fmt.Sprintf("%v.role_name", cmdPrefix)
	if cmd.Flags().Changed(roleNameFlagName) {

		var roleNameFlagName string
		if cmdPrefix == "" {
			roleNameFlagName = "role_name"
		} else {
			roleNameFlagName = fmt.Sprintf("%v.role_name", cmdPrefix)
		}

		roleNameFlagValue, err := cmd.Flags().GetString(roleNameFlagName)
		if err != nil {
			return err, false
		}
		m.RoleName = roleNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
