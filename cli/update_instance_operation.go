// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/preheat"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPreheatUpdateInstanceCmd returns a cmd to handle operation updateInstance
func makeOperationPreheatUpdateInstanceCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "UpdateInstance",
		Short: `Update the specified P2P provider instance`,
		RunE:  runOperationPreheatUpdateInstance,
	}

	if err := registerOperationPreheatUpdateInstanceParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPreheatUpdateInstance uses cmd flags to call endpoint api
func runOperationPreheatUpdateInstance(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := preheat.NewUpdateInstanceParams()
	if err, _ := retrieveOperationPreheatUpdateInstanceXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatUpdateInstanceInstanceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatUpdateInstancePreheatInstanceNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPreheatUpdateInstanceResult(appCli.Preheat.UpdateInstance(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPreheatUpdateInstanceParamFlags registers all flags needed to fill params
func registerOperationPreheatUpdateInstanceParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPreheatUpdateInstanceXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatUpdateInstanceInstanceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatUpdateInstancePreheatInstanceNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPreheatUpdateInstanceXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationPreheatUpdateInstanceInstanceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var instanceFlagName string
	if cmdPrefix == "" {
		instanceFlagName = "instance"
	} else {
		instanceFlagName = fmt.Sprintf("%v.instance", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(instanceFlagName, "", "Optional json string for [instance]. The instance to update")

	// add flags for body
	if err := registerModelInstanceFlags(0, "instance", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationPreheatUpdateInstancePreheatInstanceNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	preheatInstanceNameDescription := `Required. Instance Name`

	var preheatInstanceNameFlagName string
	if cmdPrefix == "" {
		preheatInstanceNameFlagName = "preheat_instance_name"
	} else {
		preheatInstanceNameFlagName = fmt.Sprintf("%v.preheat_instance_name", cmdPrefix)
	}

	var preheatInstanceNameFlagDefault string

	_ = cmd.PersistentFlags().String(preheatInstanceNameFlagName, preheatInstanceNameFlagDefault, preheatInstanceNameDescription)

	return nil
}

func retrieveOperationPreheatUpdateInstanceXRequestIDFlag(m *preheat.UpdateInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatUpdateInstanceInstanceFlag(m *preheat.UpdateInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("instance") {
		// Read instance string from cmd and unmarshal
		instanceValueStr, err := cmd.Flags().GetString("instance")
		if err != nil {
			return err, false
		}

		instanceValue := models.Instance{}
		if err := json.Unmarshal([]byte(instanceValueStr), &instanceValue); err != nil {
			return fmt.Errorf("cannot unmarshal instance string in models.Instance: %v", err), false
		}
		m.Instance = &instanceValue
	}
	instanceValueModel := m.Instance
	if swag.IsZero(instanceValueModel) {
		instanceValueModel = &models.Instance{}
	}
	err, added := retrieveModelInstanceFlags(0, instanceValueModel, "instance", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Instance = instanceValueModel
	}
	if dryRun && debug {

		instanceValueDebugBytes, err := json.Marshal(m.Instance)
		if err != nil {
			return err, false
		}
		logDebugf("Instance dry-run payload: %v", string(instanceValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationPreheatUpdateInstancePreheatInstanceNameFlag(m *preheat.UpdateInstanceParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("preheat_instance_name") {

		var preheatInstanceNameFlagName string
		if cmdPrefix == "" {
			preheatInstanceNameFlagName = "preheat_instance_name"
		} else {
			preheatInstanceNameFlagName = fmt.Sprintf("%v.preheat_instance_name", cmdPrefix)
		}

		preheatInstanceNameFlagValue, err := cmd.Flags().GetString(preheatInstanceNameFlagName)
		if err != nil {
			return err, false
		}
		m.PreheatInstanceName = preheatInstanceNameFlagValue

	}
	return nil, retAdded
}

// parseOperationPreheatUpdateInstanceResult parses request result and return the string content
func parseOperationPreheatUpdateInstanceResult(resp0 *preheat.UpdateInstanceOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateInstanceOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*preheat.UpdateInstanceBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*preheat.UpdateInstanceUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*preheat.UpdateInstanceForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*preheat.UpdateInstanceNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*preheat.UpdateInstanceInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateInstanceOK is not supported by go-swagger cli yet.

	return "", nil
}
