// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReplicationExecution

// register flags to command
func registerModelReplicationExecutionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicationExecutionEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionFailed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionInProgress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionStatusText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionStopped(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionSucceed(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationExecutionTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationExecutionEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := `The end time`

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "end_time"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(endTimeFlagName, "", endTimeDescription)

	return nil
}

func registerReplicationExecutionFailed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	failedDescription := `The count of failed executions`

	var failedFlagName string
	if cmdPrefix == "" {
		failedFlagName = "failed"
	} else {
		failedFlagName = fmt.Sprintf("%v.failed", cmdPrefix)
	}

	var failedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(failedFlagName, failedFlagDefault, failedDescription)

	return nil
}

func registerReplicationExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the execution`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerReplicationExecutionInProgress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	inProgressDescription := `The count of in_progress executions`

	var inProgressFlagName string
	if cmdPrefix == "" {
		inProgressFlagName = "in_progress"
	} else {
		inProgressFlagName = fmt.Sprintf("%v.in_progress", cmdPrefix)
	}

	var inProgressFlagDefault int64

	_ = cmd.PersistentFlags().Int64(inProgressFlagName, inProgressFlagDefault, inProgressDescription)

	return nil
}

func registerReplicationExecutionPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	policyIdDescription := `The ID if the policy that the execution belongs to`

	var policyIdFlagName string
	if cmdPrefix == "" {
		policyIdFlagName = "policy_id"
	} else {
		policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
	}

	var policyIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(policyIdFlagName, policyIdFlagDefault, policyIdDescription)

	return nil
}

func registerReplicationExecutionStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := `The start time`

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "start_time"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(startTimeFlagName, "", startTimeDescription)

	return nil
}

func registerReplicationExecutionStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The status of the execution`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerReplicationExecutionStatusText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusTextDescription := `The status text`

	var statusTextFlagName string
	if cmdPrefix == "" {
		statusTextFlagName = "status_text"
	} else {
		statusTextFlagName = fmt.Sprintf("%v.status_text", cmdPrefix)
	}

	var statusTextFlagDefault string

	_ = cmd.PersistentFlags().String(statusTextFlagName, statusTextFlagDefault, statusTextDescription)

	return nil
}

func registerReplicationExecutionStopped(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	stoppedDescription := `The count of stopped executions`

	var stoppedFlagName string
	if cmdPrefix == "" {
		stoppedFlagName = "stopped"
	} else {
		stoppedFlagName = fmt.Sprintf("%v.stopped", cmdPrefix)
	}

	var stoppedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(stoppedFlagName, stoppedFlagDefault, stoppedDescription)

	return nil
}

func registerReplicationExecutionSucceed(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	succeedDescription := `The count of succeed executions`

	var succeedFlagName string
	if cmdPrefix == "" {
		succeedFlagName = "succeed"
	} else {
		succeedFlagName = fmt.Sprintf("%v.succeed", cmdPrefix)
	}

	var succeedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(succeedFlagName, succeedFlagDefault, succeedDescription)

	return nil
}

func registerReplicationExecutionTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := `The total count of all executions`

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

func registerReplicationExecutionTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerDescription := `The trigger mode`

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	var triggerFlagDefault string

	_ = cmd.PersistentFlags().String(triggerFlagName, triggerFlagDefault, triggerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicationExecutionFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endTimeAdded := retrieveReplicationExecutionEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, failedAdded := retrieveReplicationExecutionFailedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || failedAdded

	err, idAdded := retrieveReplicationExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, inProgressAdded := retrieveReplicationExecutionInProgressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || inProgressAdded

	err, policyIdAdded := retrieveReplicationExecutionPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || policyIdAdded

	err, startTimeAdded := retrieveReplicationExecutionStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, statusAdded := retrieveReplicationExecutionStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusTextAdded := retrieveReplicationExecutionStatusTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusTextAdded

	err, stoppedAdded := retrieveReplicationExecutionStoppedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || stoppedAdded

	err, succeedAdded := retrieveReplicationExecutionSucceedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || succeedAdded

	err, totalAdded := retrieveReplicationExecutionTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	err, triggerAdded := retrieveReplicationExecutionTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	return nil, retAdded
}

func retrieveReplicationExecutionEndTimeFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.end_time", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "end_time"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
		}

		endTimeFlagValueStr, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		var endTimeFlagValue strfmt.DateTime
		if err := endTimeFlagValue.UnmarshalText([]byte(endTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionFailedFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	failedFlagName := fmt.Sprintf("%v.failed", cmdPrefix)
	if cmd.Flags().Changed(failedFlagName) {

		var failedFlagName string
		if cmdPrefix == "" {
			failedFlagName = "failed"
		} else {
			failedFlagName = fmt.Sprintf("%v.failed", cmdPrefix)
		}

		failedFlagValue, err := cmd.Flags().GetInt64(failedFlagName)
		if err != nil {
			return err, false
		}
		m.Failed = failedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionIDFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionInProgressFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	inProgressFlagName := fmt.Sprintf("%v.in_progress", cmdPrefix)
	if cmd.Flags().Changed(inProgressFlagName) {

		var inProgressFlagName string
		if cmdPrefix == "" {
			inProgressFlagName = "in_progress"
		} else {
			inProgressFlagName = fmt.Sprintf("%v.in_progress", cmdPrefix)
		}

		inProgressFlagValue, err := cmd.Flags().GetInt64(inProgressFlagName)
		if err != nil {
			return err, false
		}
		m.InProgress = inProgressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionPolicyIDFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	policyIdFlagName := fmt.Sprintf("%v.policy_id", cmdPrefix)
	if cmd.Flags().Changed(policyIdFlagName) {

		var policyIdFlagName string
		if cmdPrefix == "" {
			policyIdFlagName = "policy_id"
		} else {
			policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
		}

		policyIdFlagValue, err := cmd.Flags().GetInt64(policyIdFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyID = policyIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionStartTimeFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "start_time"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		startTimeFlagValueStr, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		var startTimeFlagValue strfmt.DateTime
		if err := startTimeFlagValue.UnmarshalText([]byte(startTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionStatusFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionStatusTextFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusTextFlagName := fmt.Sprintf("%v.status_text", cmdPrefix)
	if cmd.Flags().Changed(statusTextFlagName) {

		var statusTextFlagName string
		if cmdPrefix == "" {
			statusTextFlagName = "status_text"
		} else {
			statusTextFlagName = fmt.Sprintf("%v.status_text", cmdPrefix)
		}

		statusTextFlagValue, err := cmd.Flags().GetString(statusTextFlagName)
		if err != nil {
			return err, false
		}
		m.StatusText = statusTextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionStoppedFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	stoppedFlagName := fmt.Sprintf("%v.stopped", cmdPrefix)
	if cmd.Flags().Changed(stoppedFlagName) {

		var stoppedFlagName string
		if cmdPrefix == "" {
			stoppedFlagName = "stopped"
		} else {
			stoppedFlagName = fmt.Sprintf("%v.stopped", cmdPrefix)
		}

		stoppedFlagValue, err := cmd.Flags().GetInt64(stoppedFlagName)
		if err != nil {
			return err, false
		}
		m.Stopped = stoppedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionSucceedFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	succeedFlagName := fmt.Sprintf("%v.succeed", cmdPrefix)
	if cmd.Flags().Changed(succeedFlagName) {

		var succeedFlagName string
		if cmdPrefix == "" {
			succeedFlagName = "succeed"
		} else {
			succeedFlagName = fmt.Sprintf("%v.succeed", cmdPrefix)
		}

		succeedFlagValue, err := cmd.Flags().GetInt64(succeedFlagName)
		if err != nil {
			return err, false
		}
		m.Succeed = succeedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionTotalFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt64(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationExecutionTriggerFlags(depth int, m *models.ReplicationExecution, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {

		var triggerFlagName string
		if cmdPrefix == "" {
			triggerFlagName = "trigger"
		} else {
			triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
		}

		triggerFlagValue, err := cmd.Flags().GetString(triggerFlagName)
		if err != nil {
			return err, false
		}
		m.Trigger = triggerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
