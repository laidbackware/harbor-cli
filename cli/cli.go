// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/laidbackware/harbor-cli/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.HarborAPI, error) {
	hostname := viper.GetString("hostname")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, client.DefaultBasePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	// warning: produces application/octet-stream is not supported by go-swagger cli yet

	r.Producers["application/json"] = runtime.JSONProducer()

	// warning: produces text/plain is not supported by go-swagger cli yet

	auth, err := makeAuthInfoWriter(cmd)
	if err != nil {
		return nil, err
	}
	r.DefaultAuthentication = auth

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	if err := registerAuthInoWriterFlags(rootCmd); err != nil {
		return nil, err
	}
	// add all operation groups
	operationGroupArtifactCmd, err := makeOperationGroupArtifactCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupArtifactCmd)

	operationGroupAuditlogCmd, err := makeOperationGroupAuditlogCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupAuditlogCmd)

	operationGroupConfigureCmd, err := makeOperationGroupConfigureCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupConfigureCmd)

	operationGroupGcCmd, err := makeOperationGroupGcCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupGcCmd)

	operationGroupHealthCmd, err := makeOperationGroupHealthCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHealthCmd)

	operationGroupIconCmd, err := makeOperationGroupIconCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupIconCmd)

	operationGroupImmutableCmd, err := makeOperationGroupImmutableCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupImmutableCmd)

	operationGroupLabelCmd, err := makeOperationGroupLabelCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLabelCmd)

	operationGroupLdapCmd, err := makeOperationGroupLdapCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLdapCmd)

	operationGroupMemberCmd, err := makeOperationGroupMemberCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupMemberCmd)

	operationGroupOidcCmd, err := makeOperationGroupOidcCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupOidcCmd)

	operationGroupPingCmd, err := makeOperationGroupPingCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPingCmd)

	operationGroupPreheatCmd, err := makeOperationGroupPreheatCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupPreheatCmd)

	operationGroupProjectCmd, err := makeOperationGroupProjectCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupProjectCmd)

	operationGroupProjectMetadataCmd, err := makeOperationGroupProjectMetadataCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupProjectMetadataCmd)

	operationGroupQuotaCmd, err := makeOperationGroupQuotaCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupQuotaCmd)

	operationGroupRegistryCmd, err := makeOperationGroupRegistryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRegistryCmd)

	operationGroupReplicationCmd, err := makeOperationGroupReplicationCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupReplicationCmd)

	operationGroupRepositoryCmd, err := makeOperationGroupRepositoryCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRepositoryCmd)

	operationGroupRetentionCmd, err := makeOperationGroupRetentionCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRetentionCmd)

	operationGroupRobotCmd, err := makeOperationGroupRobotCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRobotCmd)

	operationGroupRobotv1Cmd, err := makeOperationGroupRobotv1Cmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupRobotv1Cmd)

	operationGroupScanCmd, err := makeOperationGroupScanCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupScanCmd)

	operationGroupScanAllCmd, err := makeOperationGroupScanAllCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupScanAllCmd)

	operationGroupScannerCmd, err := makeOperationGroupScannerCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupScannerCmd)

	operationGroupSearchCmd, err := makeOperationGroupSearchCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSearchCmd)

	operationGroupStatisticCmd, err := makeOperationGroupStatisticCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupStatisticCmd)

	operationGroupSystemcveAllowlistCmd, err := makeOperationGroupSystemcveAllowlistCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSystemcveAllowlistCmd)

	operationGroupSysteminfoCmd, err := makeOperationGroupSysteminfoCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupSysteminfoCmd)

	operationGroupUserCmd, err := makeOperationGroupUserCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUserCmd)

	operationGroupUsergroupCmd, err := makeOperationGroupUsergroupCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupUsergroupCmd)

	operationGroupWebhookCmd, err := makeOperationGroupWebhookCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupWebhookCmd)

	operationGroupWebhookjobCmd, err := makeOperationGroupWebhookjobCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupWebhookjobCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

// registerAuthInoWriterFlags registers all flags needed to perform authentication
func registerAuthInoWriterFlags(cmd *cobra.Command) error {
	/* */
	cmd.PersistentFlags().String("username", "", "username for basic auth")
	viper.BindPFlag("username", cmd.PersistentFlags().Lookup("username"))
	cmd.PersistentFlags().String("password", "", "password for basic auth")
	viper.BindPFlag("password", cmd.PersistentFlags().Lookup("password"))
	return nil
}

// makeAuthInfoWriter retrieves cmd flags and construct an auth info writer
func makeAuthInfoWriter(cmd *cobra.Command) (runtime.ClientAuthInfoWriter, error) {
	auths := []runtime.ClientAuthInfoWriter{}
	/* */
	if viper.IsSet("username") {
		usr := viper.GetString("username")
		if !viper.IsSet("password") {
			return nil, fmt.Errorf("Basic Auth password for user [%v] is not provided.", usr)
		}
		pwd := viper.GetString("password")
		auths = append(auths, httptransport.BasicAuth(usr, pwd))
	}
	if len(auths) == 0 {
		logDebugf("Warning: No auth params detected.")
		return nil, nil
	}
	// compose all auths together
	return httptransport.Compose(auths...), nil
}

func makeOperationGroupArtifactCmd() (*cobra.Command, error) {
	operationGroupArtifactCmd := &cobra.Command{
		Use:  "artifact",
		Long: ``,
	}

	operationCopyArtifactCmd, err := makeOperationArtifactCopyArtifactCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationCopyArtifactCmd)

	operationAddLabelCmd, err := makeOperationArtifactAddLabelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationAddLabelCmd)

	operationCreateTagCmd, err := makeOperationArtifactCreateTagCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationCreateTagCmd)

	operationDeleteArtifactCmd, err := makeOperationArtifactDeleteArtifactCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationDeleteArtifactCmd)

	operationDeleteTagCmd, err := makeOperationArtifactDeleteTagCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationDeleteTagCmd)

	operationGetAdditionCmd, err := makeOperationArtifactGetAdditionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationGetAdditionCmd)

	operationGetArtifactCmd, err := makeOperationArtifactGetArtifactCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationGetArtifactCmd)

	operationGetVulnerabilitiesAdditionCmd, err := makeOperationArtifactGetVulnerabilitiesAdditionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationGetVulnerabilitiesAdditionCmd)

	operationListAccessoriesCmd, err := makeOperationArtifactListAccessoriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationListAccessoriesCmd)

	operationListArtifactsCmd, err := makeOperationArtifactListArtifactsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationListArtifactsCmd)

	operationListTagsCmd, err := makeOperationArtifactListTagsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationListTagsCmd)

	operationRemoveLabelCmd, err := makeOperationArtifactRemoveLabelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupArtifactCmd.AddCommand(operationRemoveLabelCmd)

	return operationGroupArtifactCmd, nil
}
func makeOperationGroupAuditlogCmd() (*cobra.Command, error) {
	operationGroupAuditlogCmd := &cobra.Command{
		Use:  "auditlog",
		Long: ``,
	}

	operationListAuditLogsCmd, err := makeOperationAuditlogListAuditLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupAuditlogCmd.AddCommand(operationListAuditLogsCmd)

	return operationGroupAuditlogCmd, nil
}
func makeOperationGroupConfigureCmd() (*cobra.Command, error) {
	operationGroupConfigureCmd := &cobra.Command{
		Use:  "configure",
		Long: ``,
	}

	operationGetConfigurationsCmd, err := makeOperationConfigureGetConfigurationsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigureCmd.AddCommand(operationGetConfigurationsCmd)

	operationGetInternalconfigCmd, err := makeOperationConfigureGetInternalconfigCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigureCmd.AddCommand(operationGetInternalconfigCmd)

	operationUpdateConfigurationsCmd, err := makeOperationConfigureUpdateConfigurationsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupConfigureCmd.AddCommand(operationUpdateConfigurationsCmd)

	return operationGroupConfigureCmd, nil
}
func makeOperationGroupGcCmd() (*cobra.Command, error) {
	operationGroupGcCmd := &cobra.Command{
		Use:  "gc",
		Long: ``,
	}

	operationCreateGCScheduleCmd, err := makeOperationGcCreateGCScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationCreateGCScheduleCmd)

	operationGetGCCmd, err := makeOperationGcGetGCCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationGetGCCmd)

	operationGetGCHistoryCmd, err := makeOperationGcGetGCHistoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationGetGCHistoryCmd)

	operationGetGCLogCmd, err := makeOperationGcGetGCLogCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationGetGCLogCmd)

	operationGetGCScheduleCmd, err := makeOperationGcGetGCScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationGetGCScheduleCmd)

	operationUpdateGCScheduleCmd, err := makeOperationGcUpdateGCScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupGcCmd.AddCommand(operationUpdateGCScheduleCmd)

	return operationGroupGcCmd, nil
}
func makeOperationGroupHealthCmd() (*cobra.Command, error) {
	operationGroupHealthCmd := &cobra.Command{
		Use:  "health",
		Long: ``,
	}

	operationGetHealthCmd, err := makeOperationHealthGetHealthCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHealthCmd.AddCommand(operationGetHealthCmd)

	return operationGroupHealthCmd, nil
}
func makeOperationGroupIconCmd() (*cobra.Command, error) {
	operationGroupIconCmd := &cobra.Command{
		Use:  "icon",
		Long: ``,
	}

	operationGetIconCmd, err := makeOperationIconGetIconCmd()
	if err != nil {
		return nil, err
	}
	operationGroupIconCmd.AddCommand(operationGetIconCmd)

	return operationGroupIconCmd, nil
}
func makeOperationGroupImmutableCmd() (*cobra.Command, error) {
	operationGroupImmutableCmd := &cobra.Command{
		Use:  "immutable",
		Long: ``,
	}

	operationCreateImmuRuleCmd, err := makeOperationImmutableCreateImmuRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImmutableCmd.AddCommand(operationCreateImmuRuleCmd)

	operationDeleteImmuRuleCmd, err := makeOperationImmutableDeleteImmuRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImmutableCmd.AddCommand(operationDeleteImmuRuleCmd)

	operationListImmuRulesCmd, err := makeOperationImmutableListImmuRulesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImmutableCmd.AddCommand(operationListImmuRulesCmd)

	operationUpdateImmuRuleCmd, err := makeOperationImmutableUpdateImmuRuleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupImmutableCmd.AddCommand(operationUpdateImmuRuleCmd)

	return operationGroupImmutableCmd, nil
}
func makeOperationGroupLabelCmd() (*cobra.Command, error) {
	operationGroupLabelCmd := &cobra.Command{
		Use:  "label",
		Long: ``,
	}

	operationCreateLabelCmd, err := makeOperationLabelCreateLabelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLabelCmd.AddCommand(operationCreateLabelCmd)

	operationDeleteLabelCmd, err := makeOperationLabelDeleteLabelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLabelCmd.AddCommand(operationDeleteLabelCmd)

	operationGetLabelByIDCmd, err := makeOperationLabelGetLabelByIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLabelCmd.AddCommand(operationGetLabelByIDCmd)

	operationListLabelsCmd, err := makeOperationLabelListLabelsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLabelCmd.AddCommand(operationListLabelsCmd)

	operationUpdateLabelCmd, err := makeOperationLabelUpdateLabelCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLabelCmd.AddCommand(operationUpdateLabelCmd)

	return operationGroupLabelCmd, nil
}
func makeOperationGroupLdapCmd() (*cobra.Command, error) {
	operationGroupLdapCmd := &cobra.Command{
		Use:  "ldap",
		Long: ``,
	}

	operationImportLdapUserCmd, err := makeOperationLdapImportLdapUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationImportLdapUserCmd)

	operationPingLdapCmd, err := makeOperationLdapPingLdapCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationPingLdapCmd)

	operationSearchLdapGroupCmd, err := makeOperationLdapSearchLdapGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationSearchLdapGroupCmd)

	operationSearchLdapUserCmd, err := makeOperationLdapSearchLdapUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLdapCmd.AddCommand(operationSearchLdapUserCmd)

	return operationGroupLdapCmd, nil
}
func makeOperationGroupMemberCmd() (*cobra.Command, error) {
	operationGroupMemberCmd := &cobra.Command{
		Use:  "member",
		Long: ``,
	}

	operationCreateProjectMemberCmd, err := makeOperationMemberCreateProjectMemberCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMemberCmd.AddCommand(operationCreateProjectMemberCmd)

	operationDeleteProjectMemberCmd, err := makeOperationMemberDeleteProjectMemberCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMemberCmd.AddCommand(operationDeleteProjectMemberCmd)

	operationGetProjectMemberCmd, err := makeOperationMemberGetProjectMemberCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMemberCmd.AddCommand(operationGetProjectMemberCmd)

	operationListProjectMembersCmd, err := makeOperationMemberListProjectMembersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMemberCmd.AddCommand(operationListProjectMembersCmd)

	operationUpdateProjectMemberCmd, err := makeOperationMemberUpdateProjectMemberCmd()
	if err != nil {
		return nil, err
	}
	operationGroupMemberCmd.AddCommand(operationUpdateProjectMemberCmd)

	return operationGroupMemberCmd, nil
}
func makeOperationGroupOidcCmd() (*cobra.Command, error) {
	operationGroupOidcCmd := &cobra.Command{
		Use:  "oidc",
		Long: ``,
	}

	operationPingOIDCCmd, err := makeOperationOidcPingOIDCCmd()
	if err != nil {
		return nil, err
	}
	operationGroupOidcCmd.AddCommand(operationPingOIDCCmd)

	return operationGroupOidcCmd, nil
}
func makeOperationGroupPingCmd() (*cobra.Command, error) {
	operationGroupPingCmd := &cobra.Command{
		Use:  "ping",
		Long: ``,
	}

	operationGetPingCmd, err := makeOperationPingGetPingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPingCmd.AddCommand(operationGetPingCmd)

	return operationGroupPingCmd, nil
}
func makeOperationGroupPreheatCmd() (*cobra.Command, error) {
	operationGroupPreheatCmd := &cobra.Command{
		Use:  "preheat",
		Long: ``,
	}

	operationCreateInstanceCmd, err := makeOperationPreheatCreateInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationCreateInstanceCmd)

	operationCreatePolicyCmd, err := makeOperationPreheatCreatePolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationCreatePolicyCmd)

	operationDeleteInstanceCmd, err := makeOperationPreheatDeleteInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationDeleteInstanceCmd)

	operationDeletePolicyCmd, err := makeOperationPreheatDeletePolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationDeletePolicyCmd)

	operationGetExecutionCmd, err := makeOperationPreheatGetExecutionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationGetExecutionCmd)

	operationGetInstanceCmd, err := makeOperationPreheatGetInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationGetInstanceCmd)

	operationGetPolicyCmd, err := makeOperationPreheatGetPolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationGetPolicyCmd)

	operationGetPreheatLogCmd, err := makeOperationPreheatGetPreheatLogCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationGetPreheatLogCmd)

	operationListExecutionsCmd, err := makeOperationPreheatListExecutionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListExecutionsCmd)

	operationListInstancesCmd, err := makeOperationPreheatListInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListInstancesCmd)

	operationListPoliciesCmd, err := makeOperationPreheatListPoliciesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListPoliciesCmd)

	operationListProvidersCmd, err := makeOperationPreheatListProvidersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListProvidersCmd)

	operationListProvidersUnderProjectCmd, err := makeOperationPreheatListProvidersUnderProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListProvidersUnderProjectCmd)

	operationListTasksCmd, err := makeOperationPreheatListTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationListTasksCmd)

	operationManualPreheatCmd, err := makeOperationPreheatManualPreheatCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationManualPreheatCmd)

	operationPingInstancesCmd, err := makeOperationPreheatPingInstancesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationPingInstancesCmd)

	operationStopExecutionCmd, err := makeOperationPreheatStopExecutionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationStopExecutionCmd)

	operationUpdateInstanceCmd, err := makeOperationPreheatUpdateInstanceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationUpdateInstanceCmd)

	operationUpdatePolicyCmd, err := makeOperationPreheatUpdatePolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupPreheatCmd.AddCommand(operationUpdatePolicyCmd)

	return operationGroupPreheatCmd, nil
}
func makeOperationGroupProjectCmd() (*cobra.Command, error) {
	operationGroupProjectCmd := &cobra.Command{
		Use:  "project",
		Long: ``,
	}

	operationCreateProjectCmd, err := makeOperationProjectCreateProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationCreateProjectCmd)

	operationDeleteProjectCmd, err := makeOperationProjectDeleteProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationDeleteProjectCmd)

	operationGetLogsCmd, err := makeOperationProjectGetLogsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationGetLogsCmd)

	operationGetProjectCmd, err := makeOperationProjectGetProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationGetProjectCmd)

	operationGetProjectDeletableCmd, err := makeOperationProjectGetProjectDeletableCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationGetProjectDeletableCmd)

	operationGetProjectSummaryCmd, err := makeOperationProjectGetProjectSummaryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationGetProjectSummaryCmd)

	operationGetScannerOfProjectCmd, err := makeOperationProjectGetScannerOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationGetScannerOfProjectCmd)

	operationHeadProjectCmd, err := makeOperationProjectHeadProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationHeadProjectCmd)

	operationListProjectsCmd, err := makeOperationProjectListProjectsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationListProjectsCmd)

	operationListScannerCandidatesOfProjectCmd, err := makeOperationProjectListScannerCandidatesOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationListScannerCandidatesOfProjectCmd)

	operationSetScannerOfProjectCmd, err := makeOperationProjectSetScannerOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationSetScannerOfProjectCmd)

	operationUpdateProjectCmd, err := makeOperationProjectUpdateProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectCmd.AddCommand(operationUpdateProjectCmd)

	return operationGroupProjectCmd, nil
}
func makeOperationGroupProjectMetadataCmd() (*cobra.Command, error) {
	operationGroupProjectMetadataCmd := &cobra.Command{
		Use:  "project_metadata",
		Long: ``,
	}

	operationAddProjectMetadatasCmd, err := makeOperationProjectMetadataAddProjectMetadatasCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectMetadataCmd.AddCommand(operationAddProjectMetadatasCmd)

	operationDeleteProjectMetadataCmd, err := makeOperationProjectMetadataDeleteProjectMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectMetadataCmd.AddCommand(operationDeleteProjectMetadataCmd)

	operationGetProjectMetadataCmd, err := makeOperationProjectMetadataGetProjectMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectMetadataCmd.AddCommand(operationGetProjectMetadataCmd)

	operationListProjectMetadatasCmd, err := makeOperationProjectMetadataListProjectMetadatasCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectMetadataCmd.AddCommand(operationListProjectMetadatasCmd)

	operationUpdateProjectMetadataCmd, err := makeOperationProjectMetadataUpdateProjectMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupProjectMetadataCmd.AddCommand(operationUpdateProjectMetadataCmd)

	return operationGroupProjectMetadataCmd, nil
}
func makeOperationGroupQuotaCmd() (*cobra.Command, error) {
	operationGroupQuotaCmd := &cobra.Command{
		Use:  "quota",
		Long: ``,
	}

	operationGetQuotaCmd, err := makeOperationQuotaGetQuotaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupQuotaCmd.AddCommand(operationGetQuotaCmd)

	operationListQuotasCmd, err := makeOperationQuotaListQuotasCmd()
	if err != nil {
		return nil, err
	}
	operationGroupQuotaCmd.AddCommand(operationListQuotasCmd)

	operationUpdateQuotaCmd, err := makeOperationQuotaUpdateQuotaCmd()
	if err != nil {
		return nil, err
	}
	operationGroupQuotaCmd.AddCommand(operationUpdateQuotaCmd)

	return operationGroupQuotaCmd, nil
}
func makeOperationGroupRegistryCmd() (*cobra.Command, error) {
	operationGroupRegistryCmd := &cobra.Command{
		Use:  "registry",
		Long: ``,
	}

	operationCreateRegistryCmd, err := makeOperationRegistryCreateRegistryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationCreateRegistryCmd)

	operationDeleteRegistryCmd, err := makeOperationRegistryDeleteRegistryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationDeleteRegistryCmd)

	operationGetRegistryCmd, err := makeOperationRegistryGetRegistryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationGetRegistryCmd)

	operationGetRegistryInfoCmd, err := makeOperationRegistryGetRegistryInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationGetRegistryInfoCmd)

	operationListRegistriesCmd, err := makeOperationRegistryListRegistriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationListRegistriesCmd)

	operationListRegistryProviderInfosCmd, err := makeOperationRegistryListRegistryProviderInfosCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationListRegistryProviderInfosCmd)

	operationListRegistryProviderTypesCmd, err := makeOperationRegistryListRegistryProviderTypesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationListRegistryProviderTypesCmd)

	operationPingRegistryCmd, err := makeOperationRegistryPingRegistryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationPingRegistryCmd)

	operationUpdateRegistryCmd, err := makeOperationRegistryUpdateRegistryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRegistryCmd.AddCommand(operationUpdateRegistryCmd)

	return operationGroupRegistryCmd, nil
}
func makeOperationGroupReplicationCmd() (*cobra.Command, error) {
	operationGroupReplicationCmd := &cobra.Command{
		Use:  "replication",
		Long: ``,
	}

	operationCreateReplicationPolicyCmd, err := makeOperationReplicationCreateReplicationPolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationCreateReplicationPolicyCmd)

	operationDeleteReplicationPolicyCmd, err := makeOperationReplicationDeleteReplicationPolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationDeleteReplicationPolicyCmd)

	operationGetReplicationExecutionCmd, err := makeOperationReplicationGetReplicationExecutionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationGetReplicationExecutionCmd)

	operationGetReplicationLogCmd, err := makeOperationReplicationGetReplicationLogCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationGetReplicationLogCmd)

	operationGetReplicationPolicyCmd, err := makeOperationReplicationGetReplicationPolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationGetReplicationPolicyCmd)

	operationListReplicationExecutionsCmd, err := makeOperationReplicationListReplicationExecutionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationListReplicationExecutionsCmd)

	operationListReplicationPoliciesCmd, err := makeOperationReplicationListReplicationPoliciesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationListReplicationPoliciesCmd)

	operationListReplicationTasksCmd, err := makeOperationReplicationListReplicationTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationListReplicationTasksCmd)

	operationStartReplicationCmd, err := makeOperationReplicationStartReplicationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationStartReplicationCmd)

	operationStopReplicationCmd, err := makeOperationReplicationStopReplicationCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationStopReplicationCmd)

	operationUpdateReplicationPolicyCmd, err := makeOperationReplicationUpdateReplicationPolicyCmd()
	if err != nil {
		return nil, err
	}
	operationGroupReplicationCmd.AddCommand(operationUpdateReplicationPolicyCmd)

	return operationGroupReplicationCmd, nil
}
func makeOperationGroupRepositoryCmd() (*cobra.Command, error) {
	operationGroupRepositoryCmd := &cobra.Command{
		Use:  "repository",
		Long: ``,
	}

	operationDeleteRepositoryCmd, err := makeOperationRepositoryDeleteRepositoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRepositoryCmd.AddCommand(operationDeleteRepositoryCmd)

	operationGetRepositoryCmd, err := makeOperationRepositoryGetRepositoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRepositoryCmd.AddCommand(operationGetRepositoryCmd)

	operationListAllRepositoriesCmd, err := makeOperationRepositoryListAllRepositoriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRepositoryCmd.AddCommand(operationListAllRepositoriesCmd)

	operationListRepositoriesCmd, err := makeOperationRepositoryListRepositoriesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRepositoryCmd.AddCommand(operationListRepositoriesCmd)

	operationUpdateRepositoryCmd, err := makeOperationRepositoryUpdateRepositoryCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRepositoryCmd.AddCommand(operationUpdateRepositoryCmd)

	return operationGroupRepositoryCmd, nil
}
func makeOperationGroupRetentionCmd() (*cobra.Command, error) {
	operationGroupRetentionCmd := &cobra.Command{
		Use:  "retention",
		Long: ``,
	}

	operationCreateRetentionCmd, err := makeOperationRetentionCreateRetentionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationCreateRetentionCmd)

	operationDeleteRetentionCmd, err := makeOperationRetentionDeleteRetentionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationDeleteRetentionCmd)

	operationGetRentenitionMetadataCmd, err := makeOperationRetentionGetRentenitionMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationGetRentenitionMetadataCmd)

	operationGetRetentionCmd, err := makeOperationRetentionGetRetentionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationGetRetentionCmd)

	operationGetRetentionTaskLogCmd, err := makeOperationRetentionGetRetentionTaskLogCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationGetRetentionTaskLogCmd)

	operationListRetentionExecutionsCmd, err := makeOperationRetentionListRetentionExecutionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationListRetentionExecutionsCmd)

	operationListRetentionTasksCmd, err := makeOperationRetentionListRetentionTasksCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationListRetentionTasksCmd)

	operationOperateRetentionExecutionCmd, err := makeOperationRetentionOperateRetentionExecutionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationOperateRetentionExecutionCmd)

	operationTriggerRetentionExecutionCmd, err := makeOperationRetentionTriggerRetentionExecutionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationTriggerRetentionExecutionCmd)

	operationUpdateRetentionCmd, err := makeOperationRetentionUpdateRetentionCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRetentionCmd.AddCommand(operationUpdateRetentionCmd)

	return operationGroupRetentionCmd, nil
}
func makeOperationGroupRobotCmd() (*cobra.Command, error) {
	operationGroupRobotCmd := &cobra.Command{
		Use:  "robot",
		Long: ``,
	}

	operationCreateRobotCmd, err := makeOperationRobotCreateRobotCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationCreateRobotCmd)

	operationDeleteRobotCmd, err := makeOperationRobotDeleteRobotCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationDeleteRobotCmd)

	operationGetRobotByIDCmd, err := makeOperationRobotGetRobotByIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationGetRobotByIDCmd)

	operationListRobotCmd, err := makeOperationRobotListRobotCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationListRobotCmd)

	operationRefreshSecCmd, err := makeOperationRobotRefreshSecCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationRefreshSecCmd)

	operationUpdateRobotCmd, err := makeOperationRobotUpdateRobotCmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotCmd.AddCommand(operationUpdateRobotCmd)

	return operationGroupRobotCmd, nil
}
func makeOperationGroupRobotv1Cmd() (*cobra.Command, error) {
	operationGroupRobotv1Cmd := &cobra.Command{
		Use:  "robotv1",
		Long: ``,
	}

	operationCreateRobotV1Cmd, err := makeOperationRobotv1CreateRobotV1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotv1Cmd.AddCommand(operationCreateRobotV1Cmd)

	operationDeleteRobotV1Cmd, err := makeOperationRobotv1DeleteRobotV1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotv1Cmd.AddCommand(operationDeleteRobotV1Cmd)

	operationGetRobotByIDV1Cmd, err := makeOperationRobotv1GetRobotByIDV1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotv1Cmd.AddCommand(operationGetRobotByIDV1Cmd)

	operationListRobotV1Cmd, err := makeOperationRobotv1ListRobotV1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotv1Cmd.AddCommand(operationListRobotV1Cmd)

	operationUpdateRobotV1Cmd, err := makeOperationRobotv1UpdateRobotV1Cmd()
	if err != nil {
		return nil, err
	}
	operationGroupRobotv1Cmd.AddCommand(operationUpdateRobotV1Cmd)

	return operationGroupRobotv1Cmd, nil
}
func makeOperationGroupScanCmd() (*cobra.Command, error) {
	operationGroupScanCmd := &cobra.Command{
		Use:  "scan",
		Long: ``,
	}

	operationGetReportLogCmd, err := makeOperationScanGetReportLogCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanCmd.AddCommand(operationGetReportLogCmd)

	operationScanArtifactCmd, err := makeOperationScanScanArtifactCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanCmd.AddCommand(operationScanArtifactCmd)

	operationStopScanArtifactCmd, err := makeOperationScanStopScanArtifactCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanCmd.AddCommand(operationStopScanArtifactCmd)

	return operationGroupScanCmd, nil
}
func makeOperationGroupScanAllCmd() (*cobra.Command, error) {
	operationGroupScanAllCmd := &cobra.Command{
		Use:  "scan_all",
		Long: ``,
	}

	operationCreateScanAllScheduleCmd, err := makeOperationScanAllCreateScanAllScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationCreateScanAllScheduleCmd)

	operationGetLatestScanAllMetricsCmd, err := makeOperationScanAllGetLatestScanAllMetricsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationGetLatestScanAllMetricsCmd)

	operationGetLatestScheduledScanAllMetricsCmd, err := makeOperationScanAllGetLatestScheduledScanAllMetricsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationGetLatestScheduledScanAllMetricsCmd)

	operationGetScanAllScheduleCmd, err := makeOperationScanAllGetScanAllScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationGetScanAllScheduleCmd)

	operationStopScanAllCmd, err := makeOperationScanAllStopScanAllCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationStopScanAllCmd)

	operationUpdateScanAllScheduleCmd, err := makeOperationScanAllUpdateScanAllScheduleCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScanAllCmd.AddCommand(operationUpdateScanAllScheduleCmd)

	return operationGroupScanAllCmd, nil
}
func makeOperationGroupScannerCmd() (*cobra.Command, error) {
	operationGroupScannerCmd := &cobra.Command{
		Use:  "scanner",
		Long: ``,
	}

	operationCreateScannerCmd, err := makeOperationScannerCreateScannerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationCreateScannerCmd)

	operationDeleteScannerCmd, err := makeOperationScannerDeleteScannerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationDeleteScannerCmd)

	operationGetScannerCmd, err := makeOperationScannerGetScannerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationGetScannerCmd)

	operationGetScannerMetadataCmd, err := makeOperationScannerGetScannerMetadataCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationGetScannerMetadataCmd)

	operationListScannersCmd, err := makeOperationScannerListScannersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationListScannersCmd)

	operationPingScannerCmd, err := makeOperationScannerPingScannerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationPingScannerCmd)

	operationSetScannerAsDefaultCmd, err := makeOperationScannerSetScannerAsDefaultCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationSetScannerAsDefaultCmd)

	operationUpdateScannerCmd, err := makeOperationScannerUpdateScannerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupScannerCmd.AddCommand(operationUpdateScannerCmd)

	return operationGroupScannerCmd, nil
}
func makeOperationGroupSearchCmd() (*cobra.Command, error) {
	operationGroupSearchCmd := &cobra.Command{
		Use:  "search",
		Long: ``,
	}

	operationSearchCmd, err := makeOperationSearchSearchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSearchCmd.AddCommand(operationSearchCmd)

	return operationGroupSearchCmd, nil
}
func makeOperationGroupStatisticCmd() (*cobra.Command, error) {
	operationGroupStatisticCmd := &cobra.Command{
		Use:  "statistic",
		Long: ``,
	}

	operationGetStatisticCmd, err := makeOperationStatisticGetStatisticCmd()
	if err != nil {
		return nil, err
	}
	operationGroupStatisticCmd.AddCommand(operationGetStatisticCmd)

	return operationGroupStatisticCmd, nil
}
func makeOperationGroupSystemcveAllowlistCmd() (*cobra.Command, error) {
	operationGroupSystemcveAllowlistCmd := &cobra.Command{
		Use:  "system_c_v_e_allowlist",
		Long: ``,
	}

	operationGetSystemCVEAllowlistCmd, err := makeOperationSystemcveAllowlistGetSystemCVEAllowlistCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemcveAllowlistCmd.AddCommand(operationGetSystemCVEAllowlistCmd)

	operationPutSystemCVEAllowlistCmd, err := makeOperationSystemcveAllowlistPutSystemCVEAllowlistCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSystemcveAllowlistCmd.AddCommand(operationPutSystemCVEAllowlistCmd)

	return operationGroupSystemcveAllowlistCmd, nil
}
func makeOperationGroupSysteminfoCmd() (*cobra.Command, error) {
	operationGroupSysteminfoCmd := &cobra.Command{
		Use:  "systeminfo",
		Long: ``,
	}

	operationGetCertCmd, err := makeOperationSysteminfoGetCertCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSysteminfoCmd.AddCommand(operationGetCertCmd)

	operationGetSystemInfoCmd, err := makeOperationSysteminfoGetSystemInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSysteminfoCmd.AddCommand(operationGetSystemInfoCmd)

	operationGetVolumesCmd, err := makeOperationSysteminfoGetVolumesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupSysteminfoCmd.AddCommand(operationGetVolumesCmd)

	return operationGroupSysteminfoCmd, nil
}
func makeOperationGroupUserCmd() (*cobra.Command, error) {
	operationGroupUserCmd := &cobra.Command{
		Use:  "user",
		Long: ``,
	}

	operationCreateUserCmd, err := makeOperationUserCreateUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationCreateUserCmd)

	operationDeleteUserCmd, err := makeOperationUserDeleteUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationDeleteUserCmd)

	operationGetCurrentUserInfoCmd, err := makeOperationUserGetCurrentUserInfoCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetCurrentUserInfoCmd)

	operationGetCurrentUserPermissionsCmd, err := makeOperationUserGetCurrentUserPermissionsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetCurrentUserPermissionsCmd)

	operationGetUserCmd, err := makeOperationUserGetUserCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationGetUserCmd)

	operationListUsersCmd, err := makeOperationUserListUsersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationListUsersCmd)

	operationSearchUsersCmd, err := makeOperationUserSearchUsersCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationSearchUsersCmd)

	operationSetCliSecretCmd, err := makeOperationUserSetCliSecretCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationSetCliSecretCmd)

	operationSetUserSysAdminCmd, err := makeOperationUserSetUserSysAdminCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationSetUserSysAdminCmd)

	operationUpdateUserPasswordCmd, err := makeOperationUserUpdateUserPasswordCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationUpdateUserPasswordCmd)

	operationUpdateUserProfileCmd, err := makeOperationUserUpdateUserProfileCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUserCmd.AddCommand(operationUpdateUserProfileCmd)

	return operationGroupUserCmd, nil
}
func makeOperationGroupUsergroupCmd() (*cobra.Command, error) {
	operationGroupUsergroupCmd := &cobra.Command{
		Use:  "usergroup",
		Long: ``,
	}

	operationCreateUserGroupCmd, err := makeOperationUsergroupCreateUserGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationCreateUserGroupCmd)

	operationDeleteUserGroupCmd, err := makeOperationUsergroupDeleteUserGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationDeleteUserGroupCmd)

	operationGetUserGroupCmd, err := makeOperationUsergroupGetUserGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationGetUserGroupCmd)

	operationListUserGroupsCmd, err := makeOperationUsergroupListUserGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationListUserGroupsCmd)

	operationSearchUserGroupsCmd, err := makeOperationUsergroupSearchUserGroupsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationSearchUserGroupsCmd)

	operationUpdateUserGroupCmd, err := makeOperationUsergroupUpdateUserGroupCmd()
	if err != nil {
		return nil, err
	}
	operationGroupUsergroupCmd.AddCommand(operationUpdateUserGroupCmd)

	return operationGroupUsergroupCmd, nil
}
func makeOperationGroupWebhookCmd() (*cobra.Command, error) {
	operationGroupWebhookCmd := &cobra.Command{
		Use:  "webhook",
		Long: ``,
	}

	operationCreateWebhookPolicyOfProjectCmd, err := makeOperationWebhookCreateWebhookPolicyOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationCreateWebhookPolicyOfProjectCmd)

	operationDeleteWebhookPolicyOfProjectCmd, err := makeOperationWebhookDeleteWebhookPolicyOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationDeleteWebhookPolicyOfProjectCmd)

	operationGetSupportedEventTypesCmd, err := makeOperationWebhookGetSupportedEventTypesCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationGetSupportedEventTypesCmd)

	operationGetWebhookPolicyOfProjectCmd, err := makeOperationWebhookGetWebhookPolicyOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationGetWebhookPolicyOfProjectCmd)

	operationLastTriggerCmd, err := makeOperationWebhookLastTriggerCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationLastTriggerCmd)

	operationListWebhookPoliciesOfProjectCmd, err := makeOperationWebhookListWebhookPoliciesOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationListWebhookPoliciesOfProjectCmd)

	operationUpdateWebhookPolicyOfProjectCmd, err := makeOperationWebhookUpdateWebhookPolicyOfProjectCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookCmd.AddCommand(operationUpdateWebhookPolicyOfProjectCmd)

	return operationGroupWebhookCmd, nil
}
func makeOperationGroupWebhookjobCmd() (*cobra.Command, error) {
	operationGroupWebhookjobCmd := &cobra.Command{
		Use:  "webhookjob",
		Long: ``,
	}

	operationListWebhookJobsCmd, err := makeOperationWebhookjobListWebhookJobsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupWebhookjobCmd.AddCommand(operationListWebhookJobsCmd)

	return operationGroupWebhookjobCmd, nil
}
