// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Stats

// register flags to command
func registerModelStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStatsCompleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatsMetrics(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatsOngoing(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatsTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatsTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStatsCompleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	completedDescription := `The number of the finished scan processes triggered by the scan all action`

	var completedFlagName string
	if cmdPrefix == "" {
		completedFlagName = "completed"
	} else {
		completedFlagName = fmt.Sprintf("%v.completed", cmdPrefix)
	}

	var completedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(completedFlagName, completedFlagDefault, completedDescription)

	return nil
}

func registerStatsMetrics(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: metrics map[string]int64 map type is not supported by go-swagger cli yet

	return nil
}

func registerStatsOngoing(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ongoingDescription := `A flag indicating job status of scan all.`

	var ongoingFlagName string
	if cmdPrefix == "" {
		ongoingFlagName = "ongoing"
	} else {
		ongoingFlagName = fmt.Sprintf("%v.ongoing", cmdPrefix)
	}

	var ongoingFlagDefault bool

	_ = cmd.PersistentFlags().Bool(ongoingFlagName, ongoingFlagDefault, ongoingDescription)

	return nil
}

func registerStatsTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := `The total number of scan processes triggered by the scan all action`

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

func registerStatsTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerDescription := `Enum: ["Manual","Schedule","Event"]. The trigger of the scan all job.`

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	var triggerFlagDefault string

	_ = cmd.PersistentFlags().String(triggerFlagName, triggerFlagDefault, triggerDescription)

	if err := cmd.RegisterFlagCompletionFunc(triggerFlagName,
		func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {
			var res []string
			if err := json.Unmarshal([]byte(`["Manual","Schedule","Event"]`), &res); err != nil {
				panic(err)
			}
			return res, cobra.ShellCompDirectiveDefault
		}); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStatsFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, completedAdded := retrieveStatsCompletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || completedAdded

	err, metricsAdded := retrieveStatsMetricsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metricsAdded

	err, ongoingAdded := retrieveStatsOngoingFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ongoingAdded

	err, totalAdded := retrieveStatsTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	err, triggerAdded := retrieveStatsTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	return nil, retAdded
}

func retrieveStatsCompletedFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	completedFlagName := fmt.Sprintf("%v.completed", cmdPrefix)
	if cmd.Flags().Changed(completedFlagName) {

		var completedFlagName string
		if cmdPrefix == "" {
			completedFlagName = "completed"
		} else {
			completedFlagName = fmt.Sprintf("%v.completed", cmdPrefix)
		}

		completedFlagValue, err := cmd.Flags().GetInt64(completedFlagName)
		if err != nil {
			return err, false
		}
		m.Completed = completedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatsMetricsFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metricsFlagName := fmt.Sprintf("%v.metrics", cmdPrefix)
	if cmd.Flags().Changed(metricsFlagName) {
		// warning: metrics map type map[string]int64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveStatsOngoingFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ongoingFlagName := fmt.Sprintf("%v.ongoing", cmdPrefix)
	if cmd.Flags().Changed(ongoingFlagName) {

		var ongoingFlagName string
		if cmdPrefix == "" {
			ongoingFlagName = "ongoing"
		} else {
			ongoingFlagName = fmt.Sprintf("%v.ongoing", cmdPrefix)
		}

		ongoingFlagValue, err := cmd.Flags().GetBool(ongoingFlagName)
		if err != nil {
			return err, false
		}
		m.Ongoing = ongoingFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatsTotalFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt64(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatsTriggerFlags(depth int, m *models.Stats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {

		var triggerFlagName string
		if cmdPrefix == "" {
			triggerFlagName = "trigger"
		} else {
			triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
		}

		triggerFlagValue, err := cmd.Flags().GetString(triggerFlagName)
		if err != nil {
			return err, false
		}
		m.Trigger = triggerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
