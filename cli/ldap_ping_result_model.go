// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for LdapPingResult

// register flags to command
func registerModelLdapPingResultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLdapPingResultMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLdapPingResultSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLdapPingResultMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `The ping operation output message.`

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

func registerLdapPingResultSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	successDescription := `Test success`

	var successFlagName string
	if cmdPrefix == "" {
		successFlagName = "success"
	} else {
		successFlagName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var successFlagDefault bool

	_ = cmd.PersistentFlags().Bool(successFlagName, successFlagDefault, successDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLdapPingResultFlags(depth int, m *models.LdapPingResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, messageAdded := retrieveLdapPingResultMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	err, successAdded := retrieveLdapPingResultSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || successAdded

	return nil, retAdded
}

func retrieveLdapPingResultMessageFlags(depth int, m *models.LdapPingResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLdapPingResultSuccessFlags(depth int, m *models.LdapPingResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	successFlagName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(successFlagName) {

		var successFlagName string
		if cmdPrefix == "" {
			successFlagName = "success"
		} else {
			successFlagName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		successFlagValue, err := cmd.Flags().GetBool(successFlagName)
		if err != nil {
			return err, false
		}
		m.Success = successFlagValue

		retAdded = true
	}

	return nil, retAdded
}
