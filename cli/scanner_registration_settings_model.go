// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ScannerRegistrationSettings

// register flags to command
func registerModelScannerRegistrationSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScannerRegistrationSettingsAccessCredential(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationSettingsAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationSettingsName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerRegistrationSettingsURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScannerRegistrationSettingsAccessCredential(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessCredentialDescription := `An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.
`

	var accessCredentialFlagName string
	if cmdPrefix == "" {
		accessCredentialFlagName = "access_credential"
	} else {
		accessCredentialFlagName = fmt.Sprintf("%v.access_credential", cmdPrefix)
	}

	var accessCredentialFlagDefault string

	_ = cmd.PersistentFlags().String(accessCredentialFlagName, accessCredentialFlagDefault, accessCredentialDescription)

	return nil
}

func registerScannerRegistrationSettingsAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authDescription := `Specify what authentication approach is adopted for the HTTP communications.
Supported types Basic', 'Bearer' and api key header 'X-ScannerAdapter-API-Key'
`

	var authFlagName string
	if cmdPrefix == "" {
		authFlagName = "auth"
	} else {
		authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
	}

	var authFlagDefault string

	_ = cmd.PersistentFlags().String(authFlagName, authFlagDefault, authDescription)

	return nil
}

func registerScannerRegistrationSettingsName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Required. The name of this registration`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerScannerRegistrationSettingsURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive url strfmt.URI is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScannerRegistrationSettingsFlags(depth int, m *models.ScannerRegistrationSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessCredentialAdded := retrieveScannerRegistrationSettingsAccessCredentialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessCredentialAdded

	err, authAdded := retrieveScannerRegistrationSettingsAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authAdded

	err, nameAdded := retrieveScannerRegistrationSettingsNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, urlAdded := retrieveScannerRegistrationSettingsURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlAdded

	return nil, retAdded
}

func retrieveScannerRegistrationSettingsAccessCredentialFlags(depth int, m *models.ScannerRegistrationSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessCredentialFlagName := fmt.Sprintf("%v.access_credential", cmdPrefix)
	if cmd.Flags().Changed(accessCredentialFlagName) {

		var accessCredentialFlagName string
		if cmdPrefix == "" {
			accessCredentialFlagName = "access_credential"
		} else {
			accessCredentialFlagName = fmt.Sprintf("%v.access_credential", cmdPrefix)
		}

		accessCredentialFlagValue, err := cmd.Flags().GetString(accessCredentialFlagName)
		if err != nil {
			return err, false
		}
		m.AccessCredential = accessCredentialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationSettingsAuthFlags(depth int, m *models.ScannerRegistrationSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authFlagName := fmt.Sprintf("%v.auth", cmdPrefix)
	if cmd.Flags().Changed(authFlagName) {

		var authFlagName string
		if cmdPrefix == "" {
			authFlagName = "auth"
		} else {
			authFlagName = fmt.Sprintf("%v.auth", cmdPrefix)
		}

		authFlagValue, err := cmd.Flags().GetString(authFlagName)
		if err != nil {
			return err, false
		}
		m.Auth = authFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationSettingsNameFlags(depth int, m *models.ScannerRegistrationSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = &nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveScannerRegistrationSettingsURLFlags(depth int, m *models.ScannerRegistrationSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlFlagName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(urlFlagName) {

		// warning: primitive url strfmt.URI is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}
