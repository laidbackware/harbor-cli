// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RegistryProviderCredentialPattern

// register flags to command
func registerModelRegistryProviderCredentialPatternFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRegistryProviderCredentialPatternAccessKeyData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryProviderCredentialPatternAccessKeyType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryProviderCredentialPatternAccessSecretData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRegistryProviderCredentialPatternAccessSecretType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRegistryProviderCredentialPatternAccessKeyData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessKeyDataDescription := `The access key data`

	var accessKeyDataFlagName string
	if cmdPrefix == "" {
		accessKeyDataFlagName = "access_key_data"
	} else {
		accessKeyDataFlagName = fmt.Sprintf("%v.access_key_data", cmdPrefix)
	}

	var accessKeyDataFlagDefault string

	_ = cmd.PersistentFlags().String(accessKeyDataFlagName, accessKeyDataFlagDefault, accessKeyDataDescription)

	return nil
}

func registerRegistryProviderCredentialPatternAccessKeyType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessKeyTypeDescription := `The access key type`

	var accessKeyTypeFlagName string
	if cmdPrefix == "" {
		accessKeyTypeFlagName = "access_key_type"
	} else {
		accessKeyTypeFlagName = fmt.Sprintf("%v.access_key_type", cmdPrefix)
	}

	var accessKeyTypeFlagDefault string

	_ = cmd.PersistentFlags().String(accessKeyTypeFlagName, accessKeyTypeFlagDefault, accessKeyTypeDescription)

	return nil
}

func registerRegistryProviderCredentialPatternAccessSecretData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessSecretDataDescription := `The access secret data`

	var accessSecretDataFlagName string
	if cmdPrefix == "" {
		accessSecretDataFlagName = "access_secret_data"
	} else {
		accessSecretDataFlagName = fmt.Sprintf("%v.access_secret_data", cmdPrefix)
	}

	var accessSecretDataFlagDefault string

	_ = cmd.PersistentFlags().String(accessSecretDataFlagName, accessSecretDataFlagDefault, accessSecretDataDescription)

	return nil
}

func registerRegistryProviderCredentialPatternAccessSecretType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	accessSecretTypeDescription := `The access secret type`

	var accessSecretTypeFlagName string
	if cmdPrefix == "" {
		accessSecretTypeFlagName = "access_secret_type"
	} else {
		accessSecretTypeFlagName = fmt.Sprintf("%v.access_secret_type", cmdPrefix)
	}

	var accessSecretTypeFlagDefault string

	_ = cmd.PersistentFlags().String(accessSecretTypeFlagName, accessSecretTypeFlagDefault, accessSecretTypeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRegistryProviderCredentialPatternFlags(depth int, m *models.RegistryProviderCredentialPattern, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessKeyDataAdded := retrieveRegistryProviderCredentialPatternAccessKeyDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessKeyDataAdded

	err, accessKeyTypeAdded := retrieveRegistryProviderCredentialPatternAccessKeyTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessKeyTypeAdded

	err, accessSecretDataAdded := retrieveRegistryProviderCredentialPatternAccessSecretDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessSecretDataAdded

	err, accessSecretTypeAdded := retrieveRegistryProviderCredentialPatternAccessSecretTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessSecretTypeAdded

	return nil, retAdded
}

func retrieveRegistryProviderCredentialPatternAccessKeyDataFlags(depth int, m *models.RegistryProviderCredentialPattern, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessKeyDataFlagName := fmt.Sprintf("%v.access_key_data", cmdPrefix)
	if cmd.Flags().Changed(accessKeyDataFlagName) {

		var accessKeyDataFlagName string
		if cmdPrefix == "" {
			accessKeyDataFlagName = "access_key_data"
		} else {
			accessKeyDataFlagName = fmt.Sprintf("%v.access_key_data", cmdPrefix)
		}

		accessKeyDataFlagValue, err := cmd.Flags().GetString(accessKeyDataFlagName)
		if err != nil {
			return err, false
		}
		m.AccessKeyData = accessKeyDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryProviderCredentialPatternAccessKeyTypeFlags(depth int, m *models.RegistryProviderCredentialPattern, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessKeyTypeFlagName := fmt.Sprintf("%v.access_key_type", cmdPrefix)
	if cmd.Flags().Changed(accessKeyTypeFlagName) {

		var accessKeyTypeFlagName string
		if cmdPrefix == "" {
			accessKeyTypeFlagName = "access_key_type"
		} else {
			accessKeyTypeFlagName = fmt.Sprintf("%v.access_key_type", cmdPrefix)
		}

		accessKeyTypeFlagValue, err := cmd.Flags().GetString(accessKeyTypeFlagName)
		if err != nil {
			return err, false
		}
		m.AccessKeyType = accessKeyTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryProviderCredentialPatternAccessSecretDataFlags(depth int, m *models.RegistryProviderCredentialPattern, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessSecretDataFlagName := fmt.Sprintf("%v.access_secret_data", cmdPrefix)
	if cmd.Flags().Changed(accessSecretDataFlagName) {

		var accessSecretDataFlagName string
		if cmdPrefix == "" {
			accessSecretDataFlagName = "access_secret_data"
		} else {
			accessSecretDataFlagName = fmt.Sprintf("%v.access_secret_data", cmdPrefix)
		}

		accessSecretDataFlagValue, err := cmd.Flags().GetString(accessSecretDataFlagName)
		if err != nil {
			return err, false
		}
		m.AccessSecretData = accessSecretDataFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRegistryProviderCredentialPatternAccessSecretTypeFlags(depth int, m *models.RegistryProviderCredentialPattern, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessSecretTypeFlagName := fmt.Sprintf("%v.access_secret_type", cmdPrefix)
	if cmd.Flags().Changed(accessSecretTypeFlagName) {

		var accessSecretTypeFlagName string
		if cmdPrefix == "" {
			accessSecretTypeFlagName = "access_secret_type"
		} else {
			accessSecretTypeFlagName = fmt.Sprintf("%v.access_secret_type", cmdPrefix)
		}

		accessSecretTypeFlagValue, err := cmd.Flags().GetString(accessSecretTypeFlagName)
		if err != nil {
			return err, false
		}
		m.AccessSecretType = accessSecretTypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
