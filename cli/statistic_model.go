// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Statistic

// register flags to command
func registerModelStatisticFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerStatisticPrivateProjectCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticPrivateRepoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticPublicProjectCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticPublicRepoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticTotalProjectCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticTotalRepoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerStatisticTotalStorageConsumption(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerStatisticPrivateProjectCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	privateProjectCountDescription := `The count of the private projects`

	var privateProjectCountFlagName string
	if cmdPrefix == "" {
		privateProjectCountFlagName = "private_project_count"
	} else {
		privateProjectCountFlagName = fmt.Sprintf("%v.private_project_count", cmdPrefix)
	}

	var privateProjectCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(privateProjectCountFlagName, privateProjectCountFlagDefault, privateProjectCountDescription)

	return nil
}

func registerStatisticPrivateRepoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	privateRepoCountDescription := `The count of the private repositories`

	var privateRepoCountFlagName string
	if cmdPrefix == "" {
		privateRepoCountFlagName = "private_repo_count"
	} else {
		privateRepoCountFlagName = fmt.Sprintf("%v.private_repo_count", cmdPrefix)
	}

	var privateRepoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(privateRepoCountFlagName, privateRepoCountFlagDefault, privateRepoCountDescription)

	return nil
}

func registerStatisticPublicProjectCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicProjectCountDescription := `The count of the public projects`

	var publicProjectCountFlagName string
	if cmdPrefix == "" {
		publicProjectCountFlagName = "public_project_count"
	} else {
		publicProjectCountFlagName = fmt.Sprintf("%v.public_project_count", cmdPrefix)
	}

	var publicProjectCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(publicProjectCountFlagName, publicProjectCountFlagDefault, publicProjectCountDescription)

	return nil
}

func registerStatisticPublicRepoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	publicRepoCountDescription := `The count of the public repositories`

	var publicRepoCountFlagName string
	if cmdPrefix == "" {
		publicRepoCountFlagName = "public_repo_count"
	} else {
		publicRepoCountFlagName = fmt.Sprintf("%v.public_repo_count", cmdPrefix)
	}

	var publicRepoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(publicRepoCountFlagName, publicRepoCountFlagDefault, publicRepoCountDescription)

	return nil
}

func registerStatisticTotalProjectCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalProjectCountDescription := `The count of the total projects, only be seen by the system admin`

	var totalProjectCountFlagName string
	if cmdPrefix == "" {
		totalProjectCountFlagName = "total_project_count"
	} else {
		totalProjectCountFlagName = fmt.Sprintf("%v.total_project_count", cmdPrefix)
	}

	var totalProjectCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalProjectCountFlagName, totalProjectCountFlagDefault, totalProjectCountDescription)

	return nil
}

func registerStatisticTotalRepoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalRepoCountDescription := `The count of the total repositories, only be seen by the system admin`

	var totalRepoCountFlagName string
	if cmdPrefix == "" {
		totalRepoCountFlagName = "total_repo_count"
	} else {
		totalRepoCountFlagName = fmt.Sprintf("%v.total_repo_count", cmdPrefix)
	}

	var totalRepoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalRepoCountFlagName, totalRepoCountFlagDefault, totalRepoCountDescription)

	return nil
}

func registerStatisticTotalStorageConsumption(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalStorageConsumptionDescription := `The total storage consumption of blobs, only be seen by the system admin`

	var totalStorageConsumptionFlagName string
	if cmdPrefix == "" {
		totalStorageConsumptionFlagName = "total_storage_consumption"
	} else {
		totalStorageConsumptionFlagName = fmt.Sprintf("%v.total_storage_consumption", cmdPrefix)
	}

	var totalStorageConsumptionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalStorageConsumptionFlagName, totalStorageConsumptionFlagDefault, totalStorageConsumptionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelStatisticFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, privateProjectCountAdded := retrieveStatisticPrivateProjectCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privateProjectCountAdded

	err, privateRepoCountAdded := retrieveStatisticPrivateRepoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || privateRepoCountAdded

	err, publicProjectCountAdded := retrieveStatisticPublicProjectCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicProjectCountAdded

	err, publicRepoCountAdded := retrieveStatisticPublicRepoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || publicRepoCountAdded

	err, totalProjectCountAdded := retrieveStatisticTotalProjectCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalProjectCountAdded

	err, totalRepoCountAdded := retrieveStatisticTotalRepoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalRepoCountAdded

	err, totalStorageConsumptionAdded := retrieveStatisticTotalStorageConsumptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalStorageConsumptionAdded

	return nil, retAdded
}

func retrieveStatisticPrivateProjectCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	privateProjectCountFlagName := fmt.Sprintf("%v.private_project_count", cmdPrefix)
	if cmd.Flags().Changed(privateProjectCountFlagName) {

		var privateProjectCountFlagName string
		if cmdPrefix == "" {
			privateProjectCountFlagName = "private_project_count"
		} else {
			privateProjectCountFlagName = fmt.Sprintf("%v.private_project_count", cmdPrefix)
		}

		privateProjectCountFlagValue, err := cmd.Flags().GetInt64(privateProjectCountFlagName)
		if err != nil {
			return err, false
		}
		m.PrivateProjectCount = privateProjectCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticPrivateRepoCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	privateRepoCountFlagName := fmt.Sprintf("%v.private_repo_count", cmdPrefix)
	if cmd.Flags().Changed(privateRepoCountFlagName) {

		var privateRepoCountFlagName string
		if cmdPrefix == "" {
			privateRepoCountFlagName = "private_repo_count"
		} else {
			privateRepoCountFlagName = fmt.Sprintf("%v.private_repo_count", cmdPrefix)
		}

		privateRepoCountFlagValue, err := cmd.Flags().GetInt64(privateRepoCountFlagName)
		if err != nil {
			return err, false
		}
		m.PrivateRepoCount = privateRepoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticPublicProjectCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicProjectCountFlagName := fmt.Sprintf("%v.public_project_count", cmdPrefix)
	if cmd.Flags().Changed(publicProjectCountFlagName) {

		var publicProjectCountFlagName string
		if cmdPrefix == "" {
			publicProjectCountFlagName = "public_project_count"
		} else {
			publicProjectCountFlagName = fmt.Sprintf("%v.public_project_count", cmdPrefix)
		}

		publicProjectCountFlagValue, err := cmd.Flags().GetInt64(publicProjectCountFlagName)
		if err != nil {
			return err, false
		}
		m.PublicProjectCount = publicProjectCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticPublicRepoCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	publicRepoCountFlagName := fmt.Sprintf("%v.public_repo_count", cmdPrefix)
	if cmd.Flags().Changed(publicRepoCountFlagName) {

		var publicRepoCountFlagName string
		if cmdPrefix == "" {
			publicRepoCountFlagName = "public_repo_count"
		} else {
			publicRepoCountFlagName = fmt.Sprintf("%v.public_repo_count", cmdPrefix)
		}

		publicRepoCountFlagValue, err := cmd.Flags().GetInt64(publicRepoCountFlagName)
		if err != nil {
			return err, false
		}
		m.PublicRepoCount = publicRepoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticTotalProjectCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalProjectCountFlagName := fmt.Sprintf("%v.total_project_count", cmdPrefix)
	if cmd.Flags().Changed(totalProjectCountFlagName) {

		var totalProjectCountFlagName string
		if cmdPrefix == "" {
			totalProjectCountFlagName = "total_project_count"
		} else {
			totalProjectCountFlagName = fmt.Sprintf("%v.total_project_count", cmdPrefix)
		}

		totalProjectCountFlagValue, err := cmd.Flags().GetInt64(totalProjectCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalProjectCount = totalProjectCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticTotalRepoCountFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalRepoCountFlagName := fmt.Sprintf("%v.total_repo_count", cmdPrefix)
	if cmd.Flags().Changed(totalRepoCountFlagName) {

		var totalRepoCountFlagName string
		if cmdPrefix == "" {
			totalRepoCountFlagName = "total_repo_count"
		} else {
			totalRepoCountFlagName = fmt.Sprintf("%v.total_repo_count", cmdPrefix)
		}

		totalRepoCountFlagValue, err := cmd.Flags().GetInt64(totalRepoCountFlagName)
		if err != nil {
			return err, false
		}
		m.TotalRepoCount = totalRepoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveStatisticTotalStorageConsumptionFlags(depth int, m *models.Statistic, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalStorageConsumptionFlagName := fmt.Sprintf("%v.total_storage_consumption", cmdPrefix)
	if cmd.Flags().Changed(totalStorageConsumptionFlagName) {

		var totalStorageConsumptionFlagName string
		if cmdPrefix == "" {
			totalStorageConsumptionFlagName = "total_storage_consumption"
		} else {
			totalStorageConsumptionFlagName = fmt.Sprintf("%v.total_storage_consumption", cmdPrefix)
		}

		totalStorageConsumptionFlagValue, err := cmd.Flags().GetInt64(totalStorageConsumptionFlagName)
		if err != nil {
			return err, false
		}
		m.TotalStorageConsumption = totalStorageConsumptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
