// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhookPolicy

// register flags to command
func registerModelWebhookPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhookPolicyCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyCreator(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyEventTypes(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyTargets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookPolicyUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhookPolicyCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The create time of the webhook policy.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerWebhookPolicyCreator(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creatorDescription := `The creator of the webhook policy.`

	var creatorFlagName string
	if cmdPrefix == "" {
		creatorFlagName = "creator"
	} else {
		creatorFlagName = fmt.Sprintf("%v.creator", cmdPrefix)
	}

	var creatorFlagDefault string

	_ = cmd.PersistentFlags().String(creatorFlagName, creatorFlagDefault, creatorDescription)

	return nil
}

func registerWebhookPolicyDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `The description of webhook policy.`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerWebhookPolicyEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Whether the webhook policy is enabled or not.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerWebhookPolicyEventTypes(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: event_types []string array type is not supported by go-swagger cli yet

	return nil
}

func registerWebhookPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The webhook policy ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerWebhookPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The name of webhook policy.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerWebhookPolicyProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := `The project ID of webhook policy.`

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "project_id"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
	}

	var projectIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerWebhookPolicyTargets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: targets []*WebhookTargetObject array type is not supported by go-swagger cli yet

	return nil
}

func registerWebhookPolicyUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The update time of the webhook policy.`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhookPolicyFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrieveWebhookPolicyCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, creatorAdded := retrieveWebhookPolicyCreatorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creatorAdded

	err, descriptionAdded := retrieveWebhookPolicyDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, enabledAdded := retrieveWebhookPolicyEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, eventTypesAdded := retrieveWebhookPolicyEventTypesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || eventTypesAdded

	err, idAdded := retrieveWebhookPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveWebhookPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, projectIdAdded := retrieveWebhookPolicyProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, targetsAdded := retrieveWebhookPolicyTargetsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || targetsAdded

	err, updateTimeAdded := retrieveWebhookPolicyUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrieveWebhookPolicyCreationTimeFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyCreatorFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creatorFlagName := fmt.Sprintf("%v.creator", cmdPrefix)
	if cmd.Flags().Changed(creatorFlagName) {

		var creatorFlagName string
		if cmdPrefix == "" {
			creatorFlagName = "creator"
		} else {
			creatorFlagName = fmt.Sprintf("%v.creator", cmdPrefix)
		}

		creatorFlagValue, err := cmd.Flags().GetString(creatorFlagName)
		if err != nil {
			return err, false
		}
		m.Creator = creatorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyDescriptionFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyEnabledFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyEventTypesFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	eventTypesFlagName := fmt.Sprintf("%v.event_types", cmdPrefix)
	if cmd.Flags().Changed(eventTypesFlagName) {
		// warning: event_types array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWebhookPolicyIDFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyNameFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyProjectIDFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.project_id", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "project_id"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt64(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookPolicyTargetsFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	targetsFlagName := fmt.Sprintf("%v.targets", cmdPrefix)
	if cmd.Flags().Changed(targetsFlagName) {
		// warning: targets array type []*WebhookTargetObject is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveWebhookPolicyUpdateTimeFlags(depth int, m *models.WebhookPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
