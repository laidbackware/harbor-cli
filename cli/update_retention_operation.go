// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/retention"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRetentionUpdateRetentionCmd returns a cmd to handle operation updateRetention
func makeOperationRetentionUpdateRetentionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "updateRetention",
		Short: `Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.`,
		RunE:  runOperationRetentionUpdateRetention,
	}

	if err := registerOperationRetentionUpdateRetentionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRetentionUpdateRetention uses cmd flags to call endpoint api
func runOperationRetentionUpdateRetention(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := retention.NewUpdateRetentionParams()
	if err, _ := retrieveOperationRetentionUpdateRetentionXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRetentionUpdateRetentionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRetentionUpdateRetentionPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRetentionUpdateRetentionResult(appCli.Retention.UpdateRetention(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRetentionUpdateRetentionParamFlags registers all flags needed to fill params
func registerOperationRetentionUpdateRetentionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRetentionUpdateRetentionXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRetentionUpdateRetentionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRetentionUpdateRetentionPolicyParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRetentionUpdateRetentionXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationRetentionUpdateRetentionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Retention ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationRetentionUpdateRetentionPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(policyFlagName, "", "Optional json string for [policy]. ")

	// add flags for body
	if err := registerModelRetentionPolicyFlags(0, "retentionPolicy", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationRetentionUpdateRetentionXRequestIDFlag(m *retention.UpdateRetentionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRetentionUpdateRetentionIDFlag(m *retention.UpdateRetentionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRetentionUpdateRetentionPolicyFlag(m *retention.UpdateRetentionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("policy") {
		// Read policy string from cmd and unmarshal
		policyValueStr, err := cmd.Flags().GetString("policy")
		if err != nil {
			return err, false
		}

		policyValue := models.RetentionPolicy{}
		if err := json.Unmarshal([]byte(policyValueStr), &policyValue); err != nil {
			return fmt.Errorf("cannot unmarshal policy string in models.RetentionPolicy: %v", err), false
		}
		m.Policy = &policyValue
	}
	policyValueModel := m.Policy
	if swag.IsZero(policyValueModel) {
		policyValueModel = &models.RetentionPolicy{}
	}
	err, added := retrieveModelRetentionPolicyFlags(0, policyValueModel, "retentionPolicy", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Policy = policyValueModel
	}
	if dryRun && debug {

		policyValueDebugBytes, err := json.Marshal(m.Policy)
		if err != nil {
			return err, false
		}
		logDebugf("Policy dry-run payload: %v", string(policyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationRetentionUpdateRetentionResult parses request result and return the string content
func parseOperationRetentionUpdateRetentionResult(resp0 *retention.UpdateRetentionOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateRetentionOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*retention.UpdateRetentionUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*retention.UpdateRetentionForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*retention.UpdateRetentionInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response updateRetentionOK is not supported by go-swagger cli yet.

	return "", nil
}
