// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/retention"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationRetentionOperateRetentionExecutionCmd returns a cmd to handle operation operateRetentionExecution
func makeOperationRetentionOperateRetentionExecutionCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "operateRetentionExecution",
		Short: `Stop a Retention execution, only support 'stop' action now.`,
		RunE:  runOperationRetentionOperateRetentionExecution,
	}

	if err := registerOperationRetentionOperateRetentionExecutionParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationRetentionOperateRetentionExecution uses cmd flags to call endpoint api
func runOperationRetentionOperateRetentionExecution(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := retention.NewOperateRetentionExecutionParams()
	if err, _ := retrieveOperationRetentionOperateRetentionExecutionXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRetentionOperateRetentionExecutionBodyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRetentionOperateRetentionExecutionEidFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationRetentionOperateRetentionExecutionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationRetentionOperateRetentionExecutionResult(appCli.Retention.OperateRetentionExecution(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationRetentionOperateRetentionExecutionParamFlags registers all flags needed to fill params
func registerOperationRetentionOperateRetentionExecutionParamFlags(cmd *cobra.Command) error {
	if err := registerOperationRetentionOperateRetentionExecutionXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRetentionOperateRetentionExecutionBodyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRetentionOperateRetentionExecutionEidParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationRetentionOperateRetentionExecutionIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationRetentionOperateRetentionExecutionXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationRetentionOperateRetentionExecutionBodyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var bodyFlagName string
	if cmdPrefix == "" {
		bodyFlagName = "body"
	} else {
		bodyFlagName = fmt.Sprintf("%v.body", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(bodyFlagName, "", "Optional json string for [body]. The action, only support 'stop' now.")

	// add flags for body
	if err := registerModelOperateRetentionExecutionBodyFlags(0, "operateRetentionExecutionBody", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationRetentionOperateRetentionExecutionEidParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	eidDescription := `Required. Retention execution ID.`

	var eidFlagName string
	if cmdPrefix == "" {
		eidFlagName = "eid"
	} else {
		eidFlagName = fmt.Sprintf("%v.eid", cmdPrefix)
	}

	var eidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(eidFlagName, eidFlagDefault, eidDescription)

	return nil
}
func registerOperationRetentionOperateRetentionExecutionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Retention ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationRetentionOperateRetentionExecutionXRequestIDFlag(m *retention.OperateRetentionExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRetentionOperateRetentionExecutionBodyFlag(m *retention.OperateRetentionExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("body") {
		// Read body string from cmd and unmarshal
		bodyValueStr, err := cmd.Flags().GetString("body")
		if err != nil {
			return err, false
		}

		bodyValue := retention.OperateRetentionExecutionBody{}
		if err := json.Unmarshal([]byte(bodyValueStr), &bodyValue); err != nil {
			return fmt.Errorf("cannot unmarshal body string in OperateRetentionExecutionBody: %v", err), false
		}
		m.Body = bodyValue
	}
	bodyValueModel := m.Body
	if swag.IsZero(bodyValueModel) {
		bodyValueModel = retention.OperateRetentionExecutionBody{}
	}
	err, added := retrieveModelOperateRetentionExecutionBodyFlags(0, &bodyValueModel, "operateRetentionExecutionBody", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Body = bodyValueModel
	}
	if dryRun && debug {

		bodyValueDebugBytes, err := json.Marshal(m.Body)
		if err != nil {
			return err, false
		}
		logDebugf("Body dry-run payload: %v", string(bodyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationRetentionOperateRetentionExecutionEidFlag(m *retention.OperateRetentionExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("eid") {

		var eidFlagName string
		if cmdPrefix == "" {
			eidFlagName = "eid"
		} else {
			eidFlagName = fmt.Sprintf("%v.eid", cmdPrefix)
		}

		eidFlagValue, err := cmd.Flags().GetInt64(eidFlagName)
		if err != nil {
			return err, false
		}
		m.Eid = eidFlagValue

	}
	return nil, retAdded
}
func retrieveOperationRetentionOperateRetentionExecutionIDFlag(m *retention.OperateRetentionExecutionParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationRetentionOperateRetentionExecutionResult parses request result and return the string content
func parseOperationRetentionOperateRetentionExecutionResult(resp0 *retention.OperateRetentionExecutionOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning operateRetentionExecutionOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*retention.OperateRetentionExecutionUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*retention.OperateRetentionExecutionForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*retention.OperateRetentionExecutionInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response operateRetentionExecutionOK is not supported by go-swagger cli yet.

	return "", nil
}

// register flags to command
func registerModelOperateRetentionExecutionBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerOperateRetentionExecutionBodyAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerOperateRetentionExecutionBodyAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := ``

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelOperateRetentionExecutionBodyFlags(depth int, m *retention.OperateRetentionExecutionBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveOperateRetentionExecutionBodyActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	return nil, retAdded
}

func retrieveOperateRetentionExecutionBodyActionFlags(depth int, m *retention.OperateRetentionExecutionBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
