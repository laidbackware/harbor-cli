// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for Reference

// register flags to command
func registerModelReferenceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReferenceAnnotations(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReferenceChildDigest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReferenceChildID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReferenceParentID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReferencePlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReferenceUrls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReferenceAnnotations(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: annotations Annotations map type is not supported by go-swagger cli yet

	return nil
}

func registerReferenceChildDigest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	childDigestDescription := `The digest of the child artifact`

	var childDigestFlagName string
	if cmdPrefix == "" {
		childDigestFlagName = "child_digest"
	} else {
		childDigestFlagName = fmt.Sprintf("%v.child_digest", cmdPrefix)
	}

	var childDigestFlagDefault string

	_ = cmd.PersistentFlags().String(childDigestFlagName, childDigestFlagDefault, childDigestDescription)

	return nil
}

func registerReferenceChildID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	childIdDescription := `The child ID of the reference`

	var childIdFlagName string
	if cmdPrefix == "" {
		childIdFlagName = "child_id"
	} else {
		childIdFlagName = fmt.Sprintf("%v.child_id", cmdPrefix)
	}

	var childIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(childIdFlagName, childIdFlagDefault, childIdDescription)

	return nil
}

func registerReferenceParentID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	parentIdDescription := `The parent ID of the reference`

	var parentIdFlagName string
	if cmdPrefix == "" {
		parentIdFlagName = "parent_id"
	} else {
		parentIdFlagName = fmt.Sprintf("%v.parent_id", cmdPrefix)
	}

	var parentIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(parentIdFlagName, parentIdFlagDefault, parentIdDescription)

	return nil
}

func registerReferencePlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var platformFlagName string
	if cmdPrefix == "" {
		platformFlagName = "platform"
	} else {
		platformFlagName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	if err := registerModelPlatformFlags(depth+1, platformFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReferenceUrls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: urls []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReferenceFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, annotationsAdded := retrieveReferenceAnnotationsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || annotationsAdded

	err, childDigestAdded := retrieveReferenceChildDigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || childDigestAdded

	err, childIdAdded := retrieveReferenceChildIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || childIdAdded

	err, parentIdAdded := retrieveReferenceParentIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || parentIdAdded

	err, platformAdded := retrieveReferencePlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded

	err, urlsAdded := retrieveReferenceUrlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || urlsAdded

	return nil, retAdded
}

func retrieveReferenceAnnotationsFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	annotationsFlagName := fmt.Sprintf("%v.annotations", cmdPrefix)
	if cmd.Flags().Changed(annotationsFlagName) {
		// warning: annotations map type Annotations is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReferenceChildDigestFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	childDigestFlagName := fmt.Sprintf("%v.child_digest", cmdPrefix)
	if cmd.Flags().Changed(childDigestFlagName) {

		var childDigestFlagName string
		if cmdPrefix == "" {
			childDigestFlagName = "child_digest"
		} else {
			childDigestFlagName = fmt.Sprintf("%v.child_digest", cmdPrefix)
		}

		childDigestFlagValue, err := cmd.Flags().GetString(childDigestFlagName)
		if err != nil {
			return err, false
		}
		m.ChildDigest = childDigestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReferenceChildIDFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	childIdFlagName := fmt.Sprintf("%v.child_id", cmdPrefix)
	if cmd.Flags().Changed(childIdFlagName) {

		var childIdFlagName string
		if cmdPrefix == "" {
			childIdFlagName = "child_id"
		} else {
			childIdFlagName = fmt.Sprintf("%v.child_id", cmdPrefix)
		}

		childIdFlagValue, err := cmd.Flags().GetInt64(childIdFlagName)
		if err != nil {
			return err, false
		}
		m.ChildID = childIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReferenceParentIDFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	parentIdFlagName := fmt.Sprintf("%v.parent_id", cmdPrefix)
	if cmd.Flags().Changed(parentIdFlagName) {

		var parentIdFlagName string
		if cmdPrefix == "" {
			parentIdFlagName = "parent_id"
		} else {
			parentIdFlagName = fmt.Sprintf("%v.parent_id", cmdPrefix)
		}

		parentIdFlagValue, err := cmd.Flags().GetInt64(parentIdFlagName)
		if err != nil {
			return err, false
		}
		m.ParentID = parentIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReferencePlatformFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	platformFlagName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(platformFlagName) {
		// info: complex object platform Platform is retrieved outside this Changed() block
	}
	platformFlagValue := m.Platform
	if swag.IsZero(platformFlagValue) {
		platformFlagValue = &models.Platform{}
	}

	err, platformAdded := retrieveModelPlatformFlags(depth+1, platformFlagValue, platformFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || platformAdded
	if platformAdded {
		m.Platform = platformFlagValue
	}

	return nil, retAdded
}

func retrieveReferenceUrlsFlags(depth int, m *models.Reference, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	urlsFlagName := fmt.Sprintf("%v.urls", cmdPrefix)
	if cmd.Flags().Changed(urlsFlagName) {
		// warning: urls array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
