// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionRuleMetadata

// register flags to command
func registerModelRetentionRuleMetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionRuleMetadataAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleMetadataDisplayText(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleMetadataParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleMetadataRuleTemplate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionRuleMetadataAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `rule action`

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

func registerRetentionRuleMetadataDisplayText(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	displayTextDescription := `rule display text`

	var displayTextFlagName string
	if cmdPrefix == "" {
		displayTextFlagName = "display_text"
	} else {
		displayTextFlagName = fmt.Sprintf("%v.display_text", cmdPrefix)
	}

	var displayTextFlagDefault string

	_ = cmd.PersistentFlags().String(displayTextFlagName, displayTextFlagDefault, displayTextDescription)

	return nil
}

func registerRetentionRuleMetadataParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: params []*RetentionRuleParamMetadata array type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionRuleMetadataRuleTemplate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ruleTemplateDescription := `rule id`

	var ruleTemplateFlagName string
	if cmdPrefix == "" {
		ruleTemplateFlagName = "rule_template"
	} else {
		ruleTemplateFlagName = fmt.Sprintf("%v.rule_template", cmdPrefix)
	}

	var ruleTemplateFlagDefault string

	_ = cmd.PersistentFlags().String(ruleTemplateFlagName, ruleTemplateFlagDefault, ruleTemplateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionRuleMetadataFlags(depth int, m *models.RetentionRuleMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveRetentionRuleMetadataActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, displayTextAdded := retrieveRetentionRuleMetadataDisplayTextFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || displayTextAdded

	err, paramsAdded := retrieveRetentionRuleMetadataParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || paramsAdded

	err, ruleTemplateAdded := retrieveRetentionRuleMetadataRuleTemplateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ruleTemplateAdded

	return nil, retAdded
}

func retrieveRetentionRuleMetadataActionFlags(depth int, m *models.RetentionRuleMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleMetadataDisplayTextFlags(depth int, m *models.RetentionRuleMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	displayTextFlagName := fmt.Sprintf("%v.display_text", cmdPrefix)
	if cmd.Flags().Changed(displayTextFlagName) {

		var displayTextFlagName string
		if cmdPrefix == "" {
			displayTextFlagName = "display_text"
		} else {
			displayTextFlagName = fmt.Sprintf("%v.display_text", cmdPrefix)
		}

		displayTextFlagValue, err := cmd.Flags().GetString(displayTextFlagName)
		if err != nil {
			return err, false
		}
		m.DisplayText = displayTextFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleMetadataParamsFlags(depth int, m *models.RetentionRuleMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	paramsFlagName := fmt.Sprintf("%v.params", cmdPrefix)
	if cmd.Flags().Changed(paramsFlagName) {
		// warning: params array type []*RetentionRuleParamMetadata is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionRuleMetadataRuleTemplateFlags(depth int, m *models.RetentionRuleMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ruleTemplateFlagName := fmt.Sprintf("%v.rule_template", cmdPrefix)
	if cmd.Flags().Changed(ruleTemplateFlagName) {

		var ruleTemplateFlagName string
		if cmdPrefix == "" {
			ruleTemplateFlagName = "rule_template"
		} else {
			ruleTemplateFlagName = fmt.Sprintf("%v.rule_template", cmdPrefix)
		}

		ruleTemplateFlagValue, err := cmd.Flags().GetString(ruleTemplateFlagName)
		if err != nil {
			return err, false
		}
		m.RuleTemplate = ruleTemplateFlagValue

		retAdded = true
	}

	return nil, retAdded
}
