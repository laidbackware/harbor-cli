// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Metadata

// register flags to command
func registerModelMetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerMetadataIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMetadataID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMetadataMaintainers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMetadataName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMetadataSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerMetadataVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerMetadataIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iconDescription := `icon`

	var iconFlagName string
	if cmdPrefix == "" {
		iconFlagName = "icon"
	} else {
		iconFlagName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var iconFlagDefault string

	_ = cmd.PersistentFlags().String(iconFlagName, iconFlagDefault, iconDescription)

	return nil
}

func registerMetadataID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `id`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerMetadataMaintainers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: maintainers []string array type is not supported by go-swagger cli yet

	return nil
}

func registerMetadataName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerMetadataSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sourceDescription := `source`

	var sourceFlagName string
	if cmdPrefix == "" {
		sourceFlagName = "source"
	} else {
		sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
	}

	var sourceFlagDefault string

	_ = cmd.PersistentFlags().String(sourceFlagName, sourceFlagDefault, sourceDescription)

	return nil
}

func registerMetadataVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	versionDescription := `version`

	var versionFlagName string
	if cmdPrefix == "" {
		versionFlagName = "version"
	} else {
		versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var versionFlagDefault string

	_ = cmd.PersistentFlags().String(versionFlagName, versionFlagDefault, versionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelMetadataFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, iconAdded := retrieveMetadataIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iconAdded

	err, idAdded := retrieveMetadataIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, maintainersAdded := retrieveMetadataMaintainersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maintainersAdded

	err, nameAdded := retrieveMetadataNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, sourceAdded := retrieveMetadataSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceAdded

	err, versionAdded := retrieveMetadataVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || versionAdded

	return nil, retAdded
}

func retrieveMetadataIconFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iconFlagName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(iconFlagName) {

		var iconFlagName string
		if cmdPrefix == "" {
			iconFlagName = "icon"
		} else {
			iconFlagName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		iconFlagValue, err := cmd.Flags().GetString(iconFlagName)
		if err != nil {
			return err, false
		}
		m.Icon = iconFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMetadataIDFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMetadataMaintainersFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maintainersFlagName := fmt.Sprintf("%v.maintainers", cmdPrefix)
	if cmd.Flags().Changed(maintainersFlagName) {
		// warning: maintainers array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveMetadataNameFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMetadataSourceFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sourceFlagName := fmt.Sprintf("%v.source", cmdPrefix)
	if cmd.Flags().Changed(sourceFlagName) {

		var sourceFlagName string
		if cmdPrefix == "" {
			sourceFlagName = "source"
		} else {
			sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
		}

		sourceFlagValue, err := cmd.Flags().GetString(sourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = sourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveMetadataVersionFlags(depth int, m *models.Metadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	versionFlagName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(versionFlagName) {

		var versionFlagName string
		if cmdPrefix == "" {
			versionFlagName = "version"
		} else {
			versionFlagName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		versionFlagValue, err := cmd.Flags().GetString(versionFlagName)
		if err != nil {
			return err, false
		}
		m.Version = versionFlagValue

		retAdded = true
	}

	return nil, retAdded
}
