// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for UserResp

// register flags to command
func registerModelUserRespFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserRespAdminRoleInAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespComment(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespOidcUserMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespRealname(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespSysadminFlag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespUserID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerUserRespUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserRespAdminRoleInAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	adminRoleInAuthDescription := `indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user`

	var adminRoleInAuthFlagName string
	if cmdPrefix == "" {
		adminRoleInAuthFlagName = "admin_role_in_auth"
	} else {
		adminRoleInAuthFlagName = fmt.Sprintf("%v.admin_role_in_auth", cmdPrefix)
	}

	var adminRoleInAuthFlagDefault bool

	_ = cmd.PersistentFlags().Bool(adminRoleInAuthFlagName, adminRoleInAuthFlagDefault, adminRoleInAuthDescription)

	return nil
}

func registerUserRespComment(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	commentDescription := ``

	var commentFlagName string
	if cmdPrefix == "" {
		commentFlagName = "comment"
	} else {
		commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
	}

	var commentFlagDefault string

	_ = cmd.PersistentFlags().String(commentFlagName, commentFlagDefault, commentDescription)

	return nil
}

func registerUserRespCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The creation time of the user.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerUserRespEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emailDescription := ``

	var emailFlagName string
	if cmdPrefix == "" {
		emailFlagName = "email"
	} else {
		emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var emailFlagDefault string

	_ = cmd.PersistentFlags().String(emailFlagName, emailFlagDefault, emailDescription)

	return nil
}

func registerUserRespOidcUserMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var oidcUserMetaFlagName string
	if cmdPrefix == "" {
		oidcUserMetaFlagName = "oidc_user_meta"
	} else {
		oidcUserMetaFlagName = fmt.Sprintf("%v.oidc_user_meta", cmdPrefix)
	}

	if err := registerModelOIDCUserInfoFlags(depth+1, oidcUserMetaFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserRespRealname(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	realnameDescription := ``

	var realnameFlagName string
	if cmdPrefix == "" {
		realnameFlagName = "realname"
	} else {
		realnameFlagName = fmt.Sprintf("%v.realname", cmdPrefix)
	}

	var realnameFlagDefault string

	_ = cmd.PersistentFlags().String(realnameFlagName, realnameFlagDefault, realnameDescription)

	return nil
}

func registerUserRespSysadminFlag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sysadminFlagDescription := ``

	var sysadminFlagFlagName string
	if cmdPrefix == "" {
		sysadminFlagFlagName = "sysadmin_flag"
	} else {
		sysadminFlagFlagName = fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
	}

	var sysadminFlagFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sysadminFlagFlagName, sysadminFlagFlagDefault, sysadminFlagDescription)

	return nil
}

func registerUserRespUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The update time of the user.`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

func registerUserRespUserID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	userIdDescription := ``

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "user_id"
	} else {
		userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
	}

	var userIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func registerUserRespUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := ``

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserRespFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, adminRoleInAuthAdded := retrieveUserRespAdminRoleInAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || adminRoleInAuthAdded

	err, commentAdded := retrieveUserRespCommentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || commentAdded

	err, creationTimeAdded := retrieveUserRespCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, emailAdded := retrieveUserRespEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emailAdded

	err, oidcUserMetaAdded := retrieveUserRespOidcUserMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcUserMetaAdded

	err, realnameAdded := retrieveUserRespRealnameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || realnameAdded

	err, sysadminFlagAdded := retrieveUserRespSysadminFlagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sysadminFlagAdded

	err, updateTimeAdded := retrieveUserRespUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	err, userIdAdded := retrieveUserRespUserIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || userIdAdded

	err, usernameAdded := retrieveUserRespUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveUserRespAdminRoleInAuthFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	adminRoleInAuthFlagName := fmt.Sprintf("%v.admin_role_in_auth", cmdPrefix)
	if cmd.Flags().Changed(adminRoleInAuthFlagName) {

		var adminRoleInAuthFlagName string
		if cmdPrefix == "" {
			adminRoleInAuthFlagName = "admin_role_in_auth"
		} else {
			adminRoleInAuthFlagName = fmt.Sprintf("%v.admin_role_in_auth", cmdPrefix)
		}

		adminRoleInAuthFlagValue, err := cmd.Flags().GetBool(adminRoleInAuthFlagName)
		if err != nil {
			return err, false
		}
		m.AdminRoleInAuth = adminRoleInAuthFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespCommentFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	commentFlagName := fmt.Sprintf("%v.comment", cmdPrefix)
	if cmd.Flags().Changed(commentFlagName) {

		var commentFlagName string
		if cmdPrefix == "" {
			commentFlagName = "comment"
		} else {
			commentFlagName = fmt.Sprintf("%v.comment", cmdPrefix)
		}

		commentFlagValue, err := cmd.Flags().GetString(commentFlagName)
		if err != nil {
			return err, false
		}
		m.Comment = commentFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespCreationTimeFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespEmailFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emailFlagName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(emailFlagName) {

		var emailFlagName string
		if cmdPrefix == "" {
			emailFlagName = "email"
		} else {
			emailFlagName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		emailFlagValue, err := cmd.Flags().GetString(emailFlagName)
		if err != nil {
			return err, false
		}
		m.Email = emailFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespOidcUserMetaFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	oidcUserMetaFlagName := fmt.Sprintf("%v.oidc_user_meta", cmdPrefix)
	if cmd.Flags().Changed(oidcUserMetaFlagName) {
		// info: complex object oidc_user_meta OIDCUserInfo is retrieved outside this Changed() block
	}
	oidcUserMetaFlagValue := m.OidcUserMeta
	if swag.IsZero(oidcUserMetaFlagValue) {
		oidcUserMetaFlagValue = &models.OIDCUserInfo{}
	}

	err, oidcUserMetaAdded := retrieveModelOIDCUserInfoFlags(depth+1, oidcUserMetaFlagValue, oidcUserMetaFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || oidcUserMetaAdded
	if oidcUserMetaAdded {
		m.OidcUserMeta = oidcUserMetaFlagValue
	}

	return nil, retAdded
}

func retrieveUserRespRealnameFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	realnameFlagName := fmt.Sprintf("%v.realname", cmdPrefix)
	if cmd.Flags().Changed(realnameFlagName) {

		var realnameFlagName string
		if cmdPrefix == "" {
			realnameFlagName = "realname"
		} else {
			realnameFlagName = fmt.Sprintf("%v.realname", cmdPrefix)
		}

		realnameFlagValue, err := cmd.Flags().GetString(realnameFlagName)
		if err != nil {
			return err, false
		}
		m.Realname = realnameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespSysadminFlagFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sysadminFlagFlagName := fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
	if cmd.Flags().Changed(sysadminFlagFlagName) {

		var sysadminFlagFlagName string
		if cmdPrefix == "" {
			sysadminFlagFlagName = "sysadmin_flag"
		} else {
			sysadminFlagFlagName = fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
		}

		sysadminFlagFlagValue, err := cmd.Flags().GetBool(sysadminFlagFlagName)
		if err != nil {
			return err, false
		}
		m.SysadminFlag = sysadminFlagFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespUpdateTimeFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespUserIDFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	userIdFlagName := fmt.Sprintf("%v.user_id", cmdPrefix)
	if cmd.Flags().Changed(userIdFlagName) {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "user_id"
		} else {
			userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetInt64(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveUserRespUsernameFlags(depth int, m *models.UserResp, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
