// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/preheat"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationPreheatGetPreheatLogCmd returns a cmd to handle operation getPreheatLog
func makeOperationPreheatGetPreheatLogCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetPreheatLog",
		Short: `Get the log text stream of the specified task for the given execution`,
		RunE:  runOperationPreheatGetPreheatLog,
	}

	if err := registerOperationPreheatGetPreheatLogParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationPreheatGetPreheatLog uses cmd flags to call endpoint api
func runOperationPreheatGetPreheatLog(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := preheat.NewGetPreheatLogParams()
	if err, _ := retrieveOperationPreheatGetPreheatLogXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatGetPreheatLogExecutionIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatGetPreheatLogPreheatPolicyNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatGetPreheatLogProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationPreheatGetPreheatLogTaskIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationPreheatGetPreheatLogResult(appCli.Preheat.GetPreheatLog(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationPreheatGetPreheatLogParamFlags registers all flags needed to fill params
func registerOperationPreheatGetPreheatLogParamFlags(cmd *cobra.Command) error {
	if err := registerOperationPreheatGetPreheatLogXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatGetPreheatLogExecutionIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatGetPreheatLogPreheatPolicyNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatGetPreheatLogProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationPreheatGetPreheatLogTaskIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationPreheatGetPreheatLogXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationPreheatGetPreheatLogExecutionIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	executionIdDescription := `Required. Execution ID`

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "execution_id"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
	}

	var executionIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}
func registerOperationPreheatGetPreheatLogPreheatPolicyNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	preheatPolicyNameDescription := `Required. Preheat Policy Name`

	var preheatPolicyNameFlagName string
	if cmdPrefix == "" {
		preheatPolicyNameFlagName = "preheat_policy_name"
	} else {
		preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
	}

	var preheatPolicyNameFlagDefault string

	_ = cmd.PersistentFlags().String(preheatPolicyNameFlagName, preheatPolicyNameFlagDefault, preheatPolicyNameDescription)

	return nil
}
func registerOperationPreheatGetPreheatLogProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationPreheatGetPreheatLogTaskIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	taskIdDescription := `Required. Task ID`

	var taskIdFlagName string
	if cmdPrefix == "" {
		taskIdFlagName = "task_id"
	} else {
		taskIdFlagName = fmt.Sprintf("%v.task_id", cmdPrefix)
	}

	var taskIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(taskIdFlagName, taskIdFlagDefault, taskIdDescription)

	return nil
}

func retrieveOperationPreheatGetPreheatLogXRequestIDFlag(m *preheat.GetPreheatLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatGetPreheatLogExecutionIDFlag(m *preheat.GetPreheatLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("execution_id") {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "execution_id"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetInt64(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatGetPreheatLogPreheatPolicyNameFlag(m *preheat.GetPreheatLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("preheat_policy_name") {

		var preheatPolicyNameFlagName string
		if cmdPrefix == "" {
			preheatPolicyNameFlagName = "preheat_policy_name"
		} else {
			preheatPolicyNameFlagName = fmt.Sprintf("%v.preheat_policy_name", cmdPrefix)
		}

		preheatPolicyNameFlagValue, err := cmd.Flags().GetString(preheatPolicyNameFlagName)
		if err != nil {
			return err, false
		}
		m.PreheatPolicyName = preheatPolicyNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatGetPreheatLogProjectNameFlag(m *preheat.GetPreheatLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationPreheatGetPreheatLogTaskIDFlag(m *preheat.GetPreheatLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("task_id") {

		var taskIdFlagName string
		if cmdPrefix == "" {
			taskIdFlagName = "task_id"
		} else {
			taskIdFlagName = fmt.Sprintf("%v.task_id", cmdPrefix)
		}

		taskIdFlagValue, err := cmd.Flags().GetInt64(taskIdFlagName)
		if err != nil {
			return err, false
		}
		m.TaskID = taskIdFlagValue

	}
	return nil, retAdded
}

// parseOperationPreheatGetPreheatLogResult parses request result and return the string content
func parseOperationPreheatGetPreheatLogResult(resp0 *preheat.GetPreheatLogOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*preheat.GetPreheatLogOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*preheat.GetPreheatLogBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*preheat.GetPreheatLogUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*preheat.GetPreheatLogForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*preheat.GetPreheatLogNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*preheat.GetPreheatLogInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
