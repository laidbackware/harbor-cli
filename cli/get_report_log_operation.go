// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/scan"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationScanGetReportLogCmd returns a cmd to handle operation getReportLog
func makeOperationScanGetReportLogCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getReportLog",
		Short: `Get the log of the scan report`,
		RunE:  runOperationScanGetReportLog,
	}

	if err := registerOperationScanGetReportLogParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationScanGetReportLog uses cmd flags to call endpoint api
func runOperationScanGetReportLog(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := scan.NewGetReportLogParams()
	if err, _ := retrieveOperationScanGetReportLogXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScanGetReportLogProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScanGetReportLogReferenceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScanGetReportLogReportIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScanGetReportLogRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationScanGetReportLogResult(appCli.Scan.GetReportLog(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationScanGetReportLogParamFlags registers all flags needed to fill params
func registerOperationScanGetReportLogParamFlags(cmd *cobra.Command) error {
	if err := registerOperationScanGetReportLogXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScanGetReportLogProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScanGetReportLogReferenceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScanGetReportLogReportIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScanGetReportLogRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationScanGetReportLogXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationScanGetReportLogProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationScanGetReportLogReferenceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	referenceDescription := `Required. The reference of the artifact, can be digest or tag`

	var referenceFlagName string
	if cmdPrefix == "" {
		referenceFlagName = "reference"
	} else {
		referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
	}

	var referenceFlagDefault string

	_ = cmd.PersistentFlags().String(referenceFlagName, referenceFlagDefault, referenceDescription)

	return nil
}
func registerOperationScanGetReportLogReportIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	reportIdDescription := `Required. The report id to get the log`

	var reportIdFlagName string
	if cmdPrefix == "" {
		reportIdFlagName = "report_id"
	} else {
		reportIdFlagName = fmt.Sprintf("%v.report_id", cmdPrefix)
	}

	var reportIdFlagDefault string

	_ = cmd.PersistentFlags().String(reportIdFlagName, reportIdFlagDefault, reportIdDescription)

	return nil
}
func registerOperationScanGetReportLogRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}

func retrieveOperationScanGetReportLogXRequestIDFlag(m *scan.GetReportLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScanGetReportLogProjectNameFlag(m *scan.GetReportLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScanGetReportLogReferenceFlag(m *scan.GetReportLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("reference") {

		var referenceFlagName string
		if cmdPrefix == "" {
			referenceFlagName = "reference"
		} else {
			referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
		}

		referenceFlagValue, err := cmd.Flags().GetString(referenceFlagName)
		if err != nil {
			return err, false
		}
		m.Reference = referenceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScanGetReportLogReportIDFlag(m *scan.GetReportLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("report_id") {

		var reportIdFlagName string
		if cmdPrefix == "" {
			reportIdFlagName = "report_id"
		} else {
			reportIdFlagName = fmt.Sprintf("%v.report_id", cmdPrefix)
		}

		reportIdFlagValue, err := cmd.Flags().GetString(reportIdFlagName)
		if err != nil {
			return err, false
		}
		m.ReportID = reportIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScanGetReportLogRepositoryNameFlag(m *scan.GetReportLogParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository_name") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}

// parseOperationScanGetReportLogResult parses request result and return the string content
func parseOperationScanGetReportLogResult(resp0 *scan.GetReportLogOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*scan.GetReportLogOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*scan.GetReportLogUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*scan.GetReportLogForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*scan.GetReportLogNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*scan.GetReportLogInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr := fmt.Sprintf("%v", resp0.Payload)
		return string(msgStr), nil
	}

	return "", nil
}
