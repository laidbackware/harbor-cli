// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for WebhookTargetObject

// register flags to command
func registerModelWebhookTargetObjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerWebhookTargetObjectAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookTargetObjectAuthHeader(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookTargetObjectSkipCertVerify(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerWebhookTargetObjectType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerWebhookTargetObjectAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `The webhook target address.`

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerWebhookTargetObjectAuthHeader(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authHeaderDescription := `The webhook auth header.`

	var authHeaderFlagName string
	if cmdPrefix == "" {
		authHeaderFlagName = "auth_header"
	} else {
		authHeaderFlagName = fmt.Sprintf("%v.auth_header", cmdPrefix)
	}

	var authHeaderFlagDefault string

	_ = cmd.PersistentFlags().String(authHeaderFlagName, authHeaderFlagDefault, authHeaderDescription)

	return nil
}

func registerWebhookTargetObjectSkipCertVerify(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	skipCertVerifyDescription := `Whether or not to skip cert verify.`

	var skipCertVerifyFlagName string
	if cmdPrefix == "" {
		skipCertVerifyFlagName = "skip_cert_verify"
	} else {
		skipCertVerifyFlagName = fmt.Sprintf("%v.skip_cert_verify", cmdPrefix)
	}

	var skipCertVerifyFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipCertVerifyFlagName, skipCertVerifyFlagDefault, skipCertVerifyDescription)

	return nil
}

func registerWebhookTargetObjectType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The webhook target notify type.`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelWebhookTargetObjectFlags(depth int, m *models.WebhookTargetObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveWebhookTargetObjectAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, authHeaderAdded := retrieveWebhookTargetObjectAuthHeaderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authHeaderAdded

	err, skipCertVerifyAdded := retrieveWebhookTargetObjectSkipCertVerifyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || skipCertVerifyAdded

	err, typeAdded := retrieveWebhookTargetObjectTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveWebhookTargetObjectAddressFlags(depth int, m *models.WebhookTargetObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookTargetObjectAuthHeaderFlags(depth int, m *models.WebhookTargetObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authHeaderFlagName := fmt.Sprintf("%v.auth_header", cmdPrefix)
	if cmd.Flags().Changed(authHeaderFlagName) {

		var authHeaderFlagName string
		if cmdPrefix == "" {
			authHeaderFlagName = "auth_header"
		} else {
			authHeaderFlagName = fmt.Sprintf("%v.auth_header", cmdPrefix)
		}

		authHeaderFlagValue, err := cmd.Flags().GetString(authHeaderFlagName)
		if err != nil {
			return err, false
		}
		m.AuthHeader = authHeaderFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookTargetObjectSkipCertVerifyFlags(depth int, m *models.WebhookTargetObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	skipCertVerifyFlagName := fmt.Sprintf("%v.skip_cert_verify", cmdPrefix)
	if cmd.Flags().Changed(skipCertVerifyFlagName) {

		var skipCertVerifyFlagName string
		if cmdPrefix == "" {
			skipCertVerifyFlagName = "skip_cert_verify"
		} else {
			skipCertVerifyFlagName = fmt.Sprintf("%v.skip_cert_verify", cmdPrefix)
		}

		skipCertVerifyFlagValue, err := cmd.Flags().GetBool(skipCertVerifyFlagName)
		if err != nil {
			return err, false
		}
		m.SkipCertVerify = skipCertVerifyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveWebhookTargetObjectTypeFlags(depth int, m *models.WebhookTargetObject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
