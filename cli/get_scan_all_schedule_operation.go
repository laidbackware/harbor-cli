// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/scan_all"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationScanAllGetScanAllScheduleCmd returns a cmd to handle operation getScanAllSchedule
func makeOperationScanAllGetScanAllScheduleCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getScanAllSchedule",
		Short: `This endpoint is for getting a schedule for the scan all job, which scans all of images in Harbor.`,
		RunE:  runOperationScanAllGetScanAllSchedule,
	}

	if err := registerOperationScanAllGetScanAllScheduleParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationScanAllGetScanAllSchedule uses cmd flags to call endpoint api
func runOperationScanAllGetScanAllSchedule(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := scan_all.NewGetScanAllScheduleParams()
	if err, _ := retrieveOperationScanAllGetScanAllScheduleXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationScanAllGetScanAllScheduleResult(appCli.ScanAll.GetScanAllSchedule(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationScanAllGetScanAllScheduleParamFlags registers all flags needed to fill params
func registerOperationScanAllGetScanAllScheduleParamFlags(cmd *cobra.Command) error {
	if err := registerOperationScanAllGetScanAllScheduleXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationScanAllGetScanAllScheduleXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}

func retrieveOperationScanAllGetScanAllScheduleXRequestIDFlag(m *scan_all.GetScanAllScheduleParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}

// parseOperationScanAllGetScanAllScheduleResult parses request result and return the string content
func parseOperationScanAllGetScanAllScheduleResult(resp0 *scan_all.GetScanAllScheduleOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*scan_all.GetScanAllScheduleOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*scan_all.GetScanAllScheduleUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*scan_all.GetScanAllScheduleForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*scan_all.GetScanAllSchedulePreconditionFailed)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*scan_all.GetScanAllScheduleInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
