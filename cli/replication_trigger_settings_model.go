// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ReplicationTriggerSettings

// register flags to command
func registerModelReplicationTriggerSettingsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicationTriggerSettingsCron(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationTriggerSettingsCron(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cronDescription := `The cron string for scheduled trigger`

	var cronFlagName string
	if cmdPrefix == "" {
		cronFlagName = "cron"
	} else {
		cronFlagName = fmt.Sprintf("%v.cron", cmdPrefix)
	}

	var cronFlagDefault string

	_ = cmd.PersistentFlags().String(cronFlagName, cronFlagDefault, cronDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicationTriggerSettingsFlags(depth int, m *models.ReplicationTriggerSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cronAdded := retrieveReplicationTriggerSettingsCronFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cronAdded

	return nil, retAdded
}

func retrieveReplicationTriggerSettingsCronFlags(depth int, m *models.ReplicationTriggerSettings, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cronFlagName := fmt.Sprintf("%v.cron", cmdPrefix)
	if cmd.Flags().Changed(cronFlagName) {

		var cronFlagName string
		if cmdPrefix == "" {
			cronFlagName = "cron"
		} else {
			cronFlagName = fmt.Sprintf("%v.cron", cmdPrefix)
		}

		cronFlagValue, err := cmd.Flags().GetString(cronFlagName)
		if err != nil {
			return err, false
		}
		m.Cron = cronFlagValue

		retAdded = true
	}

	return nil, retAdded
}
