// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/replication"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationReplicationStopReplicationCmd returns a cmd to handle operation stopReplication
func makeOperationReplicationStopReplicationCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "stopReplication",
		Short: `Stop the replication execution specified by ID`,
		RunE:  runOperationReplicationStopReplication,
	}

	if err := registerOperationReplicationStopReplicationParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationReplicationStopReplication uses cmd flags to call endpoint api
func runOperationReplicationStopReplication(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := replication.NewStopReplicationParams()
	if err, _ := retrieveOperationReplicationStopReplicationXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationStopReplicationIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationReplicationStopReplicationResult(appCli.Replication.StopReplication(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationReplicationStopReplicationParamFlags registers all flags needed to fill params
func registerOperationReplicationStopReplicationParamFlags(cmd *cobra.Command) error {
	if err := registerOperationReplicationStopReplicationXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationStopReplicationIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationReplicationStopReplicationXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationReplicationStopReplicationIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The ID of the execution.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func retrieveOperationReplicationStopReplicationXRequestIDFlag(m *replication.StopReplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationStopReplicationIDFlag(m *replication.StopReplicationParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}

// parseOperationReplicationStopReplicationResult parses request result and return the string content
func parseOperationReplicationStopReplicationResult(resp0 *replication.StopReplicationOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning stopReplicationOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*replication.StopReplicationUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*replication.StopReplicationForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*replication.StopReplicationNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*replication.StopReplicationInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response stopReplicationOK is not supported by go-swagger cli yet.

	return "", nil
}
