// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for Project

// register flags to command
func registerModelProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectChartCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectCurrentUserRoleID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectCurrentUserRoleIds(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectCveAllowlist(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectDeleted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectMetadata(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectOwnerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectOwnerName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectRegistryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectRepoCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectTogglable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectChartCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	chartCountDescription := `The total number of charts under this project.`

	var chartCountFlagName string
	if cmdPrefix == "" {
		chartCountFlagName = "chart_count"
	} else {
		chartCountFlagName = fmt.Sprintf("%v.chart_count", cmdPrefix)
	}

	var chartCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(chartCountFlagName, chartCountFlagDefault, chartCountDescription)

	return nil
}

func registerProjectCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The creation time of the project.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerProjectCurrentUserRoleID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	currentUserRoleIdDescription := `The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.`

	var currentUserRoleIdFlagName string
	if cmdPrefix == "" {
		currentUserRoleIdFlagName = "current_user_role_id"
	} else {
		currentUserRoleIdFlagName = fmt.Sprintf("%v.current_user_role_id", cmdPrefix)
	}

	var currentUserRoleIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(currentUserRoleIdFlagName, currentUserRoleIdFlagDefault, currentUserRoleIdDescription)

	return nil
}

func registerProjectCurrentUserRoleIds(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: current_user_role_ids []int32 array type is not supported by go-swagger cli yet

	return nil
}

func registerProjectCveAllowlist(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var cveAllowlistFlagName string
	if cmdPrefix == "" {
		cveAllowlistFlagName = "cve_allowlist"
	} else {
		cveAllowlistFlagName = fmt.Sprintf("%v.cve_allowlist", cmdPrefix)
	}

	if err := registerModelCVEAllowlistFlags(depth+1, cveAllowlistFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectDeleted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletedDescription := `A deletion mark of the project.`

	var deletedFlagName string
	if cmdPrefix == "" {
		deletedFlagName = "deleted"
	} else {
		deletedFlagName = fmt.Sprintf("%v.deleted", cmdPrefix)
	}

	var deletedFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deletedFlagName, deletedFlagDefault, deletedDescription)

	return nil
}

func registerProjectMetadata(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var metadataFlagName string
	if cmdPrefix == "" {
		metadataFlagName = "metadata"
	} else {
		metadataFlagName = fmt.Sprintf("%v.metadata", cmdPrefix)
	}

	if err := registerModelProjectMetadataFlags(depth+1, metadataFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The name of the project.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerProjectOwnerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerIdDescription := `The owner ID of the project always means the creator of the project.`

	var ownerIdFlagName string
	if cmdPrefix == "" {
		ownerIdFlagName = "owner_id"
	} else {
		ownerIdFlagName = fmt.Sprintf("%v.owner_id", cmdPrefix)
	}

	var ownerIdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(ownerIdFlagName, ownerIdFlagDefault, ownerIdDescription)

	return nil
}

func registerProjectOwnerName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ownerNameDescription := `The owner name of the project.`

	var ownerNameFlagName string
	if cmdPrefix == "" {
		ownerNameFlagName = "owner_name"
	} else {
		ownerNameFlagName = fmt.Sprintf("%v.owner_name", cmdPrefix)
	}

	var ownerNameFlagDefault string

	_ = cmd.PersistentFlags().String(ownerNameFlagName, ownerNameFlagDefault, ownerNameDescription)

	return nil
}

func registerProjectProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := `Project ID`

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "project_id"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
	}

	var projectIdFlagDefault int32

	_ = cmd.PersistentFlags().Int32(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerProjectRegistryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	registryIdDescription := `The ID of referenced registry when the project is a proxy cache project.`

	var registryIdFlagName string
	if cmdPrefix == "" {
		registryIdFlagName = "registry_id"
	} else {
		registryIdFlagName = fmt.Sprintf("%v.registry_id", cmdPrefix)
	}

	var registryIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(registryIdFlagName, registryIdFlagDefault, registryIdDescription)

	return nil
}

func registerProjectRepoCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repoCountDescription := `The number of the repositories under this project.`

	var repoCountFlagName string
	if cmdPrefix == "" {
		repoCountFlagName = "repo_count"
	} else {
		repoCountFlagName = fmt.Sprintf("%v.repo_count", cmdPrefix)
	}

	var repoCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(repoCountFlagName, repoCountFlagDefault, repoCountDescription)

	return nil
}

func registerProjectTogglable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	togglableDescription := `Correspond to the UI about whether the projects publicity is  updatable (for UI)`

	var togglableFlagName string
	if cmdPrefix == "" {
		togglableFlagName = "togglable"
	} else {
		togglableFlagName = fmt.Sprintf("%v.togglable", cmdPrefix)
	}

	var togglableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(togglableFlagName, togglableFlagDefault, togglableDescription)

	return nil
}

func registerProjectUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The update time of the project.`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartCountAdded := retrieveProjectChartCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartCountAdded

	err, creationTimeAdded := retrieveProjectCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, currentUserRoleIdAdded := retrieveProjectCurrentUserRoleIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentUserRoleIdAdded

	err, currentUserRoleIdsAdded := retrieveProjectCurrentUserRoleIdsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || currentUserRoleIdsAdded

	err, cveAllowlistAdded := retrieveProjectCveAllowlistFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cveAllowlistAdded

	err, deletedAdded := retrieveProjectDeletedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletedAdded

	err, metadataAdded := retrieveProjectMetadataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded

	err, nameAdded := retrieveProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, ownerIdAdded := retrieveProjectOwnerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerIdAdded

	err, ownerNameAdded := retrieveProjectOwnerNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ownerNameAdded

	err, projectIdAdded := retrieveProjectProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, registryIdAdded := retrieveProjectRegistryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || registryIdAdded

	err, repoCountAdded := retrieveProjectRepoCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repoCountAdded

	err, togglableAdded := retrieveProjectTogglableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || togglableAdded

	err, updateTimeAdded := retrieveProjectUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrieveProjectChartCountFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartCountFlagName := fmt.Sprintf("%v.chart_count", cmdPrefix)
	if cmd.Flags().Changed(chartCountFlagName) {

		var chartCountFlagName string
		if cmdPrefix == "" {
			chartCountFlagName = "chart_count"
		} else {
			chartCountFlagName = fmt.Sprintf("%v.chart_count", cmdPrefix)
		}

		chartCountFlagValue, err := cmd.Flags().GetInt64(chartCountFlagName)
		if err != nil {
			return err, false
		}
		m.ChartCount = chartCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectCreationTimeFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectCurrentUserRoleIDFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentUserRoleIdFlagName := fmt.Sprintf("%v.current_user_role_id", cmdPrefix)
	if cmd.Flags().Changed(currentUserRoleIdFlagName) {

		var currentUserRoleIdFlagName string
		if cmdPrefix == "" {
			currentUserRoleIdFlagName = "current_user_role_id"
		} else {
			currentUserRoleIdFlagName = fmt.Sprintf("%v.current_user_role_id", cmdPrefix)
		}

		currentUserRoleIdFlagValue, err := cmd.Flags().GetInt64(currentUserRoleIdFlagName)
		if err != nil {
			return err, false
		}
		m.CurrentUserRoleID = currentUserRoleIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectCurrentUserRoleIdsFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	currentUserRoleIdsFlagName := fmt.Sprintf("%v.current_user_role_ids", cmdPrefix)
	if cmd.Flags().Changed(currentUserRoleIdsFlagName) {
		// warning: current_user_role_ids array type []int32 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveProjectCveAllowlistFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cveAllowlistFlagName := fmt.Sprintf("%v.cve_allowlist", cmdPrefix)
	if cmd.Flags().Changed(cveAllowlistFlagName) {
		// info: complex object cve_allowlist CVEAllowlist is retrieved outside this Changed() block
	}
	cveAllowlistFlagValue := m.CveAllowlist
	if swag.IsZero(cveAllowlistFlagValue) {
		cveAllowlistFlagValue = &models.CVEAllowlist{}
	}

	err, cveAllowlistAdded := retrieveModelCVEAllowlistFlags(depth+1, cveAllowlistFlagValue, cveAllowlistFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cveAllowlistAdded
	if cveAllowlistAdded {
		m.CveAllowlist = cveAllowlistFlagValue
	}

	return nil, retAdded
}

func retrieveProjectDeletedFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletedFlagName := fmt.Sprintf("%v.deleted", cmdPrefix)
	if cmd.Flags().Changed(deletedFlagName) {

		var deletedFlagName string
		if cmdPrefix == "" {
			deletedFlagName = "deleted"
		} else {
			deletedFlagName = fmt.Sprintf("%v.deleted", cmdPrefix)
		}

		deletedFlagValue, err := cmd.Flags().GetBool(deletedFlagName)
		if err != nil {
			return err, false
		}
		m.Deleted = deletedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectMetadataFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	metadataFlagName := fmt.Sprintf("%v.metadata", cmdPrefix)
	if cmd.Flags().Changed(metadataFlagName) {
		// info: complex object metadata ProjectMetadata is retrieved outside this Changed() block
	}
	metadataFlagValue := m.Metadata
	if swag.IsZero(metadataFlagValue) {
		metadataFlagValue = &models.ProjectMetadata{}
	}

	err, metadataAdded := retrieveModelProjectMetadataFlags(depth+1, metadataFlagValue, metadataFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || metadataAdded
	if metadataAdded {
		m.Metadata = metadataFlagValue
	}

	return nil, retAdded
}

func retrieveProjectNameFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectOwnerIDFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerIdFlagName := fmt.Sprintf("%v.owner_id", cmdPrefix)
	if cmd.Flags().Changed(ownerIdFlagName) {

		var ownerIdFlagName string
		if cmdPrefix == "" {
			ownerIdFlagName = "owner_id"
		} else {
			ownerIdFlagName = fmt.Sprintf("%v.owner_id", cmdPrefix)
		}

		ownerIdFlagValue, err := cmd.Flags().GetInt32(ownerIdFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerID = ownerIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectOwnerNameFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ownerNameFlagName := fmt.Sprintf("%v.owner_name", cmdPrefix)
	if cmd.Flags().Changed(ownerNameFlagName) {

		var ownerNameFlagName string
		if cmdPrefix == "" {
			ownerNameFlagName = "owner_name"
		} else {
			ownerNameFlagName = fmt.Sprintf("%v.owner_name", cmdPrefix)
		}

		ownerNameFlagValue, err := cmd.Flags().GetString(ownerNameFlagName)
		if err != nil {
			return err, false
		}
		m.OwnerName = ownerNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectProjectIDFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.project_id", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "project_id"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt32(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectRegistryIDFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	registryIdFlagName := fmt.Sprintf("%v.registry_id", cmdPrefix)
	if cmd.Flags().Changed(registryIdFlagName) {

		var registryIdFlagName string
		if cmdPrefix == "" {
			registryIdFlagName = "registry_id"
		} else {
			registryIdFlagName = fmt.Sprintf("%v.registry_id", cmdPrefix)
		}

		registryIdFlagValue, err := cmd.Flags().GetInt64(registryIdFlagName)
		if err != nil {
			return err, false
		}
		m.RegistryID = registryIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectRepoCountFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repoCountFlagName := fmt.Sprintf("%v.repo_count", cmdPrefix)
	if cmd.Flags().Changed(repoCountFlagName) {

		var repoCountFlagName string
		if cmdPrefix == "" {
			repoCountFlagName = "repo_count"
		} else {
			repoCountFlagName = fmt.Sprintf("%v.repo_count", cmdPrefix)
		}

		repoCountFlagValue, err := cmd.Flags().GetInt64(repoCountFlagName)
		if err != nil {
			return err, false
		}
		m.RepoCount = repoCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectTogglableFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	togglableFlagName := fmt.Sprintf("%v.togglable", cmdPrefix)
	if cmd.Flags().Changed(togglableFlagName) {

		var togglableFlagName string
		if cmdPrefix == "" {
			togglableFlagName = "togglable"
		} else {
			togglableFlagName = fmt.Sprintf("%v.togglable", cmdPrefix)
		}

		togglableFlagValue, err := cmd.Flags().GetBool(togglableFlagName)
		if err != nil {
			return err, false
		}
		m.Togglable = togglableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectUpdateTimeFlags(depth int, m *models.Project, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
