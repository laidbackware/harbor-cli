// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ReplicationPolicy

// register flags to command
func registerModelReplicationPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerReplicationPolicyCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyDeletion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyDestNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyDestNamespaceReplaceCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyDestRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyFilters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyOverride(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyReplicateDeletion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicySrcRegistry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerReplicationPolicyUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationPolicyCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The create time of the policy.`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerReplicationPolicyDeletion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletionDescription := `Deprecated, use 'replicate_deletion' instead. Whether to replicate the deletion operation.`

	var deletionFlagName string
	if cmdPrefix == "" {
		deletionFlagName = "deletion"
	} else {
		deletionFlagName = fmt.Sprintf("%v.deletion", cmdPrefix)
	}

	var deletionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deletionFlagName, deletionFlagDefault, deletionDescription)

	return nil
}

func registerReplicationPolicyDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `The description of the policy.`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerReplicationPolicyDestNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	destNamespaceDescription := `The destination namespace.`

	var destNamespaceFlagName string
	if cmdPrefix == "" {
		destNamespaceFlagName = "dest_namespace"
	} else {
		destNamespaceFlagName = fmt.Sprintf("%v.dest_namespace", cmdPrefix)
	}

	var destNamespaceFlagDefault string

	_ = cmd.PersistentFlags().String(destNamespaceFlagName, destNamespaceFlagDefault, destNamespaceDescription)

	return nil
}

func registerReplicationPolicyDestNamespaceReplaceCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: primitive dest_namespace_replace_count int8 is not supported by go-swagger cli yet

	return nil
}

func registerReplicationPolicyDestRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var destRegistryFlagName string
	if cmdPrefix == "" {
		destRegistryFlagName = "dest_registry"
	} else {
		destRegistryFlagName = fmt.Sprintf("%v.dest_registry", cmdPrefix)
	}

	if err := registerModelRegistryFlags(depth+1, destRegistryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationPolicyEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Whether the policy is enabled or not.`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerReplicationPolicyFilters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: filters []*ReplicationFilter array type is not supported by go-swagger cli yet

	return nil
}

func registerReplicationPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The policy ID.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerReplicationPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The policy name.`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerReplicationPolicyOverride(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	overrideDescription := `Whether to override the resources on the destination registry.`

	var overrideFlagName string
	if cmdPrefix == "" {
		overrideFlagName = "override"
	} else {
		overrideFlagName = fmt.Sprintf("%v.override", cmdPrefix)
	}

	var overrideFlagDefault bool

	_ = cmd.PersistentFlags().Bool(overrideFlagName, overrideFlagDefault, overrideDescription)

	return nil
}

func registerReplicationPolicyReplicateDeletion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	replicateDeletionDescription := `Whether to replicate the deletion operation.`

	var replicateDeletionFlagName string
	if cmdPrefix == "" {
		replicateDeletionFlagName = "replicate_deletion"
	} else {
		replicateDeletionFlagName = fmt.Sprintf("%v.replicate_deletion", cmdPrefix)
	}

	var replicateDeletionFlagDefault bool

	_ = cmd.PersistentFlags().Bool(replicateDeletionFlagName, replicateDeletionFlagDefault, replicateDeletionDescription)

	return nil
}

func registerReplicationPolicySrcRegistry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var srcRegistryFlagName string
	if cmdPrefix == "" {
		srcRegistryFlagName = "src_registry"
	} else {
		srcRegistryFlagName = fmt.Sprintf("%v.src_registry", cmdPrefix)
	}

	if err := registerModelRegistryFlags(depth+1, srcRegistryFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationPolicyTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	if err := registerModelReplicationTriggerFlags(depth+1, triggerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerReplicationPolicyUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The update time of the policy.`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelReplicationPolicyFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrieveReplicationPolicyCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, deletionAdded := retrieveReplicationPolicyDeletionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletionAdded

	err, descriptionAdded := retrieveReplicationPolicyDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, destNamespaceAdded := retrieveReplicationPolicyDestNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destNamespaceAdded

	err, destNamespaceReplaceCountAdded := retrieveReplicationPolicyDestNamespaceReplaceCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destNamespaceReplaceCountAdded

	err, destRegistryAdded := retrieveReplicationPolicyDestRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destRegistryAdded

	err, enabledAdded := retrieveReplicationPolicyEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, filtersAdded := retrieveReplicationPolicyFiltersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filtersAdded

	err, idAdded := retrieveReplicationPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveReplicationPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, overrideAdded := retrieveReplicationPolicyOverrideFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || overrideAdded

	err, replicateDeletionAdded := retrieveReplicationPolicyReplicateDeletionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || replicateDeletionAdded

	err, srcRegistryAdded := retrieveReplicationPolicySrcRegistryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srcRegistryAdded

	err, triggerAdded := retrieveReplicationPolicyTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	err, updateTimeAdded := retrieveReplicationPolicyUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrieveReplicationPolicyCreationTimeFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyDeletionFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletionFlagName := fmt.Sprintf("%v.deletion", cmdPrefix)
	if cmd.Flags().Changed(deletionFlagName) {

		var deletionFlagName string
		if cmdPrefix == "" {
			deletionFlagName = "deletion"
		} else {
			deletionFlagName = fmt.Sprintf("%v.deletion", cmdPrefix)
		}

		deletionFlagValue, err := cmd.Flags().GetBool(deletionFlagName)
		if err != nil {
			return err, false
		}
		m.Deletion = deletionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyDescriptionFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyDestNamespaceFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	destNamespaceFlagName := fmt.Sprintf("%v.dest_namespace", cmdPrefix)
	if cmd.Flags().Changed(destNamespaceFlagName) {

		var destNamespaceFlagName string
		if cmdPrefix == "" {
			destNamespaceFlagName = "dest_namespace"
		} else {
			destNamespaceFlagName = fmt.Sprintf("%v.dest_namespace", cmdPrefix)
		}

		destNamespaceFlagValue, err := cmd.Flags().GetString(destNamespaceFlagName)
		if err != nil {
			return err, false
		}
		m.DestNamespace = destNamespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyDestNamespaceReplaceCountFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	destNamespaceReplaceCountFlagName := fmt.Sprintf("%v.dest_namespace_replace_count", cmdPrefix)
	if cmd.Flags().Changed(destNamespaceReplaceCountFlagName) {

		// warning: primitive dest_namespace_replace_count int8 is not supported by go-swagger cli yet

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyDestRegistryFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	destRegistryFlagName := fmt.Sprintf("%v.dest_registry", cmdPrefix)
	if cmd.Flags().Changed(destRegistryFlagName) {
		// info: complex object dest_registry Registry is retrieved outside this Changed() block
	}
	destRegistryFlagValue := m.DestRegistry
	if swag.IsZero(destRegistryFlagValue) {
		destRegistryFlagValue = &models.Registry{}
	}

	err, destRegistryAdded := retrieveModelRegistryFlags(depth+1, destRegistryFlagValue, destRegistryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || destRegistryAdded
	if destRegistryAdded {
		m.DestRegistry = destRegistryFlagValue
	}

	return nil, retAdded
}

func retrieveReplicationPolicyEnabledFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyFiltersFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filtersFlagName := fmt.Sprintf("%v.filters", cmdPrefix)
	if cmd.Flags().Changed(filtersFlagName) {
		// warning: filters array type []*ReplicationFilter is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveReplicationPolicyIDFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyNameFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyOverrideFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	overrideFlagName := fmt.Sprintf("%v.override", cmdPrefix)
	if cmd.Flags().Changed(overrideFlagName) {

		var overrideFlagName string
		if cmdPrefix == "" {
			overrideFlagName = "override"
		} else {
			overrideFlagName = fmt.Sprintf("%v.override", cmdPrefix)
		}

		overrideFlagValue, err := cmd.Flags().GetBool(overrideFlagName)
		if err != nil {
			return err, false
		}
		m.Override = overrideFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicyReplicateDeletionFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	replicateDeletionFlagName := fmt.Sprintf("%v.replicate_deletion", cmdPrefix)
	if cmd.Flags().Changed(replicateDeletionFlagName) {

		var replicateDeletionFlagName string
		if cmdPrefix == "" {
			replicateDeletionFlagName = "replicate_deletion"
		} else {
			replicateDeletionFlagName = fmt.Sprintf("%v.replicate_deletion", cmdPrefix)
		}

		replicateDeletionFlagValue, err := cmd.Flags().GetBool(replicateDeletionFlagName)
		if err != nil {
			return err, false
		}
		m.ReplicateDeletion = replicateDeletionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveReplicationPolicySrcRegistryFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	srcRegistryFlagName := fmt.Sprintf("%v.src_registry", cmdPrefix)
	if cmd.Flags().Changed(srcRegistryFlagName) {
		// info: complex object src_registry Registry is retrieved outside this Changed() block
	}
	srcRegistryFlagValue := m.SrcRegistry
	if swag.IsZero(srcRegistryFlagValue) {
		srcRegistryFlagValue = &models.Registry{}
	}

	err, srcRegistryAdded := retrieveModelRegistryFlags(depth+1, srcRegistryFlagValue, srcRegistryFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || srcRegistryAdded
	if srcRegistryAdded {
		m.SrcRegistry = srcRegistryFlagValue
	}

	return nil, retAdded
}

func retrieveReplicationPolicyTriggerFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {
		// info: complex object trigger ReplicationTrigger is retrieved outside this Changed() block
	}
	triggerFlagValue := m.Trigger
	if swag.IsZero(triggerFlagValue) {
		triggerFlagValue = &models.ReplicationTrigger{}
	}

	err, triggerAdded := retrieveModelReplicationTriggerFlags(depth+1, triggerFlagValue, triggerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded
	if triggerAdded {
		m.Trigger = triggerFlagValue
	}

	return nil, retAdded
}

func retrieveReplicationPolicyUpdateTimeFlags(depth int, m *models.ReplicationPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
