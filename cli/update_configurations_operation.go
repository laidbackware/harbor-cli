// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/configure"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationConfigureUpdateConfigurationsCmd returns a cmd to handle operation updateConfigurations
func makeOperationConfigureUpdateConfigurationsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "updateConfigurations",
		Short: `This endpoint is for modifying system configurations that only provides for admin user.
`,
		RunE: runOperationConfigureUpdateConfigurations,
	}

	if err := registerOperationConfigureUpdateConfigurationsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationConfigureUpdateConfigurations uses cmd flags to call endpoint api
func runOperationConfigureUpdateConfigurations(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := configure.NewUpdateConfigurationsParams()
	if err, _ := retrieveOperationConfigureUpdateConfigurationsXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationConfigureUpdateConfigurationsConfigurationsFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationConfigureUpdateConfigurationsResult(appCli.Configure.UpdateConfigurations(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationConfigureUpdateConfigurationsParamFlags registers all flags needed to fill params
func registerOperationConfigureUpdateConfigurationsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationConfigureUpdateConfigurationsXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationConfigureUpdateConfigurationsConfigurationsParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationConfigureUpdateConfigurationsXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationConfigureUpdateConfigurationsConfigurationsParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var configurationsFlagName string
	if cmdPrefix == "" {
		configurationsFlagName = "configurations"
	} else {
		configurationsFlagName = fmt.Sprintf("%v.configurations", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(configurationsFlagName, "", "Optional json string for [configurations]. The configuration map can contain a subset of the attributes of the schema, which are to be updated.")

	// add flags for body
	if err := registerModelConfigurationsFlags(0, "configurations", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationConfigureUpdateConfigurationsXRequestIDFlag(m *configure.UpdateConfigurationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationConfigureUpdateConfigurationsConfigurationsFlag(m *configure.UpdateConfigurationsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("configurations") {
		// Read configurations string from cmd and unmarshal
		configurationsValueStr, err := cmd.Flags().GetString("configurations")
		if err != nil {
			return err, false
		}

		configurationsValue := models.Configurations{}
		if err := json.Unmarshal([]byte(configurationsValueStr), &configurationsValue); err != nil {
			return fmt.Errorf("cannot unmarshal configurations string in models.Configurations: %v", err), false
		}
		m.Configurations = &configurationsValue
	}
	configurationsValueModel := m.Configurations
	if swag.IsZero(configurationsValueModel) {
		configurationsValueModel = &models.Configurations{}
	}
	err, added := retrieveModelConfigurationsFlags(0, configurationsValueModel, "configurations", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Configurations = configurationsValueModel
	}
	if dryRun && debug {

		configurationsValueDebugBytes, err := json.Marshal(m.Configurations)
		if err != nil {
			return err, false
		}
		logDebugf("Configurations dry-run payload: %v", string(configurationsValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationConfigureUpdateConfigurationsResult parses request result and return the string content
func parseOperationConfigureUpdateConfigurationsResult(resp0 *configure.UpdateConfigurationsOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning updateConfigurationsOK is not supported

		// Non schema case: warning updateConfigurationsUnauthorized is not supported

		// Non schema case: warning updateConfigurationsForbidden is not supported

		// Non schema case: warning updateConfigurationsInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response updateConfigurationsOK is not supported by go-swagger cli yet.

	return "", nil
}
