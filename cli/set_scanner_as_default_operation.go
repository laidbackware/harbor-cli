// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/scanner"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationScannerSetScannerAsDefaultCmd returns a cmd to handle operation setScannerAsDefault
func makeOperationScannerSetScannerAsDefaultCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "setScannerAsDefault",
		Short: `Set the specified scanner registration as the system default one.
`,
		RunE: runOperationScannerSetScannerAsDefault,
	}

	if err := registerOperationScannerSetScannerAsDefaultParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationScannerSetScannerAsDefault uses cmd flags to call endpoint api
func runOperationScannerSetScannerAsDefault(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := scanner.NewSetScannerAsDefaultParams()
	if err, _ := retrieveOperationScannerSetScannerAsDefaultXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScannerSetScannerAsDefaultPayloadFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationScannerSetScannerAsDefaultRegistrationIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationScannerSetScannerAsDefaultResult(appCli.Scanner.SetScannerAsDefault(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationScannerSetScannerAsDefaultParamFlags registers all flags needed to fill params
func registerOperationScannerSetScannerAsDefaultParamFlags(cmd *cobra.Command) error {
	if err := registerOperationScannerSetScannerAsDefaultXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScannerSetScannerAsDefaultPayloadParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationScannerSetScannerAsDefaultRegistrationIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationScannerSetScannerAsDefaultXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationScannerSetScannerAsDefaultPayloadParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var payloadFlagName string
	if cmdPrefix == "" {
		payloadFlagName = "payload"
	} else {
		payloadFlagName = fmt.Sprintf("%v.payload", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(payloadFlagName, "", "Optional json string for [payload]. ")

	// add flags for body
	if err := registerModelIsDefaultFlags(0, "isDefault", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationScannerSetScannerAsDefaultRegistrationIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	registrationIdDescription := `Required. The scanner registration identifier.`

	var registrationIdFlagName string
	if cmdPrefix == "" {
		registrationIdFlagName = "registration_id"
	} else {
		registrationIdFlagName = fmt.Sprintf("%v.registration_id", cmdPrefix)
	}

	var registrationIdFlagDefault string

	_ = cmd.PersistentFlags().String(registrationIdFlagName, registrationIdFlagDefault, registrationIdDescription)

	return nil
}

func retrieveOperationScannerSetScannerAsDefaultXRequestIDFlag(m *scanner.SetScannerAsDefaultParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationScannerSetScannerAsDefaultPayloadFlag(m *scanner.SetScannerAsDefaultParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("payload") {
		// Read payload string from cmd and unmarshal
		payloadValueStr, err := cmd.Flags().GetString("payload")
		if err != nil {
			return err, false
		}

		payloadValue := models.IsDefault{}
		if err := json.Unmarshal([]byte(payloadValueStr), &payloadValue); err != nil {
			return fmt.Errorf("cannot unmarshal payload string in models.IsDefault: %v", err), false
		}
		m.Payload = &payloadValue
	}
	payloadValueModel := m.Payload
	if swag.IsZero(payloadValueModel) {
		payloadValueModel = &models.IsDefault{}
	}
	err, added := retrieveModelIsDefaultFlags(0, payloadValueModel, "isDefault", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Payload = payloadValueModel
	}
	if dryRun && debug {

		payloadValueDebugBytes, err := json.Marshal(m.Payload)
		if err != nil {
			return err, false
		}
		logDebugf("Payload dry-run payload: %v", string(payloadValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationScannerSetScannerAsDefaultRegistrationIDFlag(m *scanner.SetScannerAsDefaultParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("registration_id") {

		var registrationIdFlagName string
		if cmdPrefix == "" {
			registrationIdFlagName = "registration_id"
		} else {
			registrationIdFlagName = fmt.Sprintf("%v.registration_id", cmdPrefix)
		}

		registrationIdFlagValue, err := cmd.Flags().GetString(registrationIdFlagName)
		if err != nil {
			return err, false
		}
		m.RegistrationID = registrationIdFlagValue

	}
	return nil, retAdded
}

// parseOperationScannerSetScannerAsDefaultResult parses request result and return the string content
func parseOperationScannerSetScannerAsDefaultResult(resp0 *scanner.SetScannerAsDefaultOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning setScannerAsDefaultOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*scanner.SetScannerAsDefaultUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*scanner.SetScannerAsDefaultForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*scanner.SetScannerAsDefaultInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response setScannerAsDefaultOK is not supported by go-swagger cli yet.

	return "", nil
}
