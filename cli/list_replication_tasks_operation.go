// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/replication"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationReplicationListReplicationTasksCmd returns a cmd to handle operation listReplicationTasks
func makeOperationReplicationListReplicationTasksCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listReplicationTasks",
		Short: `List replication tasks for a specific execution`,
		RunE:  runOperationReplicationListReplicationTasks,
	}

	if err := registerOperationReplicationListReplicationTasksParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationReplicationListReplicationTasks uses cmd flags to call endpoint api
func runOperationReplicationListReplicationTasks(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := replication.NewListReplicationTasksParams()
	if err, _ := retrieveOperationReplicationListReplicationTasksXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksResourceTypeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksSortFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationTasksStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationReplicationListReplicationTasksResult(appCli.Replication.ListReplicationTasks(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationReplicationListReplicationTasksParamFlags registers all flags needed to fill params
func registerOperationReplicationListReplicationTasksParamFlags(cmd *cobra.Command) error {
	if err := registerOperationReplicationListReplicationTasksXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksResourceTypeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksSortParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationTasksStatusParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationReplicationListReplicationTasksXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. The ID of the execution that the tasks belongs to.`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `The page number`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `The size of per page`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "page_size"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
	}

	var pageSizeFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksResourceTypeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	resourceTypeDescription := `The resource type.`

	var resourceTypeFlagName string
	if cmdPrefix == "" {
		resourceTypeFlagName = "resource_type"
	} else {
		resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
	}

	var resourceTypeFlagDefault string

	_ = cmd.PersistentFlags().String(resourceTypeFlagName, resourceTypeFlagDefault, resourceTypeDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksSortParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescription := `Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with 'sort=field1,-field2'`

	var sortFlagName string
	if cmdPrefix == "" {
		sortFlagName = "sort"
	} else {
		sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
	}

	var sortFlagDefault string

	_ = cmd.PersistentFlags().String(sortFlagName, sortFlagDefault, sortDescription)

	return nil
}
func registerOperationReplicationListReplicationTasksStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `The task status.`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func retrieveOperationReplicationListReplicationTasksXRequestIDFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksIDFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksPageFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksPageSizeFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page_size") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "page_size"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksResourceTypeFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("resource_type") {

		var resourceTypeFlagName string
		if cmdPrefix == "" {
			resourceTypeFlagName = "resource_type"
		} else {
			resourceTypeFlagName = fmt.Sprintf("%v.resource_type", cmdPrefix)
		}

		resourceTypeFlagValue, err := cmd.Flags().GetString(resourceTypeFlagName)
		if err != nil {
			return err, false
		}
		m.ResourceType = &resourceTypeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksSortFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort") {

		var sortFlagName string
		if cmdPrefix == "" {
			sortFlagName = "sort"
		} else {
			sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
		}

		sortFlagValue, err := cmd.Flags().GetString(sortFlagName)
		if err != nil {
			return err, false
		}
		m.Sort = &sortFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationTasksStatusFlag(m *replication.ListReplicationTasksParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

	}
	return nil, retAdded
}

// parseOperationReplicationListReplicationTasksResult parses request result and return the string content
func parseOperationReplicationListReplicationTasksResult(resp0 *replication.ListReplicationTasksOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*replication.ListReplicationTasksOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*replication.ListReplicationTasksUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*replication.ListReplicationTasksForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*replication.ListReplicationTasksInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
