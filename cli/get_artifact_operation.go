// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/artifact"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationArtifactGetArtifactCmd returns a cmd to handle operation getArtifact
func makeOperationArtifactGetArtifactCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "getArtifact",
		Short: `Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.`,
		RunE:  runOperationArtifactGetArtifact,
	}

	if err := registerOperationArtifactGetArtifactParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationArtifactGetArtifact uses cmd flags to call endpoint api
func runOperationArtifactGetArtifact(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := artifact.NewGetArtifactParams()
	if err, _ := retrieveOperationArtifactGetArtifactXAcceptVulnerabilitiesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactReferenceFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactWithImmutableStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactWithLabelFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactWithScanOverviewFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactWithSignatureFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactGetArtifactWithTagFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationArtifactGetArtifactResult(appCli.Artifact.GetArtifact(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationArtifactGetArtifactParamFlags registers all flags needed to fill params
func registerOperationArtifactGetArtifactParamFlags(cmd *cobra.Command) error {
	if err := registerOperationArtifactGetArtifactXAcceptVulnerabilitiesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactReferenceParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactWithImmutableStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactWithLabelParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactWithScanOverviewParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactWithSignatureParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactGetArtifactWithTagParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationArtifactGetArtifactXAcceptVulnerabilitiesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xAcceptVulnerabilitiesDescription := `A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.
Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'`

	var xAcceptVulnerabilitiesFlagName string
	if cmdPrefix == "" {
		xAcceptVulnerabilitiesFlagName = "X-Accept-Vulnerabilities"
	} else {
		xAcceptVulnerabilitiesFlagName = fmt.Sprintf("%v.X-Accept-Vulnerabilities", cmdPrefix)
	}

	var xAcceptVulnerabilitiesFlagDefault string = "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"

	_ = cmd.PersistentFlags().String(xAcceptVulnerabilitiesFlagName, xAcceptVulnerabilitiesFlagDefault, xAcceptVulnerabilitiesDescription)

	return nil
}
func registerOperationArtifactGetArtifactXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationArtifactGetArtifactPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `The page number`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationArtifactGetArtifactPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `The size of per page`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "page_size"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
	}

	var pageSizeFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}
func registerOperationArtifactGetArtifactProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationArtifactGetArtifactReferenceParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	referenceDescription := `Required. The reference of the artifact, can be digest or tag`

	var referenceFlagName string
	if cmdPrefix == "" {
		referenceFlagName = "reference"
	} else {
		referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
	}

	var referenceFlagDefault string

	_ = cmd.PersistentFlags().String(referenceFlagName, referenceFlagDefault, referenceDescription)

	return nil
}
func registerOperationArtifactGetArtifactRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}
func registerOperationArtifactGetArtifactWithImmutableStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withImmutableStatusDescription := `Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting 'with_tag=true'`

	var withImmutableStatusFlagName string
	if cmdPrefix == "" {
		withImmutableStatusFlagName = "with_immutable_status"
	} else {
		withImmutableStatusFlagName = fmt.Sprintf("%v.with_immutable_status", cmdPrefix)
	}

	var withImmutableStatusFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withImmutableStatusFlagName, withImmutableStatusFlagDefault, withImmutableStatusDescription)

	return nil
}
func registerOperationArtifactGetArtifactWithLabelParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withLabelDescription := `Specify whether the labels are inclued inside the returning artifacts`

	var withLabelFlagName string
	if cmdPrefix == "" {
		withLabelFlagName = "with_label"
	} else {
		withLabelFlagName = fmt.Sprintf("%v.with_label", cmdPrefix)
	}

	var withLabelFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withLabelFlagName, withLabelFlagDefault, withLabelDescription)

	return nil
}
func registerOperationArtifactGetArtifactWithScanOverviewParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withScanOverviewDescription := `Specify whether the scan overview is inclued inside the returning artifacts`

	var withScanOverviewFlagName string
	if cmdPrefix == "" {
		withScanOverviewFlagName = "with_scan_overview"
	} else {
		withScanOverviewFlagName = fmt.Sprintf("%v.with_scan_overview", cmdPrefix)
	}

	var withScanOverviewFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withScanOverviewFlagName, withScanOverviewFlagDefault, withScanOverviewDescription)

	return nil
}
func registerOperationArtifactGetArtifactWithSignatureParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withSignatureDescription := `Specify whether the signature is inclued inside the returning artifacts`

	var withSignatureFlagName string
	if cmdPrefix == "" {
		withSignatureFlagName = "with_signature"
	} else {
		withSignatureFlagName = fmt.Sprintf("%v.with_signature", cmdPrefix)
	}

	var withSignatureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withSignatureFlagName, withSignatureFlagDefault, withSignatureDescription)

	return nil
}
func registerOperationArtifactGetArtifactWithTagParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withTagDescription := `Specify whether the tags are inclued inside the returning artifacts`

	var withTagFlagName string
	if cmdPrefix == "" {
		withTagFlagName = "with_tag"
	} else {
		withTagFlagName = fmt.Sprintf("%v.with_tag", cmdPrefix)
	}

	var withTagFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(withTagFlagName, withTagFlagDefault, withTagDescription)

	return nil
}

func retrieveOperationArtifactGetArtifactXAcceptVulnerabilitiesFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Accept-Vulnerabilities") {

		var xAcceptVulnerabilitiesFlagName string
		if cmdPrefix == "" {
			xAcceptVulnerabilitiesFlagName = "X-Accept-Vulnerabilities"
		} else {
			xAcceptVulnerabilitiesFlagName = fmt.Sprintf("%v.X-Accept-Vulnerabilities", cmdPrefix)
		}

		xAcceptVulnerabilitiesFlagValue, err := cmd.Flags().GetString(xAcceptVulnerabilitiesFlagName)
		if err != nil {
			return err, false
		}
		m.XAcceptVulnerabilities = &xAcceptVulnerabilitiesFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactXRequestIDFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactPageFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactPageSizeFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page_size") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "page_size"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactProjectNameFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactReferenceFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("reference") {

		var referenceFlagName string
		if cmdPrefix == "" {
			referenceFlagName = "reference"
		} else {
			referenceFlagName = fmt.Sprintf("%v.reference", cmdPrefix)
		}

		referenceFlagValue, err := cmd.Flags().GetString(referenceFlagName)
		if err != nil {
			return err, false
		}
		m.Reference = referenceFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactRepositoryNameFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository_name") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactWithImmutableStatusFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_immutable_status") {

		var withImmutableStatusFlagName string
		if cmdPrefix == "" {
			withImmutableStatusFlagName = "with_immutable_status"
		} else {
			withImmutableStatusFlagName = fmt.Sprintf("%v.with_immutable_status", cmdPrefix)
		}

		withImmutableStatusFlagValue, err := cmd.Flags().GetBool(withImmutableStatusFlagName)
		if err != nil {
			return err, false
		}
		m.WithImmutableStatus = &withImmutableStatusFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactWithLabelFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_label") {

		var withLabelFlagName string
		if cmdPrefix == "" {
			withLabelFlagName = "with_label"
		} else {
			withLabelFlagName = fmt.Sprintf("%v.with_label", cmdPrefix)
		}

		withLabelFlagValue, err := cmd.Flags().GetBool(withLabelFlagName)
		if err != nil {
			return err, false
		}
		m.WithLabel = &withLabelFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactWithScanOverviewFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_scan_overview") {

		var withScanOverviewFlagName string
		if cmdPrefix == "" {
			withScanOverviewFlagName = "with_scan_overview"
		} else {
			withScanOverviewFlagName = fmt.Sprintf("%v.with_scan_overview", cmdPrefix)
		}

		withScanOverviewFlagValue, err := cmd.Flags().GetBool(withScanOverviewFlagName)
		if err != nil {
			return err, false
		}
		m.WithScanOverview = &withScanOverviewFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactWithSignatureFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_signature") {

		var withSignatureFlagName string
		if cmdPrefix == "" {
			withSignatureFlagName = "with_signature"
		} else {
			withSignatureFlagName = fmt.Sprintf("%v.with_signature", cmdPrefix)
		}

		withSignatureFlagValue, err := cmd.Flags().GetBool(withSignatureFlagName)
		if err != nil {
			return err, false
		}
		m.WithSignature = &withSignatureFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactGetArtifactWithTagFlag(m *artifact.GetArtifactParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_tag") {

		var withTagFlagName string
		if cmdPrefix == "" {
			withTagFlagName = "with_tag"
		} else {
			withTagFlagName = fmt.Sprintf("%v.with_tag", cmdPrefix)
		}

		withTagFlagValue, err := cmd.Flags().GetBool(withTagFlagName)
		if err != nil {
			return err, false
		}
		m.WithTag = &withTagFlagValue

	}
	return nil, retAdded
}

// parseOperationArtifactGetArtifactResult parses request result and return the string content
func parseOperationArtifactGetArtifactResult(resp0 *artifact.GetArtifactOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*artifact.GetArtifactOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*artifact.GetArtifactBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*artifact.GetArtifactUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*artifact.GetArtifactForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*artifact.GetArtifactNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*artifact.GetArtifactInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
