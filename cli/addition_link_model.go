// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for AdditionLink

// register flags to command
func registerModelAdditionLinkFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAdditionLinkAbsolute(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAdditionLinkHref(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAdditionLinkAbsolute(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	absoluteDescription := `Determine whether the link is an absolute URL or not`

	var absoluteFlagName string
	if cmdPrefix == "" {
		absoluteFlagName = "absolute"
	} else {
		absoluteFlagName = fmt.Sprintf("%v.absolute", cmdPrefix)
	}

	var absoluteFlagDefault bool

	_ = cmd.PersistentFlags().Bool(absoluteFlagName, absoluteFlagDefault, absoluteDescription)

	return nil
}

func registerAdditionLinkHref(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	hrefDescription := `The link of the addition`

	var hrefFlagName string
	if cmdPrefix == "" {
		hrefFlagName = "href"
	} else {
		hrefFlagName = fmt.Sprintf("%v.href", cmdPrefix)
	}

	var hrefFlagDefault string

	_ = cmd.PersistentFlags().String(hrefFlagName, hrefFlagDefault, hrefDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAdditionLinkFlags(depth int, m *models.AdditionLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, absoluteAdded := retrieveAdditionLinkAbsoluteFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || absoluteAdded

	err, hrefAdded := retrieveAdditionLinkHrefFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || hrefAdded

	return nil, retAdded
}

func retrieveAdditionLinkAbsoluteFlags(depth int, m *models.AdditionLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	absoluteFlagName := fmt.Sprintf("%v.absolute", cmdPrefix)
	if cmd.Flags().Changed(absoluteFlagName) {

		var absoluteFlagName string
		if cmdPrefix == "" {
			absoluteFlagName = "absolute"
		} else {
			absoluteFlagName = fmt.Sprintf("%v.absolute", cmdPrefix)
		}

		absoluteFlagValue, err := cmd.Flags().GetBool(absoluteFlagName)
		if err != nil {
			return err, false
		}
		m.Absolute = absoluteFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAdditionLinkHrefFlags(depth int, m *models.AdditionLink, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	hrefFlagName := fmt.Sprintf("%v.href", cmdPrefix)
	if cmd.Flags().Changed(hrefFlagName) {

		var hrefFlagName string
		if cmdPrefix == "" {
			hrefFlagName = "href"
		} else {
			hrefFlagName = fmt.Sprintf("%v.href", cmdPrefix)
		}

		hrefFlagValue, err := cmd.Flags().GetString(hrefFlagName)
		if err != nil {
			return err, false
		}
		m.Href = hrefFlagValue

		retAdded = true
	}

	return nil, retAdded
}
