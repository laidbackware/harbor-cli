// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionRuleTrigger

// register flags to command
func registerModelRetentionRuleTriggerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionRuleTriggerKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleTriggerReferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionRuleTriggerSettings(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionRuleTriggerKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := ``

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

func registerRetentionRuleTriggerReferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: references interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionRuleTriggerSettings(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: settings interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionRuleTriggerFlags(depth int, m *models.RetentionRuleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, kindAdded := retrieveRetentionRuleTriggerKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, referencesAdded := retrieveRetentionRuleTriggerReferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || referencesAdded

	err, settingsAdded := retrieveRetentionRuleTriggerSettingsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || settingsAdded

	return nil, retAdded
}

func retrieveRetentionRuleTriggerKindFlags(depth int, m *models.RetentionRuleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionRuleTriggerReferencesFlags(depth int, m *models.RetentionRuleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	referencesFlagName := fmt.Sprintf("%v.references", cmdPrefix)
	if cmd.Flags().Changed(referencesFlagName) {
		// warning: references map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionRuleTriggerSettingsFlags(depth int, m *models.RetentionRuleTrigger, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	settingsFlagName := fmt.Sprintf("%v.settings", cmdPrefix)
	if cmd.Flags().Changed(settingsFlagName) {
		// warning: settings map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
