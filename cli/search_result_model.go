// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for SearchResult

// register flags to command
func registerModelSearchResultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSearchResultChart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchResultScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchResultChart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var chartFlagName string
	if cmdPrefix == "" {
		chartFlagName = "Chart"
	} else {
		chartFlagName = fmt.Sprintf("%v.Chart", cmdPrefix)
	}

	if err := registerModelChartVersionFlags(depth+1, chartFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchResultName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The chart name with repo name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "Name"
	} else {
		nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerSearchResultScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	scoreDescription := `The matched level`

	var scoreFlagName string
	if cmdPrefix == "" {
		scoreFlagName = "Score"
	} else {
		scoreFlagName = fmt.Sprintf("%v.Score", cmdPrefix)
	}

	var scoreFlagDefault int64

	_ = cmd.PersistentFlags().Int64(scoreFlagName, scoreFlagDefault, scoreDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSearchResultFlags(depth int, m *models.SearchResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, chartAdded := retrieveSearchResultChartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded

	err, nameAdded := retrieveSearchResultNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, scoreAdded := retrieveSearchResultScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scoreAdded

	return nil, retAdded
}

func retrieveSearchResultChartFlags(depth int, m *models.SearchResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	chartFlagName := fmt.Sprintf("%v.Chart", cmdPrefix)
	if cmd.Flags().Changed(chartFlagName) {
		// info: complex object Chart ChartVersion is retrieved outside this Changed() block
	}
	chartFlagValue := m.Chart
	if swag.IsZero(chartFlagValue) {
		chartFlagValue = &models.ChartVersion{}
	}

	err, chartAdded := retrieveModelChartVersionFlags(depth+1, chartFlagValue, chartFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || chartAdded
	if chartAdded {
		m.Chart = chartFlagValue
	}

	return nil, retAdded
}

func retrieveSearchResultNameFlags(depth int, m *models.SearchResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.Name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "Name"
		} else {
			nameFlagName = fmt.Sprintf("%v.Name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchResultScoreFlags(depth int, m *models.SearchResult, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scoreFlagName := fmt.Sprintf("%v.Score", cmdPrefix)
	if cmd.Flags().Changed(scoreFlagName) {

		var scoreFlagName string
		if cmdPrefix == "" {
			scoreFlagName = "Score"
		} else {
			scoreFlagName = fmt.Sprintf("%v.Score", cmdPrefix)
		}

		scoreFlagValue, err := cmd.Flags().GetInt64(scoreFlagName)
		if err != nil {
			return err, false
		}
		m.Score = scoreFlagValue

		retAdded = true
	}

	return nil, retAdded
}
