// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/user"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserSetCliSecretCmd returns a cmd to handle operation setCliSecret
func makeOperationUserSetCliSecretCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "setCliSecret",
		Short: `This endpoint let user generate a new CLI secret for himself.  This API only works when auth mode is set to 'OIDC'. Once this API returns with successful status, the old secret will be invalid, as there will be only one CLI secret for a user.`,
		RunE:  runOperationUserSetCliSecret,
	}

	if err := registerOperationUserSetCliSecretParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserSetCliSecret uses cmd flags to call endpoint api
func runOperationUserSetCliSecret(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user.NewSetCliSecretParams()
	if err, _ := retrieveOperationUserSetCliSecretXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserSetCliSecretSecretFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserSetCliSecretUserIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserSetCliSecretResult(appCli.User.SetCliSecret(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserSetCliSecretParamFlags registers all flags needed to fill params
func registerOperationUserSetCliSecretParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserSetCliSecretXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserSetCliSecretSecretParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserSetCliSecretUserIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserSetCliSecretXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationUserSetCliSecretSecretParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var secretFlagName string
	if cmdPrefix == "" {
		secretFlagName = "secret"
	} else {
		secretFlagName = fmt.Sprintf("%v.secret", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(secretFlagName, "", "Optional json string for [secret]. ")

	// add flags for body
	if err := registerModelOIDCCliSecretReqFlags(0, "oIdCCliSecretReq", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationUserSetCliSecretUserIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	userIdDescription := `Required. User ID`

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "user_id"
	} else {
		userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
	}

	var userIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func retrieveOperationUserSetCliSecretXRequestIDFlag(m *user.SetCliSecretParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserSetCliSecretSecretFlag(m *user.SetCliSecretParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("secret") {
		// Read secret string from cmd and unmarshal
		secretValueStr, err := cmd.Flags().GetString("secret")
		if err != nil {
			return err, false
		}

		secretValue := models.OIDCCliSecretReq{}
		if err := json.Unmarshal([]byte(secretValueStr), &secretValue); err != nil {
			return fmt.Errorf("cannot unmarshal secret string in models.OIDCCliSecretReq: %v", err), false
		}
		m.Secret = &secretValue
	}
	secretValueModel := m.Secret
	if swag.IsZero(secretValueModel) {
		secretValueModel = &models.OIDCCliSecretReq{}
	}
	err, added := retrieveModelOIDCCliSecretReqFlags(0, secretValueModel, "oIdCCliSecretReq", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Secret = secretValueModel
	}
	if dryRun && debug {

		secretValueDebugBytes, err := json.Marshal(m.Secret)
		if err != nil {
			return err, false
		}
		logDebugf("Secret dry-run payload: %v", string(secretValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationUserSetCliSecretUserIDFlag(m *user.SetCliSecretParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("user_id") {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "user_id"
		} else {
			userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetInt64(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

	}
	return nil, retAdded
}

// parseOperationUserSetCliSecretResult parses request result and return the string content
func parseOperationUserSetCliSecretResult(resp0 *user.SetCliSecretOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning setCliSecretOK is not supported

		// Non schema case: warning setCliSecretBadRequest is not supported

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*user.SetCliSecretUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*user.SetCliSecretForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*user.SetCliSecretNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning setCliSecretPreconditionFailed is not supported

		var iResp6 interface{} = respErr
		resp6, ok := iResp6.(*user.SetCliSecretInternalServerError)
		if ok {
			if !swag.IsZero(resp6) && !swag.IsZero(resp6.Payload) {
				msgStr, err := json.Marshal(resp6.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response setCliSecretOK is not supported by go-swagger cli yet.

	return "", nil
}
