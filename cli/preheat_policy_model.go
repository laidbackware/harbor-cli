// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for PreheatPolicy

// register flags to command
func registerModelPreheatPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPreheatPolicyCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyFilters(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyProviderID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyProviderName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPreheatPolicyUpdateTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPreheatPolicyCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The Create Time of preheat policy`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerPreheatPolicyDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `The Description of preheat policy`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerPreheatPolicyEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Whether the preheat policy enabled`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerPreheatPolicyFilters(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	filtersDescription := `The Filters of preheat policy`

	var filtersFlagName string
	if cmdPrefix == "" {
		filtersFlagName = "filters"
	} else {
		filtersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
	}

	var filtersFlagDefault string

	_ = cmd.PersistentFlags().String(filtersFlagName, filtersFlagDefault, filtersDescription)

	return nil
}

func registerPreheatPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of preheat policy`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerPreheatPolicyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `The Name of preheat policy`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerPreheatPolicyProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := `The ID of preheat policy project`

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "project_id"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
	}

	var projectIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerPreheatPolicyProviderID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	providerIdDescription := `The ID of preheat policy provider`

	var providerIdFlagName string
	if cmdPrefix == "" {
		providerIdFlagName = "provider_id"
	} else {
		providerIdFlagName = fmt.Sprintf("%v.provider_id", cmdPrefix)
	}

	var providerIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(providerIdFlagName, providerIdFlagDefault, providerIdDescription)

	return nil
}

func registerPreheatPolicyProviderName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	providerNameDescription := `The Name of preheat policy provider`

	var providerNameFlagName string
	if cmdPrefix == "" {
		providerNameFlagName = "provider_name"
	} else {
		providerNameFlagName = fmt.Sprintf("%v.provider_name", cmdPrefix)
	}

	var providerNameFlagDefault string

	_ = cmd.PersistentFlags().String(providerNameFlagName, providerNameFlagDefault, providerNameDescription)

	return nil
}

func registerPreheatPolicyTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	triggerDescription := `The Trigger of preheat policy`

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	var triggerFlagDefault string

	_ = cmd.PersistentFlags().String(triggerFlagName, triggerFlagDefault, triggerDescription)

	return nil
}

func registerPreheatPolicyUpdateTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updateTimeDescription := `The Update Time of preheat policy`

	var updateTimeFlagName string
	if cmdPrefix == "" {
		updateTimeFlagName = "update_time"
	} else {
		updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(updateTimeFlagName, "", updateTimeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPreheatPolicyFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, creationTimeAdded := retrievePreheatPolicyCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, descriptionAdded := retrievePreheatPolicyDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, enabledAdded := retrievePreheatPolicyEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, filtersAdded := retrievePreheatPolicyFiltersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filtersAdded

	err, idAdded := retrievePreheatPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrievePreheatPolicyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, projectIdAdded := retrievePreheatPolicyProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, providerIdAdded := retrievePreheatPolicyProviderIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || providerIdAdded

	err, providerNameAdded := retrievePreheatPolicyProviderNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || providerNameAdded

	err, triggerAdded := retrievePreheatPolicyTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	err, updateTimeAdded := retrievePreheatPolicyUpdateTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updateTimeAdded

	return nil, retAdded
}

func retrievePreheatPolicyCreationTimeFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyDescriptionFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyEnabledFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyFiltersFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filtersFlagName := fmt.Sprintf("%v.filters", cmdPrefix)
	if cmd.Flags().Changed(filtersFlagName) {

		var filtersFlagName string
		if cmdPrefix == "" {
			filtersFlagName = "filters"
		} else {
			filtersFlagName = fmt.Sprintf("%v.filters", cmdPrefix)
		}

		filtersFlagValue, err := cmd.Flags().GetString(filtersFlagName)
		if err != nil {
			return err, false
		}
		m.Filters = filtersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyIDFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyNameFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyProjectIDFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.project_id", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "project_id"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt64(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyProviderIDFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	providerIdFlagName := fmt.Sprintf("%v.provider_id", cmdPrefix)
	if cmd.Flags().Changed(providerIdFlagName) {

		var providerIdFlagName string
		if cmdPrefix == "" {
			providerIdFlagName = "provider_id"
		} else {
			providerIdFlagName = fmt.Sprintf("%v.provider_id", cmdPrefix)
		}

		providerIdFlagValue, err := cmd.Flags().GetInt64(providerIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProviderID = providerIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyProviderNameFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	providerNameFlagName := fmt.Sprintf("%v.provider_name", cmdPrefix)
	if cmd.Flags().Changed(providerNameFlagName) {

		var providerNameFlagName string
		if cmdPrefix == "" {
			providerNameFlagName = "provider_name"
		} else {
			providerNameFlagName = fmt.Sprintf("%v.provider_name", cmdPrefix)
		}

		providerNameFlagValue, err := cmd.Flags().GetString(providerNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProviderName = providerNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyTriggerFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {

		var triggerFlagName string
		if cmdPrefix == "" {
			triggerFlagName = "trigger"
		} else {
			triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
		}

		triggerFlagValue, err := cmd.Flags().GetString(triggerFlagName)
		if err != nil {
			return err, false
		}
		m.Trigger = triggerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePreheatPolicyUpdateTimeFlags(depth int, m *models.PreheatPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updateTimeFlagName := fmt.Sprintf("%v.update_time", cmdPrefix)
	if cmd.Flags().Changed(updateTimeFlagName) {

		var updateTimeFlagName string
		if cmdPrefix == "" {
			updateTimeFlagName = "update_time"
		} else {
			updateTimeFlagName = fmt.Sprintf("%v.update_time", cmdPrefix)
		}

		updateTimeFlagValueStr, err := cmd.Flags().GetString(updateTimeFlagName)
		if err != nil {
			return err, false
		}
		var updateTimeFlagValue strfmt.DateTime
		if err := updateTimeFlagValue.UnmarshalText([]byte(updateTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.UpdateTime = updateTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
