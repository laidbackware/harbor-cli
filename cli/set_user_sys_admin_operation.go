// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/user"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationUserSetUserSysAdminCmd returns a cmd to handle operation setUserSysAdmin
func makeOperationUserSetUserSysAdminCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "setUserSysAdmin",
		Short: ``,
		RunE:  runOperationUserSetUserSysAdmin,
	}

	if err := registerOperationUserSetUserSysAdminParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationUserSetUserSysAdmin uses cmd flags to call endpoint api
func runOperationUserSetUserSysAdmin(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := user.NewSetUserSysAdminParams()
	if err, _ := retrieveOperationUserSetUserSysAdminXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserSetUserSysAdminSysadminFlagFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationUserSetUserSysAdminUserIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationUserSetUserSysAdminResult(appCli.User.SetUserSysAdmin(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationUserSetUserSysAdminParamFlags registers all flags needed to fill params
func registerOperationUserSetUserSysAdminParamFlags(cmd *cobra.Command) error {
	if err := registerOperationUserSetUserSysAdminXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserSetUserSysAdminSysadminFlagParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationUserSetUserSysAdminUserIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationUserSetUserSysAdminXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationUserSetUserSysAdminSysadminFlagParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var sysadminFlagFlagName string
	if cmdPrefix == "" {
		sysadminFlagFlagName = "sysadmin_flag"
	} else {
		sysadminFlagFlagName = fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(sysadminFlagFlagName, "", "Optional json string for [sysadmin_flag]. Toggle a user to admin or not.")

	// add flags for body
	if err := registerModelUserSysAdminFlagFlags(0, "userSysAdminFlag", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationUserSetUserSysAdminUserIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	userIdDescription := `Required. `

	var userIdFlagName string
	if cmdPrefix == "" {
		userIdFlagName = "user_id"
	} else {
		userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
	}

	var userIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(userIdFlagName, userIdFlagDefault, userIdDescription)

	return nil
}

func retrieveOperationUserSetUserSysAdminXRequestIDFlag(m *user.SetUserSysAdminParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationUserSetUserSysAdminSysadminFlagFlag(m *user.SetUserSysAdminParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sysadmin_flag") {
		// Read sysadmin_flag string from cmd and unmarshal
		sysadminFlagValueStr, err := cmd.Flags().GetString("sysadmin_flag")
		if err != nil {
			return err, false
		}

		sysadminFlagValue := models.UserSysAdminFlag{}
		if err := json.Unmarshal([]byte(sysadminFlagValueStr), &sysadminFlagValue); err != nil {
			return fmt.Errorf("cannot unmarshal sysadmin_flag string in models.UserSysAdminFlag: %v", err), false
		}
		m.SysadminFlag = &sysadminFlagValue
	}
	sysadminFlagValueModel := m.SysadminFlag
	if swag.IsZero(sysadminFlagValueModel) {
		sysadminFlagValueModel = &models.UserSysAdminFlag{}
	}
	err, added := retrieveModelUserSysAdminFlagFlags(0, sysadminFlagValueModel, "userSysAdminFlag", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.SysadminFlag = sysadminFlagValueModel
	}
	if dryRun && debug {

		sysadminFlagValueDebugBytes, err := json.Marshal(m.SysadminFlag)
		if err != nil {
			return err, false
		}
		logDebugf("SysadminFlag dry-run payload: %v", string(sysadminFlagValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationUserSetUserSysAdminUserIDFlag(m *user.SetUserSysAdminParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("user_id") {

		var userIdFlagName string
		if cmdPrefix == "" {
			userIdFlagName = "user_id"
		} else {
			userIdFlagName = fmt.Sprintf("%v.user_id", cmdPrefix)
		}

		userIdFlagValue, err := cmd.Flags().GetInt64(userIdFlagName)
		if err != nil {
			return err, false
		}
		m.UserID = userIdFlagValue

	}
	return nil, retAdded
}

// parseOperationUserSetUserSysAdminResult parses request result and return the string content
func parseOperationUserSetUserSysAdminResult(resp0 *user.SetUserSysAdminOK, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning setUserSysAdminOK is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*user.SetUserSysAdminUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*user.SetUserSysAdminForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*user.SetUserSysAdminNotFound)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning setUserSysAdminInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response setUserSysAdminOK is not supported by go-swagger cli yet.

	return "", nil
}
