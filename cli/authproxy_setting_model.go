// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for AuthproxySetting

// register flags to command
func registerModelAuthproxySettingFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAuthproxySettingEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthproxySettingServerCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthproxySettingSkipSearch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthproxySettingTokenreivewEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAuthproxySettingVerifyCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAuthproxySettingEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointDescription := `The fully qualified URI of login endpoint of authproxy, such as https://192.168.1.2:8443/login`

	var endpointFlagName string
	if cmdPrefix == "" {
		endpointFlagName = "endpoint"
	} else {
		endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
	}

	var endpointFlagDefault string

	_ = cmd.PersistentFlags().String(endpointFlagName, endpointFlagDefault, endpointDescription)

	return nil
}

func registerAuthproxySettingServerCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverCertificateDescription := `The certificate to be pinned when connecting auth proxy.`

	var serverCertificateFlagName string
	if cmdPrefix == "" {
		serverCertificateFlagName = "server_certificate"
	} else {
		serverCertificateFlagName = fmt.Sprintf("%v.server_certificate", cmdPrefix)
	}

	var serverCertificateFlagDefault string

	_ = cmd.PersistentFlags().String(serverCertificateFlagName, serverCertificateFlagDefault, serverCertificateDescription)

	return nil
}

func registerAuthproxySettingSkipSearch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	skipSearchDescription := `The flag to determine whether Harbor can skip search the user/group when adding him as a member.`

	var skipSearchFlagName string
	if cmdPrefix == "" {
		skipSearchFlagName = "skip_search"
	} else {
		skipSearchFlagName = fmt.Sprintf("%v.skip_search", cmdPrefix)
	}

	var skipSearchFlagDefault bool

	_ = cmd.PersistentFlags().Bool(skipSearchFlagName, skipSearchFlagDefault, skipSearchDescription)

	return nil
}

func registerAuthproxySettingTokenreivewEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	tokenreivewEndpointDescription := `The fully qualified URI of token review endpoint of authproxy, such as https://192.168.1.2:8443/tokenreview`

	var tokenreivewEndpointFlagName string
	if cmdPrefix == "" {
		tokenreivewEndpointFlagName = "tokenreivew_endpoint"
	} else {
		tokenreivewEndpointFlagName = fmt.Sprintf("%v.tokenreivew_endpoint", cmdPrefix)
	}

	var tokenreivewEndpointFlagDefault string

	_ = cmd.PersistentFlags().String(tokenreivewEndpointFlagName, tokenreivewEndpointFlagDefault, tokenreivewEndpointDescription)

	return nil
}

func registerAuthproxySettingVerifyCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	verifyCertDescription := `The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.`

	var verifyCertFlagName string
	if cmdPrefix == "" {
		verifyCertFlagName = "verify_cert"
	} else {
		verifyCertFlagName = fmt.Sprintf("%v.verify_cert", cmdPrefix)
	}

	var verifyCertFlagDefault bool

	_ = cmd.PersistentFlags().Bool(verifyCertFlagName, verifyCertFlagDefault, verifyCertDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAuthproxySettingFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endpointAdded := retrieveAuthproxySettingEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAdded

	err, serverCertificateAdded := retrieveAuthproxySettingServerCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverCertificateAdded

	err, skipSearchAdded := retrieveAuthproxySettingSkipSearchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || skipSearchAdded

	err, tokenreivewEndpointAdded := retrieveAuthproxySettingTokenreivewEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || tokenreivewEndpointAdded

	err, verifyCertAdded := retrieveAuthproxySettingVerifyCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || verifyCertAdded

	return nil, retAdded
}

func retrieveAuthproxySettingEndpointFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointFlagName := fmt.Sprintf("%v.endpoint", cmdPrefix)
	if cmd.Flags().Changed(endpointFlagName) {

		var endpointFlagName string
		if cmdPrefix == "" {
			endpointFlagName = "endpoint"
		} else {
			endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
		}

		endpointFlagValue, err := cmd.Flags().GetString(endpointFlagName)
		if err != nil {
			return err, false
		}
		m.Endpoint = endpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthproxySettingServerCertificateFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverCertificateFlagName := fmt.Sprintf("%v.server_certificate", cmdPrefix)
	if cmd.Flags().Changed(serverCertificateFlagName) {

		var serverCertificateFlagName string
		if cmdPrefix == "" {
			serverCertificateFlagName = "server_certificate"
		} else {
			serverCertificateFlagName = fmt.Sprintf("%v.server_certificate", cmdPrefix)
		}

		serverCertificateFlagValue, err := cmd.Flags().GetString(serverCertificateFlagName)
		if err != nil {
			return err, false
		}
		m.ServerCertificate = serverCertificateFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthproxySettingSkipSearchFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	skipSearchFlagName := fmt.Sprintf("%v.skip_search", cmdPrefix)
	if cmd.Flags().Changed(skipSearchFlagName) {

		var skipSearchFlagName string
		if cmdPrefix == "" {
			skipSearchFlagName = "skip_search"
		} else {
			skipSearchFlagName = fmt.Sprintf("%v.skip_search", cmdPrefix)
		}

		skipSearchFlagValue, err := cmd.Flags().GetBool(skipSearchFlagName)
		if err != nil {
			return err, false
		}
		m.SkipSearch = skipSearchFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthproxySettingTokenreivewEndpointFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	tokenreivewEndpointFlagName := fmt.Sprintf("%v.tokenreivew_endpoint", cmdPrefix)
	if cmd.Flags().Changed(tokenreivewEndpointFlagName) {

		var tokenreivewEndpointFlagName string
		if cmdPrefix == "" {
			tokenreivewEndpointFlagName = "tokenreivew_endpoint"
		} else {
			tokenreivewEndpointFlagName = fmt.Sprintf("%v.tokenreivew_endpoint", cmdPrefix)
		}

		tokenreivewEndpointFlagValue, err := cmd.Flags().GetString(tokenreivewEndpointFlagName)
		if err != nil {
			return err, false
		}
		m.TokenreivewEndpoint = tokenreivewEndpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAuthproxySettingVerifyCertFlags(depth int, m *models.AuthproxySetting, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	verifyCertFlagName := fmt.Sprintf("%v.verify_cert", cmdPrefix)
	if cmd.Flags().Changed(verifyCertFlagName) {

		var verifyCertFlagName string
		if cmdPrefix == "" {
			verifyCertFlagName = "verify_cert"
		} else {
			verifyCertFlagName = fmt.Sprintf("%v.verify_cert", cmdPrefix)
		}

		verifyCertFlagValue, err := cmd.Flags().GetBool(verifyCertFlagName)
		if err != nil {
			return err, false
		}
		m.VerifyCert = verifyCertFlagValue

		retAdded = true
	}

	return nil, retAdded
}
