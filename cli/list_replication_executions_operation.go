// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/replication"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationReplicationListReplicationExecutionsCmd returns a cmd to handle operation listReplicationExecutions
func makeOperationReplicationListReplicationExecutionsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listReplicationExecutions",
		Short: `List replication executions`,
		RunE:  runOperationReplicationListReplicationExecutions,
	}

	if err := registerOperationReplicationListReplicationExecutionsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationReplicationListReplicationExecutions uses cmd flags to call endpoint api
func runOperationReplicationListReplicationExecutions(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := replication.NewListReplicationExecutionsParams()
	if err, _ := retrieveOperationReplicationListReplicationExecutionsXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsPolicyIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsSortFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationReplicationListReplicationExecutionsTriggerFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationReplicationListReplicationExecutionsResult(appCli.Replication.ListReplicationExecutions(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationReplicationListReplicationExecutionsParamFlags registers all flags needed to fill params
func registerOperationReplicationListReplicationExecutionsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationReplicationListReplicationExecutionsXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsPolicyIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsSortParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationReplicationListReplicationExecutionsTriggerParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationReplicationListReplicationExecutionsXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `The page number`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `The size of per page`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "page_size"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
	}

	var pageSizeFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsPolicyIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	policyIdDescription := `The ID of the policy that the executions belong to.`

	var policyIdFlagName string
	if cmdPrefix == "" {
		policyIdFlagName = "policy_id"
	} else {
		policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
	}

	var policyIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(policyIdFlagName, policyIdFlagDefault, policyIdDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsSortParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescription := `Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with 'sort=field1,-field2'`

	var sortFlagName string
	if cmdPrefix == "" {
		sortFlagName = "sort"
	} else {
		sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
	}

	var sortFlagDefault string

	_ = cmd.PersistentFlags().String(sortFlagName, sortFlagDefault, sortDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	statusDescription := `The execution status.`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}
func registerOperationReplicationListReplicationExecutionsTriggerParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	triggerDescription := `The trigger mode.`

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	var triggerFlagDefault string

	_ = cmd.PersistentFlags().String(triggerFlagName, triggerFlagDefault, triggerDescription)

	return nil
}

func retrieveOperationReplicationListReplicationExecutionsXRequestIDFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsPageFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsPageSizeFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page_size") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "page_size"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsPolicyIDFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("policy_id") {

		var policyIdFlagName string
		if cmdPrefix == "" {
			policyIdFlagName = "policy_id"
		} else {
			policyIdFlagName = fmt.Sprintf("%v.policy_id", cmdPrefix)
		}

		policyIdFlagValue, err := cmd.Flags().GetInt64(policyIdFlagName)
		if err != nil {
			return err, false
		}
		m.PolicyID = &policyIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsSortFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort") {

		var sortFlagName string
		if cmdPrefix == "" {
			sortFlagName = "sort"
		} else {
			sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
		}

		sortFlagValue, err := cmd.Flags().GetString(sortFlagName)
		if err != nil {
			return err, false
		}
		m.Sort = &sortFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsStatusFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("status") {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = &statusFlagValue

	}
	return nil, retAdded
}
func retrieveOperationReplicationListReplicationExecutionsTriggerFlag(m *replication.ListReplicationExecutionsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("trigger") {

		var triggerFlagName string
		if cmdPrefix == "" {
			triggerFlagName = "trigger"
		} else {
			triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
		}

		triggerFlagValue, err := cmd.Flags().GetString(triggerFlagName)
		if err != nil {
			return err, false
		}
		m.Trigger = &triggerFlagValue

	}
	return nil, retAdded
}

// parseOperationReplicationListReplicationExecutionsResult parses request result and return the string content
func parseOperationReplicationListReplicationExecutionsResult(resp0 *replication.ListReplicationExecutionsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*replication.ListReplicationExecutionsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*replication.ListReplicationExecutionsUnauthorized)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*replication.ListReplicationExecutionsForbidden)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*replication.ListReplicationExecutionsInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
