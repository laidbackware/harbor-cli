// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProviderUnderProject

// register flags to command
func registerModelProviderUnderProjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProviderUnderProjectDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProviderUnderProjectEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProviderUnderProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProviderUnderProjectProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProviderUnderProjectDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := ``

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerProviderUnderProjectEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := ``

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerProviderUnderProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerProviderUnderProjectProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	providerDescription := ``

	var providerFlagName string
	if cmdPrefix == "" {
		providerFlagName = "provider"
	} else {
		providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
	}

	var providerFlagDefault string

	_ = cmd.PersistentFlags().String(providerFlagName, providerFlagDefault, providerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProviderUnderProjectFlags(depth int, m *models.ProviderUnderProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, defaultAdded := retrieveProviderUnderProjectDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, enabledAdded := retrieveProviderUnderProjectEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, idAdded := retrieveProviderUnderProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, providerAdded := retrieveProviderUnderProjectProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || providerAdded

	return nil, retAdded
}

func retrieveProviderUnderProjectDefaultFlags(depth int, m *models.ProviderUnderProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProviderUnderProjectEnabledFlags(depth int, m *models.ProviderUnderProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProviderUnderProjectIDFlags(depth int, m *models.ProviderUnderProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProviderUnderProjectProviderFlags(depth int, m *models.ProviderUnderProject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	providerFlagName := fmt.Sprintf("%v.provider", cmdPrefix)
	if cmd.Flags().Changed(providerFlagName) {

		var providerFlagName string
		if cmdPrefix == "" {
			providerFlagName = "provider"
		} else {
			providerFlagName = fmt.Sprintf("%v.provider", cmdPrefix)
		}

		providerFlagValue, err := cmd.Flags().GetString(providerFlagName)
		if err != nil {
			return err, false
		}
		m.Provider = providerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
