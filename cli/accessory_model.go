// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/strfmt"
	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Accessory

// register flags to command
func registerModelAccessoryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerAccessoryArtifactID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessoryCreationTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessoryDigest(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessoryIcon(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessoryID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessorySize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessorySubjectArtifactID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerAccessoryType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerAccessoryArtifactID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactIdDescription := `The artifact id of the accessory`

	var artifactIdFlagName string
	if cmdPrefix == "" {
		artifactIdFlagName = "artifact_id"
	} else {
		artifactIdFlagName = fmt.Sprintf("%v.artifact_id", cmdPrefix)
	}

	var artifactIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(artifactIdFlagName, artifactIdFlagDefault, artifactIdDescription)

	return nil
}

func registerAccessoryCreationTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	creationTimeDescription := `The creation time of the accessory`

	var creationTimeFlagName string
	if cmdPrefix == "" {
		creationTimeFlagName = "creation_time"
	} else {
		creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(creationTimeFlagName, "", creationTimeDescription)

	return nil
}

func registerAccessoryDigest(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	digestDescription := `The artifact digest of the accessory`

	var digestFlagName string
	if cmdPrefix == "" {
		digestFlagName = "digest"
	} else {
		digestFlagName = fmt.Sprintf("%v.digest", cmdPrefix)
	}

	var digestFlagDefault string

	_ = cmd.PersistentFlags().String(digestFlagName, digestFlagDefault, digestDescription)

	return nil
}

func registerAccessoryIcon(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	iconDescription := `The icon of the accessory`

	var iconFlagName string
	if cmdPrefix == "" {
		iconFlagName = "icon"
	} else {
		iconFlagName = fmt.Sprintf("%v.icon", cmdPrefix)
	}

	var iconFlagDefault string

	_ = cmd.PersistentFlags().String(iconFlagName, iconFlagDefault, iconDescription)

	return nil
}

func registerAccessoryID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `The ID of the accessory`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerAccessorySize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sizeDescription := `The artifact size of the accessory`

	var sizeFlagName string
	if cmdPrefix == "" {
		sizeFlagName = "size"
	} else {
		sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var sizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(sizeFlagName, sizeFlagDefault, sizeDescription)

	return nil
}

func registerAccessorySubjectArtifactID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	subjectArtifactIdDescription := `The subject artifact id of the accessory`

	var subjectArtifactIdFlagName string
	if cmdPrefix == "" {
		subjectArtifactIdFlagName = "subject_artifact_id"
	} else {
		subjectArtifactIdFlagName = fmt.Sprintf("%v.subject_artifact_id", cmdPrefix)
	}

	var subjectArtifactIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(subjectArtifactIdFlagName, subjectArtifactIdFlagDefault, subjectArtifactIdDescription)

	return nil
}

func registerAccessoryType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	typeDescription := `The artifact size of the accessory`

	var typeFlagName string
	if cmdPrefix == "" {
		typeFlagName = "type"
	} else {
		typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var typeFlagDefault string

	_ = cmd.PersistentFlags().String(typeFlagName, typeFlagDefault, typeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelAccessoryFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactIdAdded := retrieveAccessoryArtifactIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactIdAdded

	err, creationTimeAdded := retrieveAccessoryCreationTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || creationTimeAdded

	err, digestAdded := retrieveAccessoryDigestFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || digestAdded

	err, iconAdded := retrieveAccessoryIconFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || iconAdded

	err, idAdded := retrieveAccessoryIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, sizeAdded := retrieveAccessorySizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sizeAdded

	err, subjectArtifactIdAdded := retrieveAccessorySubjectArtifactIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || subjectArtifactIdAdded

	err, typeAdded := retrieveAccessoryTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || typeAdded

	return nil, retAdded
}

func retrieveAccessoryArtifactIDFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactIdFlagName := fmt.Sprintf("%v.artifact_id", cmdPrefix)
	if cmd.Flags().Changed(artifactIdFlagName) {

		var artifactIdFlagName string
		if cmdPrefix == "" {
			artifactIdFlagName = "artifact_id"
		} else {
			artifactIdFlagName = fmt.Sprintf("%v.artifact_id", cmdPrefix)
		}

		artifactIdFlagValue, err := cmd.Flags().GetInt64(artifactIdFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactID = artifactIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessoryCreationTimeFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	creationTimeFlagName := fmt.Sprintf("%v.creation_time", cmdPrefix)
	if cmd.Flags().Changed(creationTimeFlagName) {

		var creationTimeFlagName string
		if cmdPrefix == "" {
			creationTimeFlagName = "creation_time"
		} else {
			creationTimeFlagName = fmt.Sprintf("%v.creation_time", cmdPrefix)
		}

		creationTimeFlagValueStr, err := cmd.Flags().GetString(creationTimeFlagName)
		if err != nil {
			return err, false
		}
		var creationTimeFlagValue strfmt.DateTime
		if err := creationTimeFlagValue.UnmarshalText([]byte(creationTimeFlagValueStr)); err != nil {
			return err, false
		}
		m.CreationTime = creationTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessoryDigestFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	digestFlagName := fmt.Sprintf("%v.digest", cmdPrefix)
	if cmd.Flags().Changed(digestFlagName) {

		var digestFlagName string
		if cmdPrefix == "" {
			digestFlagName = "digest"
		} else {
			digestFlagName = fmt.Sprintf("%v.digest", cmdPrefix)
		}

		digestFlagValue, err := cmd.Flags().GetString(digestFlagName)
		if err != nil {
			return err, false
		}
		m.Digest = digestFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessoryIconFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	iconFlagName := fmt.Sprintf("%v.icon", cmdPrefix)
	if cmd.Flags().Changed(iconFlagName) {

		var iconFlagName string
		if cmdPrefix == "" {
			iconFlagName = "icon"
		} else {
			iconFlagName = fmt.Sprintf("%v.icon", cmdPrefix)
		}

		iconFlagValue, err := cmd.Flags().GetString(iconFlagName)
		if err != nil {
			return err, false
		}
		m.Icon = iconFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessoryIDFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessorySizeFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sizeFlagName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(sizeFlagName) {

		var sizeFlagName string
		if cmdPrefix == "" {
			sizeFlagName = "size"
		} else {
			sizeFlagName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		sizeFlagValue, err := cmd.Flags().GetInt64(sizeFlagName)
		if err != nil {
			return err, false
		}
		m.Size = sizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessorySubjectArtifactIDFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	subjectArtifactIdFlagName := fmt.Sprintf("%v.subject_artifact_id", cmdPrefix)
	if cmd.Flags().Changed(subjectArtifactIdFlagName) {

		var subjectArtifactIdFlagName string
		if cmdPrefix == "" {
			subjectArtifactIdFlagName = "subject_artifact_id"
		} else {
			subjectArtifactIdFlagName = fmt.Sprintf("%v.subject_artifact_id", cmdPrefix)
		}

		subjectArtifactIdFlagValue, err := cmd.Flags().GetInt64(subjectArtifactIdFlagName)
		if err != nil {
			return err, false
		}
		m.SubjectArtifactID = subjectArtifactIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveAccessoryTypeFlags(depth int, m *models.Accessory, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	typeFlagName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(typeFlagName) {

		var typeFlagName string
		if cmdPrefix == "" {
			typeFlagName = "type"
		} else {
			typeFlagName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		typeFlagValue, err := cmd.Flags().GetString(typeFlagName)
		if err != nil {
			return err, false
		}
		m.Type = typeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
