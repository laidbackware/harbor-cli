// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/artifact"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationArtifactListArtifactsCmd returns a cmd to handle operation listArtifacts
func makeOperationArtifactListArtifactsCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "listArtifacts",
		Short: `List artifacts under the specific project and repository. Except the basic properties, the other supported queries in 'q' includes 'tags=*' to list only tagged artifacts, 'tags=nil' to list only untagged artifacts, 'tags=~v' to list artifacts whose tag fuzzy matches 'v', 'tags=v' to list artifact whose tag exactly matches 'v', 'labels=(id1, id2)' to list artifacts that both labels with id1 and id2 are added to`,
		RunE:  runOperationArtifactListArtifacts,
	}

	if err := registerOperationArtifactListArtifactsParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationArtifactListArtifacts uses cmd flags to call endpoint api
func runOperationArtifactListArtifacts(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := artifact.NewListArtifactsParams()
	if err, _ := retrieveOperationArtifactListArtifactsXAcceptVulnerabilitiesFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsProjectNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsQFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsRepositoryNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsSortFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsWithImmutableStatusFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsWithLabelFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsWithScanOverviewFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsWithSignatureFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationArtifactListArtifactsWithTagFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationArtifactListArtifactsResult(appCli.Artifact.ListArtifacts(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationArtifactListArtifactsParamFlags registers all flags needed to fill params
func registerOperationArtifactListArtifactsParamFlags(cmd *cobra.Command) error {
	if err := registerOperationArtifactListArtifactsXAcceptVulnerabilitiesParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsProjectNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsQParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsRepositoryNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsSortParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsWithImmutableStatusParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsWithLabelParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsWithScanOverviewParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsWithSignatureParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationArtifactListArtifactsWithTagParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationArtifactListArtifactsXAcceptVulnerabilitiesParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xAcceptVulnerabilitiesDescription := `A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it.
Currently the mime type supports 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' and 'application/vnd.security.vulnerability.report; version=1.1'`

	var xAcceptVulnerabilitiesFlagName string
	if cmdPrefix == "" {
		xAcceptVulnerabilitiesFlagName = "X-Accept-Vulnerabilities"
	} else {
		xAcceptVulnerabilitiesFlagName = fmt.Sprintf("%v.X-Accept-Vulnerabilities", cmdPrefix)
	}

	var xAcceptVulnerabilitiesFlagDefault string = "application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0"

	_ = cmd.PersistentFlags().String(xAcceptVulnerabilitiesFlagName, xAcceptVulnerabilitiesFlagDefault, xAcceptVulnerabilitiesDescription)

	return nil
}
func registerOperationArtifactListArtifactsXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationArtifactListArtifactsPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `The page number`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationArtifactListArtifactsPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `The size of per page`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "page_size"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
	}

	var pageSizeFlagDefault int64 = 10

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}
func registerOperationArtifactListArtifactsProjectNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameDescription := `Required. The name of the project`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}
func registerOperationArtifactListArtifactsQParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	qDescription := `Query string to query resources. Supported query patterns are 'exact match(k=v)', 'fuzzy match(k=~v)', 'range(k=[min~max])', 'list with union releationship(k={v1 v2 v3})' and 'list with intersetion relationship(k=(v1 v2 v3))'. The value of range and list can be string(enclosed by ' or ), integer or time(in format '2020-04-09 02:36:00'). All of these query patterns should be put in the query string 'q=xxx' and splitted by ','. e.g. q=k1=v1,k2=~v2,k3=[min~max]`

	var qFlagName string
	if cmdPrefix == "" {
		qFlagName = "q"
	} else {
		qFlagName = fmt.Sprintf("%v.q", cmdPrefix)
	}

	var qFlagDefault string

	_ = cmd.PersistentFlags().String(qFlagName, qFlagDefault, qDescription)

	return nil
}
func registerOperationArtifactListArtifactsRepositoryNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	repositoryNameDescription := `Required. The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -> a%252Fb`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}
func registerOperationArtifactListArtifactsSortParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	sortDescription := `Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending orderr and field2 in descending order with 'sort=field1,-field2'`

	var sortFlagName string
	if cmdPrefix == "" {
		sortFlagName = "sort"
	} else {
		sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
	}

	var sortFlagDefault string

	_ = cmd.PersistentFlags().String(sortFlagName, sortFlagDefault, sortDescription)

	return nil
}
func registerOperationArtifactListArtifactsWithImmutableStatusParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withImmutableStatusDescription := `Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting 'with_tag=true'`

	var withImmutableStatusFlagName string
	if cmdPrefix == "" {
		withImmutableStatusFlagName = "with_immutable_status"
	} else {
		withImmutableStatusFlagName = fmt.Sprintf("%v.with_immutable_status", cmdPrefix)
	}

	var withImmutableStatusFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withImmutableStatusFlagName, withImmutableStatusFlagDefault, withImmutableStatusDescription)

	return nil
}
func registerOperationArtifactListArtifactsWithLabelParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withLabelDescription := `Specify whether the labels are included inside the returning artifacts`

	var withLabelFlagName string
	if cmdPrefix == "" {
		withLabelFlagName = "with_label"
	} else {
		withLabelFlagName = fmt.Sprintf("%v.with_label", cmdPrefix)
	}

	var withLabelFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withLabelFlagName, withLabelFlagDefault, withLabelDescription)

	return nil
}
func registerOperationArtifactListArtifactsWithScanOverviewParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withScanOverviewDescription := `Specify whether the scan overview is included inside the returning artifacts`

	var withScanOverviewFlagName string
	if cmdPrefix == "" {
		withScanOverviewFlagName = "with_scan_overview"
	} else {
		withScanOverviewFlagName = fmt.Sprintf("%v.with_scan_overview", cmdPrefix)
	}

	var withScanOverviewFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withScanOverviewFlagName, withScanOverviewFlagDefault, withScanOverviewDescription)

	return nil
}
func registerOperationArtifactListArtifactsWithSignatureParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withSignatureDescription := `Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting 'with_tag=true'`

	var withSignatureFlagName string
	if cmdPrefix == "" {
		withSignatureFlagName = "with_signature"
	} else {
		withSignatureFlagName = fmt.Sprintf("%v.with_signature", cmdPrefix)
	}

	var withSignatureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(withSignatureFlagName, withSignatureFlagDefault, withSignatureDescription)

	return nil
}
func registerOperationArtifactListArtifactsWithTagParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	withTagDescription := `Specify whether the tags are included inside the returning artifacts`

	var withTagFlagName string
	if cmdPrefix == "" {
		withTagFlagName = "with_tag"
	} else {
		withTagFlagName = fmt.Sprintf("%v.with_tag", cmdPrefix)
	}

	var withTagFlagDefault bool = true

	_ = cmd.PersistentFlags().Bool(withTagFlagName, withTagFlagDefault, withTagDescription)

	return nil
}

func retrieveOperationArtifactListArtifactsXAcceptVulnerabilitiesFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Accept-Vulnerabilities") {

		var xAcceptVulnerabilitiesFlagName string
		if cmdPrefix == "" {
			xAcceptVulnerabilitiesFlagName = "X-Accept-Vulnerabilities"
		} else {
			xAcceptVulnerabilitiesFlagName = fmt.Sprintf("%v.X-Accept-Vulnerabilities", cmdPrefix)
		}

		xAcceptVulnerabilitiesFlagValue, err := cmd.Flags().GetString(xAcceptVulnerabilitiesFlagName)
		if err != nil {
			return err, false
		}
		m.XAcceptVulnerabilities = &xAcceptVulnerabilitiesFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsXRequestIDFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsPageFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsPageSizeFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page_size") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "page_size"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.page_size", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsProjectNameFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name") {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsQFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("q") {

		var qFlagName string
		if cmdPrefix == "" {
			qFlagName = "q"
		} else {
			qFlagName = fmt.Sprintf("%v.q", cmdPrefix)
		}

		qFlagValue, err := cmd.Flags().GetString(qFlagName)
		if err != nil {
			return err, false
		}
		m.Q = &qFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsRepositoryNameFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("repository_name") {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsSortFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("sort") {

		var sortFlagName string
		if cmdPrefix == "" {
			sortFlagName = "sort"
		} else {
			sortFlagName = fmt.Sprintf("%v.sort", cmdPrefix)
		}

		sortFlagValue, err := cmd.Flags().GetString(sortFlagName)
		if err != nil {
			return err, false
		}
		m.Sort = &sortFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsWithImmutableStatusFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_immutable_status") {

		var withImmutableStatusFlagName string
		if cmdPrefix == "" {
			withImmutableStatusFlagName = "with_immutable_status"
		} else {
			withImmutableStatusFlagName = fmt.Sprintf("%v.with_immutable_status", cmdPrefix)
		}

		withImmutableStatusFlagValue, err := cmd.Flags().GetBool(withImmutableStatusFlagName)
		if err != nil {
			return err, false
		}
		m.WithImmutableStatus = &withImmutableStatusFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsWithLabelFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_label") {

		var withLabelFlagName string
		if cmdPrefix == "" {
			withLabelFlagName = "with_label"
		} else {
			withLabelFlagName = fmt.Sprintf("%v.with_label", cmdPrefix)
		}

		withLabelFlagValue, err := cmd.Flags().GetBool(withLabelFlagName)
		if err != nil {
			return err, false
		}
		m.WithLabel = &withLabelFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsWithScanOverviewFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_scan_overview") {

		var withScanOverviewFlagName string
		if cmdPrefix == "" {
			withScanOverviewFlagName = "with_scan_overview"
		} else {
			withScanOverviewFlagName = fmt.Sprintf("%v.with_scan_overview", cmdPrefix)
		}

		withScanOverviewFlagValue, err := cmd.Flags().GetBool(withScanOverviewFlagName)
		if err != nil {
			return err, false
		}
		m.WithScanOverview = &withScanOverviewFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsWithSignatureFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_signature") {

		var withSignatureFlagName string
		if cmdPrefix == "" {
			withSignatureFlagName = "with_signature"
		} else {
			withSignatureFlagName = fmt.Sprintf("%v.with_signature", cmdPrefix)
		}

		withSignatureFlagValue, err := cmd.Flags().GetBool(withSignatureFlagName)
		if err != nil {
			return err, false
		}
		m.WithSignature = &withSignatureFlagValue

	}
	return nil, retAdded
}
func retrieveOperationArtifactListArtifactsWithTagFlag(m *artifact.ListArtifactsParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("with_tag") {

		var withTagFlagName string
		if cmdPrefix == "" {
			withTagFlagName = "with_tag"
		} else {
			withTagFlagName = fmt.Sprintf("%v.with_tag", cmdPrefix)
		}

		withTagFlagValue, err := cmd.Flags().GetBool(withTagFlagName)
		if err != nil {
			return err, false
		}
		m.WithTag = &withTagFlagValue

	}
	return nil, retAdded
}

// parseOperationArtifactListArtifactsResult parses request result and return the string content
func parseOperationArtifactListArtifactsResult(resp0 *artifact.ListArtifactsOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*artifact.ListArtifactsOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*artifact.ListArtifactsBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*artifact.ListArtifactsUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*artifact.ListArtifactsForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*artifact.ListArtifactsNotFound)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*artifact.ListArtifactsInternalServerError)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
