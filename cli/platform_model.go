// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Platform

// register flags to command
func registerModelPlatformFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPlatformOsFeatures(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformOsVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformArchitecture(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformOs(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPlatformVariant(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPlatformOsFeatures(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: 'os.features' []string array type is not supported by go-swagger cli yet

	return nil
}

func registerPlatformOsVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	osVersionDescription := `The version of the OS that the artifact applys to`

	var osVersionFlagName string
	if cmdPrefix == "" {
		osVersionFlagName = "'os.version'"
	} else {
		osVersionFlagName = fmt.Sprintf("%v.'os.version'", cmdPrefix)
	}

	var osVersionFlagDefault string

	_ = cmd.PersistentFlags().String(osVersionFlagName, osVersionFlagDefault, osVersionDescription)

	return nil
}

func registerPlatformArchitecture(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	architectureDescription := `The architecture that the artifact applys to`

	var architectureFlagName string
	if cmdPrefix == "" {
		architectureFlagName = "architecture"
	} else {
		architectureFlagName = fmt.Sprintf("%v.architecture", cmdPrefix)
	}

	var architectureFlagDefault string

	_ = cmd.PersistentFlags().String(architectureFlagName, architectureFlagDefault, architectureDescription)

	return nil
}

func registerPlatformOs(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	osDescription := `The OS that the artifact applys to`

	var osFlagName string
	if cmdPrefix == "" {
		osFlagName = "os"
	} else {
		osFlagName = fmt.Sprintf("%v.os", cmdPrefix)
	}

	var osFlagDefault string

	_ = cmd.PersistentFlags().String(osFlagName, osFlagDefault, osDescription)

	return nil
}

func registerPlatformVariant(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	variantDescription := `The variant of the CPU`

	var variantFlagName string
	if cmdPrefix == "" {
		variantFlagName = "variant"
	} else {
		variantFlagName = fmt.Sprintf("%v.variant", cmdPrefix)
	}

	var variantFlagDefault string

	_ = cmd.PersistentFlags().String(variantFlagName, variantFlagDefault, variantDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPlatformFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, osFeaturesAdded := retrievePlatformOsFeaturesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || osFeaturesAdded

	err, osVersionAdded := retrievePlatformOsVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || osVersionAdded

	err, architectureAdded := retrievePlatformArchitectureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || architectureAdded

	err, osAdded := retrievePlatformOsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || osAdded

	err, variantAdded := retrievePlatformVariantFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || variantAdded

	return nil, retAdded
}

func retrievePlatformOsFeaturesFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	osFeaturesFlagName := fmt.Sprintf("%v.'os.features'", cmdPrefix)
	if cmd.Flags().Changed(osFeaturesFlagName) {
		// warning: 'os.features' array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrievePlatformOsVersionFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	osVersionFlagName := fmt.Sprintf("%v.'os.version'", cmdPrefix)
	if cmd.Flags().Changed(osVersionFlagName) {

		var osVersionFlagName string
		if cmdPrefix == "" {
			osVersionFlagName = "'os.version'"
		} else {
			osVersionFlagName = fmt.Sprintf("%v.'os.version'", cmdPrefix)
		}

		osVersionFlagValue, err := cmd.Flags().GetString(osVersionFlagName)
		if err != nil {
			return err, false
		}
		m.OsVersion = osVersionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlatformArchitectureFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	architectureFlagName := fmt.Sprintf("%v.architecture", cmdPrefix)
	if cmd.Flags().Changed(architectureFlagName) {

		var architectureFlagName string
		if cmdPrefix == "" {
			architectureFlagName = "architecture"
		} else {
			architectureFlagName = fmt.Sprintf("%v.architecture", cmdPrefix)
		}

		architectureFlagValue, err := cmd.Flags().GetString(architectureFlagName)
		if err != nil {
			return err, false
		}
		m.Architecture = architectureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlatformOsFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	osFlagName := fmt.Sprintf("%v.os", cmdPrefix)
	if cmd.Flags().Changed(osFlagName) {

		var osFlagName string
		if cmdPrefix == "" {
			osFlagName = "os"
		} else {
			osFlagName = fmt.Sprintf("%v.os", cmdPrefix)
		}

		osFlagValue, err := cmd.Flags().GetString(osFlagName)
		if err != nil {
			return err, false
		}
		m.Os = osFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePlatformVariantFlags(depth int, m *models.Platform, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	variantFlagName := fmt.Sprintf("%v.variant", cmdPrefix)
	if cmd.Flags().Changed(variantFlagName) {

		var variantFlagName string
		if cmdPrefix == "" {
			variantFlagName = "variant"
		} else {
			variantFlagName = fmt.Sprintf("%v.variant", cmdPrefix)
		}

		variantFlagValue, err := cmd.Flags().GetString(variantFlagName)
		if err != nil {
			return err, false
		}
		m.Variant = variantFlagValue

		retAdded = true
	}

	return nil, retAdded
}
