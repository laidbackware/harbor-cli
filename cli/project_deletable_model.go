// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ProjectDeletable

// register flags to command
func registerModelProjectDeletableFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerProjectDeletableDeletable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerProjectDeletableMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerProjectDeletableDeletable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	deletableDescription := `Whether the project can be deleted.`

	var deletableFlagName string
	if cmdPrefix == "" {
		deletableFlagName = "deletable"
	} else {
		deletableFlagName = fmt.Sprintf("%v.deletable", cmdPrefix)
	}

	var deletableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(deletableFlagName, deletableFlagDefault, deletableDescription)

	return nil
}

func registerProjectDeletableMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	messageDescription := `The detail message when the project can not be deleted.`

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelProjectDeletableFlags(depth int, m *models.ProjectDeletable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, deletableAdded := retrieveProjectDeletableDeletableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || deletableAdded

	err, messageAdded := retrieveProjectDeletableMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	return nil, retAdded
}

func retrieveProjectDeletableDeletableFlags(depth int, m *models.ProjectDeletable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	deletableFlagName := fmt.Sprintf("%v.deletable", cmdPrefix)
	if cmd.Flags().Changed(deletableFlagName) {

		var deletableFlagName string
		if cmdPrefix == "" {
			deletableFlagName = "deletable"
		} else {
			deletableFlagName = fmt.Sprintf("%v.deletable", cmdPrefix)
		}

		deletableFlagValue, err := cmd.Flags().GetBool(deletableFlagName)
		if err != nil {
			return err, false
		}
		m.Deletable = deletableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveProjectDeletableMessageFlags(depth int, m *models.ProjectDeletable, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = messageFlagValue

		retAdded = true
	}

	return nil, retAdded
}
