// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for ScannerAdapterMetadata

// register flags to command
func registerModelScannerAdapterMetadataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerScannerAdapterMetadataCapabilities(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerAdapterMetadataProperties(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerScannerAdapterMetadataScanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerScannerAdapterMetadataCapabilities(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: capabilities []*ScannerCapability array type is not supported by go-swagger cli yet

	return nil
}

func registerScannerAdapterMetadataProperties(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: properties map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerScannerAdapterMetadataScanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scannerFlagName string
	if cmdPrefix == "" {
		scannerFlagName = "scanner"
	} else {
		scannerFlagName = fmt.Sprintf("%v.scanner", cmdPrefix)
	}

	if err := registerModelScannerFlags(depth+1, scannerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelScannerAdapterMetadataFlags(depth int, m *models.ScannerAdapterMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, capabilitiesAdded := retrieveScannerAdapterMetadataCapabilitiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || capabilitiesAdded

	err, propertiesAdded := retrieveScannerAdapterMetadataPropertiesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || propertiesAdded

	err, scannerAdded := retrieveScannerAdapterMetadataScannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded

	return nil, retAdded
}

func retrieveScannerAdapterMetadataCapabilitiesFlags(depth int, m *models.ScannerAdapterMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	capabilitiesFlagName := fmt.Sprintf("%v.capabilities", cmdPrefix)
	if cmd.Flags().Changed(capabilitiesFlagName) {
		// warning: capabilities array type []*ScannerCapability is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveScannerAdapterMetadataPropertiesFlags(depth int, m *models.ScannerAdapterMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	propertiesFlagName := fmt.Sprintf("%v.properties", cmdPrefix)
	if cmd.Flags().Changed(propertiesFlagName) {
		// warning: properties map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveScannerAdapterMetadataScannerFlags(depth int, m *models.ScannerAdapterMetadata, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scannerFlagName := fmt.Sprintf("%v.scanner", cmdPrefix)
	if cmd.Flags().Changed(scannerFlagName) {
		// info: complex object scanner Scanner is retrieved outside this Changed() block
	}
	scannerFlagValue := m.Scanner
	if swag.IsZero(scannerFlagValue) {
		scannerFlagValue = &models.Scanner{}
	}

	err, scannerAdded := retrieveModelScannerFlags(depth+1, scannerFlagValue, scannerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scannerAdded
	if scannerAdded {
		m.Scanner = scannerFlagValue
	}

	return nil, retAdded
}
