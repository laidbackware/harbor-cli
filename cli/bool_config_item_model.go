// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for BoolConfigItem

// register flags to command
func registerModelBoolConfigItemFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerBoolConfigItemEditable(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerBoolConfigItemValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerBoolConfigItemEditable(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	editableDescription := `The configure item can be updated or not`

	var editableFlagName string
	if cmdPrefix == "" {
		editableFlagName = "editable"
	} else {
		editableFlagName = fmt.Sprintf("%v.editable", cmdPrefix)
	}

	var editableFlagDefault bool

	_ = cmd.PersistentFlags().Bool(editableFlagName, editableFlagDefault, editableDescription)

	return nil
}

func registerBoolConfigItemValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	valueDescription := `The boolean value of current config item`

	var valueFlagName string
	if cmdPrefix == "" {
		valueFlagName = "value"
	} else {
		valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var valueFlagDefault bool

	_ = cmd.PersistentFlags().Bool(valueFlagName, valueFlagDefault, valueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelBoolConfigItemFlags(depth int, m *models.BoolConfigItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, editableAdded := retrieveBoolConfigItemEditableFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || editableAdded

	err, valueAdded := retrieveBoolConfigItemValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || valueAdded

	return nil, retAdded
}

func retrieveBoolConfigItemEditableFlags(depth int, m *models.BoolConfigItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	editableFlagName := fmt.Sprintf("%v.editable", cmdPrefix)
	if cmd.Flags().Changed(editableFlagName) {

		var editableFlagName string
		if cmdPrefix == "" {
			editableFlagName = "editable"
		} else {
			editableFlagName = fmt.Sprintf("%v.editable", cmdPrefix)
		}

		editableFlagValue, err := cmd.Flags().GetBool(editableFlagName)
		if err != nil {
			return err, false
		}
		m.Editable = editableFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveBoolConfigItemValueFlags(depth int, m *models.BoolConfigItem, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	valueFlagName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(valueFlagName) {

		var valueFlagName string
		if cmdPrefix == "" {
			valueFlagName = "value"
		} else {
			valueFlagName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		valueFlagValue, err := cmd.Flags().GetBool(valueFlagName)
		if err != nil {
			return err, false
		}
		m.Value = valueFlagValue

		retAdded = true
	}

	return nil, retAdded
}
