// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for Instance

// register flags to command
func registerModelInstanceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerInstanceAuthInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceAuthMode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceEndpoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceInsecure(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceSetupTimestamp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerInstanceVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerInstanceAuthInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: auth_info map[string]string map type is not supported by go-swagger cli yet

	return nil
}

func registerInstanceAuthMode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	authModeDescription := `The authentication way supported`

	var authModeFlagName string
	if cmdPrefix == "" {
		authModeFlagName = "auth_mode"
	} else {
		authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
	}

	var authModeFlagDefault string

	_ = cmd.PersistentFlags().String(authModeFlagName, authModeFlagDefault, authModeDescription)

	return nil
}

func registerInstanceDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	defaultDescription := `Whether the instance is default or not`

	var defaultFlagName string
	if cmdPrefix == "" {
		defaultFlagName = "default"
	} else {
		defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
	}

	var defaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(defaultFlagName, defaultFlagDefault, defaultDescription)

	return nil
}

func registerInstanceDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description of instance`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerInstanceEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Whether the instance is activated or not`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerInstanceEndpoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endpointDescription := `The service endpoint of this instance`

	var endpointFlagName string
	if cmdPrefix == "" {
		endpointFlagName = "endpoint"
	} else {
		endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
	}

	var endpointFlagDefault string

	_ = cmd.PersistentFlags().String(endpointFlagName, endpointFlagDefault, endpointDescription)

	return nil
}

func registerInstanceID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `Unique ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerInstanceInsecure(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	insecureDescription := `Whether the instance endpoint is insecure or not`

	var insecureFlagName string
	if cmdPrefix == "" {
		insecureFlagName = "insecure"
	} else {
		insecureFlagName = fmt.Sprintf("%v.insecure", cmdPrefix)
	}

	var insecureFlagDefault bool

	_ = cmd.PersistentFlags().Bool(insecureFlagName, insecureFlagDefault, insecureDescription)

	return nil
}

func registerInstanceName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Instance name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerInstanceSetupTimestamp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	setupTimestampDescription := `The timestamp of instance setting up`

	var setupTimestampFlagName string
	if cmdPrefix == "" {
		setupTimestampFlagName = "setup_timestamp"
	} else {
		setupTimestampFlagName = fmt.Sprintf("%v.setup_timestamp", cmdPrefix)
	}

	var setupTimestampFlagDefault int64

	_ = cmd.PersistentFlags().Int64(setupTimestampFlagName, setupTimestampFlagDefault, setupTimestampDescription)

	return nil
}

func registerInstanceStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := `The health status`

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerInstanceVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vendorDescription := `Based on which driver, identified by ID`

	var vendorFlagName string
	if cmdPrefix == "" {
		vendorFlagName = "vendor"
	} else {
		vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
	}

	var vendorFlagDefault string

	_ = cmd.PersistentFlags().String(vendorFlagName, vendorFlagDefault, vendorDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelInstanceFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, authInfoAdded := retrieveInstanceAuthInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authInfoAdded

	err, authModeAdded := retrieveInstanceAuthModeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || authModeAdded

	err, defaultAdded := retrieveInstanceDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || defaultAdded

	err, descriptionAdded := retrieveInstanceDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, enabledAdded := retrieveInstanceEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, endpointAdded := retrieveInstanceEndpointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endpointAdded

	err, idAdded := retrieveInstanceIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, insecureAdded := retrieveInstanceInsecureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || insecureAdded

	err, nameAdded := retrieveInstanceNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, setupTimestampAdded := retrieveInstanceSetupTimestampFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || setupTimestampAdded

	err, statusAdded := retrieveInstanceStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, vendorAdded := retrieveInstanceVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vendorAdded

	return nil, retAdded
}

func retrieveInstanceAuthInfoFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authInfoFlagName := fmt.Sprintf("%v.auth_info", cmdPrefix)
	if cmd.Flags().Changed(authInfoFlagName) {
		// warning: auth_info map type map[string]string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveInstanceAuthModeFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	authModeFlagName := fmt.Sprintf("%v.auth_mode", cmdPrefix)
	if cmd.Flags().Changed(authModeFlagName) {

		var authModeFlagName string
		if cmdPrefix == "" {
			authModeFlagName = "auth_mode"
		} else {
			authModeFlagName = fmt.Sprintf("%v.auth_mode", cmdPrefix)
		}

		authModeFlagValue, err := cmd.Flags().GetString(authModeFlagName)
		if err != nil {
			return err, false
		}
		m.AuthMode = authModeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceDefaultFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	defaultFlagName := fmt.Sprintf("%v.default", cmdPrefix)
	if cmd.Flags().Changed(defaultFlagName) {

		var defaultFlagName string
		if cmdPrefix == "" {
			defaultFlagName = "default"
		} else {
			defaultFlagName = fmt.Sprintf("%v.default", cmdPrefix)
		}

		defaultFlagValue, err := cmd.Flags().GetBool(defaultFlagName)
		if err != nil {
			return err, false
		}
		m.Default = defaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceDescriptionFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceEnabledFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceEndpointFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endpointFlagName := fmt.Sprintf("%v.endpoint", cmdPrefix)
	if cmd.Flags().Changed(endpointFlagName) {

		var endpointFlagName string
		if cmdPrefix == "" {
			endpointFlagName = "endpoint"
		} else {
			endpointFlagName = fmt.Sprintf("%v.endpoint", cmdPrefix)
		}

		endpointFlagValue, err := cmd.Flags().GetString(endpointFlagName)
		if err != nil {
			return err, false
		}
		m.Endpoint = endpointFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceIDFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceInsecureFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	insecureFlagName := fmt.Sprintf("%v.insecure", cmdPrefix)
	if cmd.Flags().Changed(insecureFlagName) {

		var insecureFlagName string
		if cmdPrefix == "" {
			insecureFlagName = "insecure"
		} else {
			insecureFlagName = fmt.Sprintf("%v.insecure", cmdPrefix)
		}

		insecureFlagValue, err := cmd.Flags().GetBool(insecureFlagName)
		if err != nil {
			return err, false
		}
		m.Insecure = insecureFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceNameFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceSetupTimestampFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	setupTimestampFlagName := fmt.Sprintf("%v.setup_timestamp", cmdPrefix)
	if cmd.Flags().Changed(setupTimestampFlagName) {

		var setupTimestampFlagName string
		if cmdPrefix == "" {
			setupTimestampFlagName = "setup_timestamp"
		} else {
			setupTimestampFlagName = fmt.Sprintf("%v.setup_timestamp", cmdPrefix)
		}

		setupTimestampFlagValue, err := cmd.Flags().GetInt64(setupTimestampFlagName)
		if err != nil {
			return err, false
		}
		m.SetupTimestamp = setupTimestampFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceStatusFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveInstanceVendorFlags(depth int, m *models.Instance, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vendorFlagName := fmt.Sprintf("%v.vendor", cmdPrefix)
	if cmd.Flags().Changed(vendorFlagName) {

		var vendorFlagName string
		if cmdPrefix == "" {
			vendorFlagName = "vendor"
		} else {
			vendorFlagName = fmt.Sprintf("%v.vendor", cmdPrefix)
		}

		vendorFlagValue, err := cmd.Flags().GetString(vendorFlagName)
		if err != nil {
			return err, false
		}
		m.Vendor = vendorFlagValue

		retAdded = true
	}

	return nil, retAdded
}
