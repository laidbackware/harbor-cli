// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IsDefault

// register flags to command
func registerModelIsDefaultFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIsDefaultIsDefault(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIsDefaultIsDefault(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	isDefaultDescription := `A flag indicating whether a scanner registration is default.`

	var isDefaultFlagName string
	if cmdPrefix == "" {
		isDefaultFlagName = "is_default"
	} else {
		isDefaultFlagName = fmt.Sprintf("%v.is_default", cmdPrefix)
	}

	var isDefaultFlagDefault bool

	_ = cmd.PersistentFlags().Bool(isDefaultFlagName, isDefaultFlagDefault, isDefaultDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIsDefaultFlags(depth int, m *models.IsDefault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, isDefaultAdded := retrieveIsDefaultIsDefaultFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || isDefaultAdded

	return nil, retAdded
}

func retrieveIsDefaultIsDefaultFlags(depth int, m *models.IsDefault, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	isDefaultFlagName := fmt.Sprintf("%v.is_default", cmdPrefix)
	if cmd.Flags().Changed(isDefaultFlagName) {

		var isDefaultFlagName string
		if cmdPrefix == "" {
			isDefaultFlagName = "is_default"
		} else {
			isDefaultFlagName = fmt.Sprintf("%v.is_default", cmdPrefix)
		}

		isDefaultFlagValue, err := cmd.Flags().GetBool(isDefaultFlagName)
		if err != nil {
			return err, false
		}
		m.IsDefault = isDefaultFlagValue

		retAdded = true
	}

	return nil, retAdded
}
