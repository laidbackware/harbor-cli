// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for UserSysAdminFlag

// register flags to command
func registerModelUserSysAdminFlagFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerUserSysAdminFlagSysadminFlag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerUserSysAdminFlagSysadminFlag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sysadminFlagDescription := `true-admin, false-not admin.`

	var sysadminFlagFlagName string
	if cmdPrefix == "" {
		sysadminFlagFlagName = "sysadmin_flag"
	} else {
		sysadminFlagFlagName = fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
	}

	var sysadminFlagFlagDefault bool

	_ = cmd.PersistentFlags().Bool(sysadminFlagFlagName, sysadminFlagFlagDefault, sysadminFlagDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelUserSysAdminFlagFlags(depth int, m *models.UserSysAdminFlag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, sysadminFlagAdded := retrieveUserSysAdminFlagSysadminFlagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sysadminFlagAdded

	return nil, retAdded
}

func retrieveUserSysAdminFlagSysadminFlagFlags(depth int, m *models.UserSysAdminFlag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sysadminFlagFlagName := fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
	if cmd.Flags().Changed(sysadminFlagFlagName) {

		var sysadminFlagFlagName string
		if cmdPrefix == "" {
			sysadminFlagFlagName = "sysadmin_flag"
		} else {
			sysadminFlagFlagName = fmt.Sprintf("%v.sysadmin_flag", cmdPrefix)
		}

		sysadminFlagFlagValue, err := cmd.Flags().GetBool(sysadminFlagFlagName)
		if err != nil {
			return err, false
		}
		m.SysadminFlag = sysadminFlagFlagValue

		retAdded = true
	}

	return nil, retAdded
}
