// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/spf13/cobra"
)

// Schema cli for RetentionPolicy

// register flags to command
func registerModelRetentionPolicyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionPolicyAlgorithm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionPolicyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionPolicyRules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionPolicyScope(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionPolicyTrigger(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionPolicyAlgorithm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	algorithmDescription := ``

	var algorithmFlagName string
	if cmdPrefix == "" {
		algorithmFlagName = "algorithm"
	} else {
		algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
	}

	var algorithmFlagDefault string

	_ = cmd.PersistentFlags().String(algorithmFlagName, algorithmFlagDefault, algorithmDescription)

	return nil
}

func registerRetentionPolicyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRetentionPolicyRules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: rules []*RetentionRule array type is not supported by go-swagger cli yet

	return nil
}

func registerRetentionPolicyScope(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var scopeFlagName string
	if cmdPrefix == "" {
		scopeFlagName = "scope"
	} else {
		scopeFlagName = fmt.Sprintf("%v.scope", cmdPrefix)
	}

	if err := registerModelRetentionPolicyScopeFlags(depth+1, scopeFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionPolicyTrigger(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var triggerFlagName string
	if cmdPrefix == "" {
		triggerFlagName = "trigger"
	} else {
		triggerFlagName = fmt.Sprintf("%v.trigger", cmdPrefix)
	}

	if err := registerModelRetentionRuleTriggerFlags(depth+1, triggerFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionPolicyFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, algorithmAdded := retrieveRetentionPolicyAlgorithmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || algorithmAdded

	err, idAdded := retrieveRetentionPolicyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, rulesAdded := retrieveRetentionPolicyRulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rulesAdded

	err, scopeAdded := retrieveRetentionPolicyScopeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded

	err, triggerAdded := retrieveRetentionPolicyTriggerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded

	return nil, retAdded
}

func retrieveRetentionPolicyAlgorithmFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	algorithmFlagName := fmt.Sprintf("%v.algorithm", cmdPrefix)
	if cmd.Flags().Changed(algorithmFlagName) {

		var algorithmFlagName string
		if cmdPrefix == "" {
			algorithmFlagName = "algorithm"
		} else {
			algorithmFlagName = fmt.Sprintf("%v.algorithm", cmdPrefix)
		}

		algorithmFlagValue, err := cmd.Flags().GetString(algorithmFlagName)
		if err != nil {
			return err, false
		}
		m.Algorithm = algorithmFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionPolicyIDFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionPolicyRulesFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rulesFlagName := fmt.Sprintf("%v.rules", cmdPrefix)
	if cmd.Flags().Changed(rulesFlagName) {
		// warning: rules array type []*RetentionRule is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRetentionPolicyScopeFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	scopeFlagName := fmt.Sprintf("%v.scope", cmdPrefix)
	if cmd.Flags().Changed(scopeFlagName) {
		// info: complex object scope RetentionPolicyScope is retrieved outside this Changed() block
	}
	scopeFlagValue := m.Scope
	if swag.IsZero(scopeFlagValue) {
		scopeFlagValue = &models.RetentionPolicyScope{}
	}

	err, scopeAdded := retrieveModelRetentionPolicyScopeFlags(depth+1, scopeFlagValue, scopeFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || scopeAdded
	if scopeAdded {
		m.Scope = scopeFlagValue
	}

	return nil, retAdded
}

func retrieveRetentionPolicyTriggerFlags(depth int, m *models.RetentionPolicy, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	triggerFlagName := fmt.Sprintf("%v.trigger", cmdPrefix)
	if cmd.Flags().Changed(triggerFlagName) {
		// info: complex object trigger RetentionRuleTrigger is retrieved outside this Changed() block
	}
	triggerFlagValue := m.Trigger
	if swag.IsZero(triggerFlagValue) {
		triggerFlagValue = &models.RetentionRuleTrigger{}
	}

	err, triggerAdded := retrieveModelRetentionRuleTriggerFlags(depth+1, triggerFlagValue, triggerFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || triggerAdded
	if triggerAdded {
		m.Trigger = triggerFlagValue
	}

	return nil, retAdded
}
