// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SearchRepository

// register flags to command
func registerModelSearchRepositoryFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSearchRepositoryArtifactCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchRepositoryProjectID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchRepositoryProjectName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchRepositoryProjectPublic(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchRepositoryPullCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSearchRepositoryRepositoryName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSearchRepositoryArtifactCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	artifactCountDescription := `The count of artifacts in the repository`

	var artifactCountFlagName string
	if cmdPrefix == "" {
		artifactCountFlagName = "artifact_count"
	} else {
		artifactCountFlagName = fmt.Sprintf("%v.artifact_count", cmdPrefix)
	}

	var artifactCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(artifactCountFlagName, artifactCountFlagDefault, artifactCountDescription)

	return nil
}

func registerSearchRepositoryProjectID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectIdDescription := `The ID of the project that the repository belongs to`

	var projectIdFlagName string
	if cmdPrefix == "" {
		projectIdFlagName = "project_id"
	} else {
		projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
	}

	var projectIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(projectIdFlagName, projectIdFlagDefault, projectIdDescription)

	return nil
}

func registerSearchRepositoryProjectName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectNameDescription := `The name of the project that the repository belongs to`

	var projectNameFlagName string
	if cmdPrefix == "" {
		projectNameFlagName = "project_name"
	} else {
		projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
	}

	var projectNameFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameFlagName, projectNameFlagDefault, projectNameDescription)

	return nil
}

func registerSearchRepositoryProjectPublic(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	projectPublicDescription := `The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)`

	var projectPublicFlagName string
	if cmdPrefix == "" {
		projectPublicFlagName = "project_public"
	} else {
		projectPublicFlagName = fmt.Sprintf("%v.project_public", cmdPrefix)
	}

	var projectPublicFlagDefault bool

	_ = cmd.PersistentFlags().Bool(projectPublicFlagName, projectPublicFlagDefault, projectPublicDescription)

	return nil
}

func registerSearchRepositoryPullCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pullCountDescription := `The count how many times the repository is pulled`

	var pullCountFlagName string
	if cmdPrefix == "" {
		pullCountFlagName = "pull_count"
	} else {
		pullCountFlagName = fmt.Sprintf("%v.pull_count", cmdPrefix)
	}

	var pullCountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pullCountFlagName, pullCountFlagDefault, pullCountDescription)

	return nil
}

func registerSearchRepositoryRepositoryName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryNameDescription := `The name of the repository`

	var repositoryNameFlagName string
	if cmdPrefix == "" {
		repositoryNameFlagName = "repository_name"
	} else {
		repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
	}

	var repositoryNameFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryNameFlagName, repositoryNameFlagDefault, repositoryNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSearchRepositoryFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, artifactCountAdded := retrieveSearchRepositoryArtifactCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || artifactCountAdded

	err, projectIdAdded := retrieveSearchRepositoryProjectIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectIdAdded

	err, projectNameAdded := retrieveSearchRepositoryProjectNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectNameAdded

	err, projectPublicAdded := retrieveSearchRepositoryProjectPublicFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || projectPublicAdded

	err, pullCountAdded := retrieveSearchRepositoryPullCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pullCountAdded

	err, repositoryNameAdded := retrieveSearchRepositoryRepositoryNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryNameAdded

	return nil, retAdded
}

func retrieveSearchRepositoryArtifactCountFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	artifactCountFlagName := fmt.Sprintf("%v.artifact_count", cmdPrefix)
	if cmd.Flags().Changed(artifactCountFlagName) {

		var artifactCountFlagName string
		if cmdPrefix == "" {
			artifactCountFlagName = "artifact_count"
		} else {
			artifactCountFlagName = fmt.Sprintf("%v.artifact_count", cmdPrefix)
		}

		artifactCountFlagValue, err := cmd.Flags().GetInt64(artifactCountFlagName)
		if err != nil {
			return err, false
		}
		m.ArtifactCount = artifactCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchRepositoryProjectIDFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectIdFlagName := fmt.Sprintf("%v.project_id", cmdPrefix)
	if cmd.Flags().Changed(projectIdFlagName) {

		var projectIdFlagName string
		if cmdPrefix == "" {
			projectIdFlagName = "project_id"
		} else {
			projectIdFlagName = fmt.Sprintf("%v.project_id", cmdPrefix)
		}

		projectIdFlagValue, err := cmd.Flags().GetInt64(projectIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectID = projectIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchRepositoryProjectNameFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectNameFlagName := fmt.Sprintf("%v.project_name", cmdPrefix)
	if cmd.Flags().Changed(projectNameFlagName) {

		var projectNameFlagName string
		if cmdPrefix == "" {
			projectNameFlagName = "project_name"
		} else {
			projectNameFlagName = fmt.Sprintf("%v.project_name", cmdPrefix)
		}

		projectNameFlagValue, err := cmd.Flags().GetString(projectNameFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectName = projectNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchRepositoryProjectPublicFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	projectPublicFlagName := fmt.Sprintf("%v.project_public", cmdPrefix)
	if cmd.Flags().Changed(projectPublicFlagName) {

		var projectPublicFlagName string
		if cmdPrefix == "" {
			projectPublicFlagName = "project_public"
		} else {
			projectPublicFlagName = fmt.Sprintf("%v.project_public", cmdPrefix)
		}

		projectPublicFlagValue, err := cmd.Flags().GetBool(projectPublicFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectPublic = projectPublicFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchRepositoryPullCountFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pullCountFlagName := fmt.Sprintf("%v.pull_count", cmdPrefix)
	if cmd.Flags().Changed(pullCountFlagName) {

		var pullCountFlagName string
		if cmdPrefix == "" {
			pullCountFlagName = "pull_count"
		} else {
			pullCountFlagName = fmt.Sprintf("%v.pull_count", cmdPrefix)
		}

		pullCountFlagValue, err := cmd.Flags().GetInt64(pullCountFlagName)
		if err != nil {
			return err, false
		}
		m.PullCount = pullCountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSearchRepositoryRepositoryNameFlags(depth int, m *models.SearchRepository, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryNameFlagName := fmt.Sprintf("%v.repository_name", cmdPrefix)
	if cmd.Flags().Changed(repositoryNameFlagName) {

		var repositoryNameFlagName string
		if cmdPrefix == "" {
			repositoryNameFlagName = "repository_name"
		} else {
			repositoryNameFlagName = fmt.Sprintf("%v.repository_name", cmdPrefix)
		}

		repositoryNameFlagValue, err := cmd.Flags().GetString(repositoryNameFlagName)
		if err != nil {
			return err, false
		}
		m.RepositoryName = repositoryNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
