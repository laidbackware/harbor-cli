// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RobotPermission

// register flags to command
func registerModelRobotPermissionFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRobotPermissionAccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRobotPermissionKind(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRobotPermissionNamespace(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRobotPermissionAccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: access []*Access array type is not supported by go-swagger cli yet

	return nil
}

func registerRobotPermissionKind(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	kindDescription := `The kind of the permission`

	var kindFlagName string
	if cmdPrefix == "" {
		kindFlagName = "kind"
	} else {
		kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
	}

	var kindFlagDefault string

	_ = cmd.PersistentFlags().String(kindFlagName, kindFlagDefault, kindDescription)

	return nil
}

func registerRobotPermissionNamespace(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	namespaceDescription := `The namespace of the permission`

	var namespaceFlagName string
	if cmdPrefix == "" {
		namespaceFlagName = "namespace"
	} else {
		namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
	}

	var namespaceFlagDefault string

	_ = cmd.PersistentFlags().String(namespaceFlagName, namespaceFlagDefault, namespaceDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRobotPermissionFlags(depth int, m *models.RobotPermission, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, accessAdded := retrieveRobotPermissionAccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || accessAdded

	err, kindAdded := retrieveRobotPermissionKindFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || kindAdded

	err, namespaceAdded := retrieveRobotPermissionNamespaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || namespaceAdded

	return nil, retAdded
}

func retrieveRobotPermissionAccessFlags(depth int, m *models.RobotPermission, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	accessFlagName := fmt.Sprintf("%v.access", cmdPrefix)
	if cmd.Flags().Changed(accessFlagName) {
		// warning: access array type []*Access is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveRobotPermissionKindFlags(depth int, m *models.RobotPermission, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	kindFlagName := fmt.Sprintf("%v.kind", cmdPrefix)
	if cmd.Flags().Changed(kindFlagName) {

		var kindFlagName string
		if cmdPrefix == "" {
			kindFlagName = "kind"
		} else {
			kindFlagName = fmt.Sprintf("%v.kind", cmdPrefix)
		}

		kindFlagValue, err := cmd.Flags().GetString(kindFlagName)
		if err != nil {
			return err, false
		}
		m.Kind = kindFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRobotPermissionNamespaceFlags(depth int, m *models.RobotPermission, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	namespaceFlagName := fmt.Sprintf("%v.namespace", cmdPrefix)
	if cmd.Flags().Changed(namespaceFlagName) {

		var namespaceFlagName string
		if cmdPrefix == "" {
			namespaceFlagName = "namespace"
		} else {
			namespaceFlagName = fmt.Sprintf("%v.namespace", cmdPrefix)
		}

		namespaceFlagValue, err := cmd.Flags().GetString(namespaceFlagName)
		if err != nil {
			return err, false
		}
		m.Namespace = namespaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}
