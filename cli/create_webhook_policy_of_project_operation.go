// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/laidbackware/harbor-cli/client/webhook"
	"github.com/laidbackware/harbor-cli/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationWebhookCreateWebhookPolicyOfProjectCmd returns a cmd to handle operation createWebhookPolicyOfProject
func makeOperationWebhookCreateWebhookPolicyOfProjectCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "CreateWebhookPolicyOfProject",
		Short: `This endpoint create a webhook policy if the project does not have one.
`,
		RunE: runOperationWebhookCreateWebhookPolicyOfProject,
	}

	if err := registerOperationWebhookCreateWebhookPolicyOfProjectParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationWebhookCreateWebhookPolicyOfProject uses cmd flags to call endpoint api
func runOperationWebhookCreateWebhookPolicyOfProject(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := webhook.NewCreateWebhookPolicyOfProjectParams()
	if err, _ := retrieveOperationWebhookCreateWebhookPolicyOfProjectXIsResourceNameFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebhookCreateWebhookPolicyOfProjectXRequestIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebhookCreateWebhookPolicyOfProjectPolicyFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationWebhookCreateWebhookPolicyOfProjectProjectNameOrIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationWebhookCreateWebhookPolicyOfProjectResult(appCli.Webhook.CreateWebhookPolicyOfProject(params, nil))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationWebhookCreateWebhookPolicyOfProjectParamFlags registers all flags needed to fill params
func registerOperationWebhookCreateWebhookPolicyOfProjectParamFlags(cmd *cobra.Command) error {
	if err := registerOperationWebhookCreateWebhookPolicyOfProjectXIsResourceNameParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebhookCreateWebhookPolicyOfProjectXRequestIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebhookCreateWebhookPolicyOfProjectPolicyParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationWebhookCreateWebhookPolicyOfProjectProjectNameOrIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationWebhookCreateWebhookPolicyOfProjectXIsResourceNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xIsResourceNameDescription := `The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.`

	var xIsResourceNameFlagName string
	if cmdPrefix == "" {
		xIsResourceNameFlagName = "X-Is-Resource-Name"
	} else {
		xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
	}

	var xIsResourceNameFlagDefault bool

	_ = cmd.PersistentFlags().Bool(xIsResourceNameFlagName, xIsResourceNameFlagDefault, xIsResourceNameDescription)

	return nil
}
func registerOperationWebhookCreateWebhookPolicyOfProjectXRequestIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	xRequestIdDescription := `An unique ID for the request`

	var xRequestIdFlagName string
	if cmdPrefix == "" {
		xRequestIdFlagName = "X-Request-Id"
	} else {
		xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
	}

	var xRequestIdFlagDefault string

	_ = cmd.PersistentFlags().String(xRequestIdFlagName, xRequestIdFlagDefault, xRequestIdDescription)

	return nil
}
func registerOperationWebhookCreateWebhookPolicyOfProjectPolicyParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var policyFlagName string
	if cmdPrefix == "" {
		policyFlagName = "policy"
	} else {
		policyFlagName = fmt.Sprintf("%v.policy", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(policyFlagName, "", "Optional json string for [policy]. Properties 'targets' and 'event_types' needed.")

	// add flags for body
	if err := registerModelWebhookPolicyFlags(0, "webhookPolicy", cmd); err != nil {
		return err
	}

	return nil
}
func registerOperationWebhookCreateWebhookPolicyOfProjectProjectNameOrIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	projectNameOrIdDescription := `Required. The name or id of the project`

	var projectNameOrIdFlagName string
	if cmdPrefix == "" {
		projectNameOrIdFlagName = "project_name_or_id"
	} else {
		projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
	}

	var projectNameOrIdFlagDefault string

	_ = cmd.PersistentFlags().String(projectNameOrIdFlagName, projectNameOrIdFlagDefault, projectNameOrIdDescription)

	return nil
}

func retrieveOperationWebhookCreateWebhookPolicyOfProjectXIsResourceNameFlag(m *webhook.CreateWebhookPolicyOfProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Is-Resource-Name") {

		var xIsResourceNameFlagName string
		if cmdPrefix == "" {
			xIsResourceNameFlagName = "X-Is-Resource-Name"
		} else {
			xIsResourceNameFlagName = fmt.Sprintf("%v.X-Is-Resource-Name", cmdPrefix)
		}

		xIsResourceNameFlagValue, err := cmd.Flags().GetBool(xIsResourceNameFlagName)
		if err != nil {
			return err, false
		}
		m.XIsResourceName = &xIsResourceNameFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebhookCreateWebhookPolicyOfProjectXRequestIDFlag(m *webhook.CreateWebhookPolicyOfProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("X-Request-Id") {

		var xRequestIdFlagName string
		if cmdPrefix == "" {
			xRequestIdFlagName = "X-Request-Id"
		} else {
			xRequestIdFlagName = fmt.Sprintf("%v.X-Request-Id", cmdPrefix)
		}

		xRequestIdFlagValue, err := cmd.Flags().GetString(xRequestIdFlagName)
		if err != nil {
			return err, false
		}
		m.XRequestID = &xRequestIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationWebhookCreateWebhookPolicyOfProjectPolicyFlag(m *webhook.CreateWebhookPolicyOfProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("policy") {
		// Read policy string from cmd and unmarshal
		policyValueStr, err := cmd.Flags().GetString("policy")
		if err != nil {
			return err, false
		}

		policyValue := models.WebhookPolicy{}
		if err := json.Unmarshal([]byte(policyValueStr), &policyValue); err != nil {
			return fmt.Errorf("cannot unmarshal policy string in models.WebhookPolicy: %v", err), false
		}
		m.Policy = &policyValue
	}
	policyValueModel := m.Policy
	if swag.IsZero(policyValueModel) {
		policyValueModel = &models.WebhookPolicy{}
	}
	err, added := retrieveModelWebhookPolicyFlags(0, policyValueModel, "webhookPolicy", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Policy = policyValueModel
	}
	if dryRun && debug {

		policyValueDebugBytes, err := json.Marshal(m.Policy)
		if err != nil {
			return err, false
		}
		logDebugf("Policy dry-run payload: %v", string(policyValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}
func retrieveOperationWebhookCreateWebhookPolicyOfProjectProjectNameOrIDFlag(m *webhook.CreateWebhookPolicyOfProjectParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("project_name_or_id") {

		var projectNameOrIdFlagName string
		if cmdPrefix == "" {
			projectNameOrIdFlagName = "project_name_or_id"
		} else {
			projectNameOrIdFlagName = fmt.Sprintf("%v.project_name_or_id", cmdPrefix)
		}

		projectNameOrIdFlagValue, err := cmd.Flags().GetString(projectNameOrIdFlagName)
		if err != nil {
			return err, false
		}
		m.ProjectNameOrID = projectNameOrIdFlagValue

	}
	return nil, retAdded
}

// parseOperationWebhookCreateWebhookPolicyOfProjectResult parses request result and return the string content
func parseOperationWebhookCreateWebhookPolicyOfProjectResult(resp0 *webhook.CreateWebhookPolicyOfProjectCreated, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning createWebhookPolicyOfProjectCreated is not supported

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*webhook.CreateWebhookPolicyOfProjectBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*webhook.CreateWebhookPolicyOfProjectUnauthorized)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*webhook.CreateWebhookPolicyOfProjectForbidden)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*webhook.CreateWebhookPolicyOfProjectInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	// warning: non schema response createWebhookPolicyOfProjectCreated is not supported by go-swagger cli yet.

	return "", nil
}
