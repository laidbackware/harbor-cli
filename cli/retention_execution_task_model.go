// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/laidbackware/harbor-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for RetentionExecutionTask

// register flags to command
func registerModelRetentionExecutionTaskFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerRetentionExecutionTaskEndTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskExecutionID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskJobID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskRepository(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskRetained(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskStartTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskStatusCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskStatusRevision(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerRetentionExecutionTaskTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerRetentionExecutionTaskEndTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	endTimeDescription := ``

	var endTimeFlagName string
	if cmdPrefix == "" {
		endTimeFlagName = "end_time"
	} else {
		endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
	}

	var endTimeFlagDefault string

	_ = cmd.PersistentFlags().String(endTimeFlagName, endTimeFlagDefault, endTimeDescription)

	return nil
}

func registerRetentionExecutionTaskExecutionID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	executionIdDescription := ``

	var executionIdFlagName string
	if cmdPrefix == "" {
		executionIdFlagName = "execution_id"
	} else {
		executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
	}

	var executionIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(executionIdFlagName, executionIdFlagDefault, executionIdDescription)

	return nil
}

func registerRetentionExecutionTaskID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := ``

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault int64

	_ = cmd.PersistentFlags().Int64(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerRetentionExecutionTaskJobID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	jobIdDescription := ``

	var jobIdFlagName string
	if cmdPrefix == "" {
		jobIdFlagName = "job_id"
	} else {
		jobIdFlagName = fmt.Sprintf("%v.job_id", cmdPrefix)
	}

	var jobIdFlagDefault string

	_ = cmd.PersistentFlags().String(jobIdFlagName, jobIdFlagDefault, jobIdDescription)

	return nil
}

func registerRetentionExecutionTaskRepository(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	repositoryDescription := ``

	var repositoryFlagName string
	if cmdPrefix == "" {
		repositoryFlagName = "repository"
	} else {
		repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
	}

	var repositoryFlagDefault string

	_ = cmd.PersistentFlags().String(repositoryFlagName, repositoryFlagDefault, repositoryDescription)

	return nil
}

func registerRetentionExecutionTaskRetained(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	retainedDescription := ``

	var retainedFlagName string
	if cmdPrefix == "" {
		retainedFlagName = "retained"
	} else {
		retainedFlagName = fmt.Sprintf("%v.retained", cmdPrefix)
	}

	var retainedFlagDefault int64

	_ = cmd.PersistentFlags().Int64(retainedFlagName, retainedFlagDefault, retainedDescription)

	return nil
}

func registerRetentionExecutionTaskStartTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	startTimeDescription := ``

	var startTimeFlagName string
	if cmdPrefix == "" {
		startTimeFlagName = "start_time"
	} else {
		startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
	}

	var startTimeFlagDefault string

	_ = cmd.PersistentFlags().String(startTimeFlagName, startTimeFlagDefault, startTimeDescription)

	return nil
}

func registerRetentionExecutionTaskStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusDescription := ``

	var statusFlagName string
	if cmdPrefix == "" {
		statusFlagName = "status"
	} else {
		statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
	}

	var statusFlagDefault string

	_ = cmd.PersistentFlags().String(statusFlagName, statusFlagDefault, statusDescription)

	return nil
}

func registerRetentionExecutionTaskStatusCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusCodeDescription := ``

	var statusCodeFlagName string
	if cmdPrefix == "" {
		statusCodeFlagName = "status_code"
	} else {
		statusCodeFlagName = fmt.Sprintf("%v.status_code", cmdPrefix)
	}

	var statusCodeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusCodeFlagName, statusCodeFlagDefault, statusCodeDescription)

	return nil
}

func registerRetentionExecutionTaskStatusRevision(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	statusRevisionDescription := ``

	var statusRevisionFlagName string
	if cmdPrefix == "" {
		statusRevisionFlagName = "status_revision"
	} else {
		statusRevisionFlagName = fmt.Sprintf("%v.status_revision", cmdPrefix)
	}

	var statusRevisionFlagDefault int64

	_ = cmd.PersistentFlags().Int64(statusRevisionFlagName, statusRevisionFlagDefault, statusRevisionDescription)

	return nil
}

func registerRetentionExecutionTaskTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	totalDescription := ``

	var totalFlagName string
	if cmdPrefix == "" {
		totalFlagName = "total"
	} else {
		totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var totalFlagDefault int64

	_ = cmd.PersistentFlags().Int64(totalFlagName, totalFlagDefault, totalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelRetentionExecutionTaskFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, endTimeAdded := retrieveRetentionExecutionTaskEndTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || endTimeAdded

	err, executionIdAdded := retrieveRetentionExecutionTaskExecutionIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || executionIdAdded

	err, idAdded := retrieveRetentionExecutionTaskIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, jobIdAdded := retrieveRetentionExecutionTaskJobIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || jobIdAdded

	err, repositoryAdded := retrieveRetentionExecutionTaskRepositoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || repositoryAdded

	err, retainedAdded := retrieveRetentionExecutionTaskRetainedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || retainedAdded

	err, startTimeAdded := retrieveRetentionExecutionTaskStartTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || startTimeAdded

	err, statusAdded := retrieveRetentionExecutionTaskStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusAdded

	err, statusCodeAdded := retrieveRetentionExecutionTaskStatusCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusCodeAdded

	err, statusRevisionAdded := retrieveRetentionExecutionTaskStatusRevisionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || statusRevisionAdded

	err, totalAdded := retrieveRetentionExecutionTaskTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || totalAdded

	return nil, retAdded
}

func retrieveRetentionExecutionTaskEndTimeFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	endTimeFlagName := fmt.Sprintf("%v.end_time", cmdPrefix)
	if cmd.Flags().Changed(endTimeFlagName) {

		var endTimeFlagName string
		if cmdPrefix == "" {
			endTimeFlagName = "end_time"
		} else {
			endTimeFlagName = fmt.Sprintf("%v.end_time", cmdPrefix)
		}

		endTimeFlagValue, err := cmd.Flags().GetString(endTimeFlagName)
		if err != nil {
			return err, false
		}
		m.EndTime = endTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskExecutionIDFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	executionIdFlagName := fmt.Sprintf("%v.execution_id", cmdPrefix)
	if cmd.Flags().Changed(executionIdFlagName) {

		var executionIdFlagName string
		if cmdPrefix == "" {
			executionIdFlagName = "execution_id"
		} else {
			executionIdFlagName = fmt.Sprintf("%v.execution_id", cmdPrefix)
		}

		executionIdFlagValue, err := cmd.Flags().GetInt64(executionIdFlagName)
		if err != nil {
			return err, false
		}
		m.ExecutionID = executionIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskIDFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetInt64(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskJobIDFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	jobIdFlagName := fmt.Sprintf("%v.job_id", cmdPrefix)
	if cmd.Flags().Changed(jobIdFlagName) {

		var jobIdFlagName string
		if cmdPrefix == "" {
			jobIdFlagName = "job_id"
		} else {
			jobIdFlagName = fmt.Sprintf("%v.job_id", cmdPrefix)
		}

		jobIdFlagValue, err := cmd.Flags().GetString(jobIdFlagName)
		if err != nil {
			return err, false
		}
		m.JobID = jobIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskRepositoryFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	repositoryFlagName := fmt.Sprintf("%v.repository", cmdPrefix)
	if cmd.Flags().Changed(repositoryFlagName) {

		var repositoryFlagName string
		if cmdPrefix == "" {
			repositoryFlagName = "repository"
		} else {
			repositoryFlagName = fmt.Sprintf("%v.repository", cmdPrefix)
		}

		repositoryFlagValue, err := cmd.Flags().GetString(repositoryFlagName)
		if err != nil {
			return err, false
		}
		m.Repository = repositoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskRetainedFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	retainedFlagName := fmt.Sprintf("%v.retained", cmdPrefix)
	if cmd.Flags().Changed(retainedFlagName) {

		var retainedFlagName string
		if cmdPrefix == "" {
			retainedFlagName = "retained"
		} else {
			retainedFlagName = fmt.Sprintf("%v.retained", cmdPrefix)
		}

		retainedFlagValue, err := cmd.Flags().GetInt64(retainedFlagName)
		if err != nil {
			return err, false
		}
		m.Retained = retainedFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskStartTimeFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	startTimeFlagName := fmt.Sprintf("%v.start_time", cmdPrefix)
	if cmd.Flags().Changed(startTimeFlagName) {

		var startTimeFlagName string
		if cmdPrefix == "" {
			startTimeFlagName = "start_time"
		} else {
			startTimeFlagName = fmt.Sprintf("%v.start_time", cmdPrefix)
		}

		startTimeFlagValue, err := cmd.Flags().GetString(startTimeFlagName)
		if err != nil {
			return err, false
		}
		m.StartTime = startTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskStatusFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusFlagName := fmt.Sprintf("%v.status", cmdPrefix)
	if cmd.Flags().Changed(statusFlagName) {

		var statusFlagName string
		if cmdPrefix == "" {
			statusFlagName = "status"
		} else {
			statusFlagName = fmt.Sprintf("%v.status", cmdPrefix)
		}

		statusFlagValue, err := cmd.Flags().GetString(statusFlagName)
		if err != nil {
			return err, false
		}
		m.Status = statusFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskStatusCodeFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusCodeFlagName := fmt.Sprintf("%v.status_code", cmdPrefix)
	if cmd.Flags().Changed(statusCodeFlagName) {

		var statusCodeFlagName string
		if cmdPrefix == "" {
			statusCodeFlagName = "status_code"
		} else {
			statusCodeFlagName = fmt.Sprintf("%v.status_code", cmdPrefix)
		}

		statusCodeFlagValue, err := cmd.Flags().GetInt64(statusCodeFlagName)
		if err != nil {
			return err, false
		}
		m.StatusCode = statusCodeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskStatusRevisionFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	statusRevisionFlagName := fmt.Sprintf("%v.status_revision", cmdPrefix)
	if cmd.Flags().Changed(statusRevisionFlagName) {

		var statusRevisionFlagName string
		if cmdPrefix == "" {
			statusRevisionFlagName = "status_revision"
		} else {
			statusRevisionFlagName = fmt.Sprintf("%v.status_revision", cmdPrefix)
		}

		statusRevisionFlagValue, err := cmd.Flags().GetInt64(statusRevisionFlagName)
		if err != nil {
			return err, false
		}
		m.StatusRevision = statusRevisionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveRetentionExecutionTaskTotalFlags(depth int, m *models.RetentionExecutionTask, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	totalFlagName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(totalFlagName) {

		var totalFlagName string
		if cmdPrefix == "" {
			totalFlagName = "total"
		} else {
			totalFlagName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		totalFlagValue, err := cmd.Flags().GetInt64(totalFlagName)
		if err != nil {
			return err, false
		}
		m.Total = totalFlagValue

		retAdded = true
	}

	return nil, retAdded
}
